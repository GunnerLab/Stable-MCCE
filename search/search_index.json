{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Multi-Conformation Continuum Electrostatics - MCCE \u00b6 Page last updated on: 2020-07-07 MCCE is a biophysics simulation program developed at Gunner Lab at City College of New York. MCCE combines continuum electrostatics and molecular mechanics. In this program, the protein side chain motions are simulated explicitly while the dielectric effect of solvent and bulk protein material is modeled by continuum electrostatics. What can MCCE do? \u00b6 MCCE can calculate: residue pka, cofactor Em and protein PI in protein-solvent systems; protein structural responses to changes in charge; residue ionization changes in response to protein structural changes; location and stoichiometry of proton transfers coupled to electron transfer References \u00b6 Cite these papers if you use MCCE for publications: Song Y., J. Mao, Gunner M.R. (2009). J. Comp. Chem epub Mar 2009 Georgescu R.E., Alexov E.G., Gunner M.R.(2002). Combining conformational flexibility and continuum electrostatics for calculating pKa's in proteins. Biophys J. 83, 1731-1748 Alexov, E. and Gunner, M.R. (1997) Incorporating protein conformational flexibility into pH- titration calculations: Results on T4 Lysozyme. Biophys. J. 74, 2075-2093 Contact \u00b6 Need to contact us? About issues with this program: Submit an issue from Github About Physics of MCCE: Email to Marilyn Gunner Not sure? Email to Junjun Mao","title":"What is MCCE?"},{"location":"#multi-conformation-continuum-electrostatics-mcce","text":"Page last updated on: 2020-07-07 MCCE is a biophysics simulation program developed at Gunner Lab at City College of New York. MCCE combines continuum electrostatics and molecular mechanics. In this program, the protein side chain motions are simulated explicitly while the dielectric effect of solvent and bulk protein material is modeled by continuum electrostatics.","title":"Multi-Conformation Continuum Electrostatics - MCCE"},{"location":"#what-can-mcce-do","text":"MCCE can calculate: residue pka, cofactor Em and protein PI in protein-solvent systems; protein structural responses to changes in charge; residue ionization changes in response to protein structural changes; location and stoichiometry of proton transfers coupled to electron transfer","title":"What can MCCE do?"},{"location":"#references","text":"Cite these papers if you use MCCE for publications: Song Y., J. Mao, Gunner M.R. (2009). J. Comp. Chem epub Mar 2009 Georgescu R.E., Alexov E.G., Gunner M.R.(2002). Combining conformational flexibility and continuum electrostatics for calculating pKa's in proteins. Biophys J. 83, 1731-1748 Alexov, E. and Gunner, M.R. (1997) Incorporating protein conformational flexibility into pH- titration calculations: Results on T4 Lysozyme. Biophys. J. 74, 2075-2093","title":"References"},{"location":"#contact","text":"Need to contact us? About issues with this program: Submit an issue from Github About Physics of MCCE: Email to Marilyn Gunner Not sure? Email to Junjun Mao","title":"Contact"},{"location":"develop/","text":"How to contribute code using git \u00b6 Page last updated on: 2020-07-07 Part 1. One-time set up \u00b6 Identity: \u00b6 $ git config --global user.name \"<Your Name>\" $ git config --global user.email <your email> Save credential for 6 hours: \u00b6 $ git config --global credential.helper 'cache --timeout=21600' Save credential permanently: \u00b6 $ git config --global credential.helper store Alias of showing git history: \u00b6 Add this to ~/.gitconfig [alias] lg = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all Part 2. Start a new repository \u00b6 Clone a remote repo: \u00b6 Clone a remote repo to local computer: $ git clone <url> Convert a local directory: \u00b6 Convert an existing local directory to local git repository: $ git init Part 3. Single line development: \u00b6 Add all files to track: \u00b6 $ git add . Check status: \u00b6 $ git status Commit: \u00b6 $ git commit -a -m \"<commit message>\" Add a file to track: \u00b6 $ git add <file name> Show history: \u00b6 $ git lg It requires you set up the \u201clg\u201d alias in ~/.gitconfig Part 4. Go to past commits \u00b6 Create a new branch and revert to a past commit: $ git checkout -b <new branch> <commit hash> <new branch> is a branch name you make. <commit hash> is the string as reported by git log If you want to make this branch as the new master branch, do a swap as following: make sure your are in the new branch $ git checkout <new branch> force master to merge with current branch and use current branch as favored: $ git merge -s ours master go to the master branch and reconcile again: $ git checkout master $ git merge <new branch> after merge, delete the branch. $ git branch -d <new branch> Part 5. Multi-line development \u00b6 Show branches: \u00b6 $ git branch \u00b6 Show remote branches: $ git branch -r Switch between branches: \u00b6 $ git checkout <branch name> Create and switch branch: \u00b6 $ git checkout -b <branch name> Merge branches: \u00b6 $ git merge <another branch> This will merge a branch to current branch: Merge with current favored: \u00b6 $ git merge -s ours <another branch> Delete branches \u00b6 $ git branch -d <branch name> Force delete: \u00b6 $ git branch -D <branch name> Part 6. Sync remote and local \u00b6 Check remote: \u00b6 $ git remote -v \u201corigin\u201d is the default name of your first remote. Add more remotes: \u00b6 $ git remote add <remote> <url> Pull from remote repo: \u00b6 $ git pull Or $ git pull <remote> <branch> Push to remote: \u00b6 $ git push Push new local branch to remote: \u00b6 $ git push -u <remote> <branch> Delete remote branch: \u00b6 $ git push <remote> --delete <branch> Delete remote tracking branch: \u00b6 $ git remote prune <remote> Part 7. Merge branches \u00b6 Common scenario of merge: \u00b6 Start a new feature: $ git checkout -b new-feature Edit some files, then commit the change: $ git commit -a -m \"Start a feature\" Edit some files, then commit more changes: $ git commit -a -m \"Finish a feature\" Merge in the new-feature branch: $ git checkout master $ git merge new-feature $ git branch -d new-feature Conflict in merge: \u00b6 When conflicts occur, the conflicting files will have visual marks like: <<<<<<< master conflicting text in receiving branch ======= conflicting text in merging branch >>>>>>> branch You need to edit text and remove <<<<<<, ======, >>>>>> lines. Then run a commit: $ git commit -a -m \"<commit message>\"","title":"Contribute code"},{"location":"develop/#how-to-contribute-code-using-git","text":"Page last updated on: 2020-07-07","title":"How to contribute code using git"},{"location":"develop/#part-1-one-time-set-up","text":"","title":"Part 1. One-time set up"},{"location":"develop/#identity","text":"$ git config --global user.name \"<Your Name>\" $ git config --global user.email <your email>","title":"Identity:"},{"location":"develop/#save-credential-for-6-hours","text":"$ git config --global credential.helper 'cache --timeout=21600'","title":"Save credential for 6 hours:"},{"location":"develop/#save-credential-permanently","text":"$ git config --global credential.helper store","title":"Save credential permanently:"},{"location":"develop/#alias-of-showing-git-history","text":"Add this to ~/.gitconfig [alias] lg = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all","title":"Alias of showing git history:"},{"location":"develop/#part-2-start-a-new-repository","text":"","title":"Part 2. Start a new repository"},{"location":"develop/#clone-a-remote-repo","text":"Clone a remote repo to local computer: $ git clone <url>","title":"Clone a remote repo:"},{"location":"develop/#convert-a-local-directory","text":"Convert an existing local directory to local git repository: $ git init","title":"Convert a local directory:"},{"location":"develop/#part-3-single-line-development","text":"","title":"Part 3. Single line development:"},{"location":"develop/#add-all-files-to-track","text":"$ git add .","title":"Add all files to track:"},{"location":"develop/#check-status","text":"$ git status","title":"Check status:"},{"location":"develop/#commit","text":"$ git commit -a -m \"<commit message>\"","title":"Commit:"},{"location":"develop/#add-a-file-to-track","text":"$ git add <file name>","title":"Add a file to track:"},{"location":"develop/#show-history","text":"$ git lg It requires you set up the \u201clg\u201d alias in ~/.gitconfig","title":"Show history:"},{"location":"develop/#part-4-go-to-past-commits","text":"Create a new branch and revert to a past commit: $ git checkout -b <new branch> <commit hash> <new branch> is a branch name you make. <commit hash> is the string as reported by git log If you want to make this branch as the new master branch, do a swap as following: make sure your are in the new branch $ git checkout <new branch> force master to merge with current branch and use current branch as favored: $ git merge -s ours master go to the master branch and reconcile again: $ git checkout master $ git merge <new branch> after merge, delete the branch. $ git branch -d <new branch>","title":"Part 4. Go to past commits"},{"location":"develop/#part-5-multi-line-development","text":"","title":"Part 5. Multi-line development"},{"location":"develop/#show-branches","text":"$ git branch","title":"Show branches:"},{"location":"develop/#_1","text":"Show remote branches: $ git branch -r","title":""},{"location":"develop/#switch-between-branches","text":"$ git checkout <branch name>","title":"Switch between branches:"},{"location":"develop/#create-and-switch-branch","text":"$ git checkout -b <branch name>","title":"Create and switch branch:"},{"location":"develop/#merge-branches","text":"$ git merge <another branch> This will merge a branch to current branch:","title":"Merge branches:"},{"location":"develop/#merge-with-current-favored","text":"$ git merge -s ours <another branch>","title":"Merge with current favored:"},{"location":"develop/#delete-branches","text":"$ git branch -d <branch name>","title":"Delete branches"},{"location":"develop/#force-delete","text":"$ git branch -D <branch name>","title":"Force delete:"},{"location":"develop/#part-6-sync-remote-and-local","text":"","title":"Part 6. Sync remote and local"},{"location":"develop/#check-remote","text":"$ git remote -v \u201corigin\u201d is the default name of your first remote.","title":"Check remote:"},{"location":"develop/#add-more-remotes","text":"$ git remote add <remote> <url>","title":"Add more remotes:"},{"location":"develop/#pull-from-remote-repo","text":"$ git pull Or $ git pull <remote> <branch>","title":"Pull from remote repo:"},{"location":"develop/#push-to-remote","text":"$ git push","title":"Push to remote:"},{"location":"develop/#push-new-local-branch-to-remote","text":"$ git push -u <remote> <branch>","title":"Push new local branch to remote:"},{"location":"develop/#delete-remote-branch","text":"$ git push <remote> --delete <branch>","title":"Delete remote branch:"},{"location":"develop/#delete-remote-tracking-branch","text":"$ git remote prune <remote>","title":"Delete remote tracking branch:"},{"location":"develop/#part-7-merge-branches","text":"","title":"Part 7. Merge branches"},{"location":"develop/#common-scenario-of-merge","text":"Start a new feature: $ git checkout -b new-feature Edit some files, then commit the change: $ git commit -a -m \"Start a feature\" Edit some files, then commit more changes: $ git commit -a -m \"Finish a feature\" Merge in the new-feature branch: $ git checkout master $ git merge new-feature $ git branch -d new-feature","title":"Common scenario of merge:"},{"location":"develop/#conflict-in-merge","text":"When conflicts occur, the conflicting files will have visual marks like: <<<<<<< master conflicting text in receiving branch ======= conflicting text in merging branch >>>>>>> branch You need to edit text and remove <<<<<<, ======, >>>>>> lines. Then run a commit: $ git commit -a -m \"<commit message>\"","title":"Conflict in merge:"},{"location":"emexample/","text":"Calculate Em of heme in Cytochrome \u00b6 Page last updated on: 2020-08-06 Background \u00b6 Cytochrome c is a small protein that transports electrons in mitochondria to facilitate the synthesis of ATP. Its redox potential plays an important role in its function. The regulation of the Cytochrome C redox potential can be explained by Continuum Electrostatic analysis. Junjun Mao, Karin Hauser, and M. R. Gunner, How Cytochromes with Different Folds Control Heme Redox Potentials, Biochemistry 2003, 42, 33, 9829\u20139840 Cytochrome C from E. Caballus (PDB ID 1AKK) has an experimental Em of 260 mV. Prepare the calculation \u00b6 After the program is installed and execution path is configured (see link for details), make a working directory and go to the working directory. MCCE will generate intermediate files and result files in the current directory, so it's best to prepare one directory for calculation on one structure. mkdir 1akk cd 1akk Then download pdb file 1AKK to the working directory: getpdb 1akk Saving as 1AKK.pdb ... Download completed. Run 4 steps of MCCE \u00b6 Step 1. Convert PDB file into MCCE PDB \u00b6 This step checks for inconsistencies between PDB file and MCCE topology files. Missing sidechain atoms will be added back. Residues that are not in the MCCE lexicon will be flagged. Explicit waters with greater than 5% surface exposure will be stripped off. The heme in cytochrome C has two ligands HIS18 and MET80. They behave differently than HIS and MET so we have to rename them. step1.py can handle HIS, MET, and CYS if they are the ligands to heme. If your heme ligand is not one of these three residues, please let us know. Run step 1: step1.py 1akk.pdb The reason we specify the location is to force mcce to use our own renaming rules instead of the default one. This command generates step1_out.pdb which is required of step 2. Step 2. Make side chain conformers \u00b6 This step makes alternative side chain locations and ionization states. step2.py This command generates step2_out.pdb which is required of step 3. If you want to know the help information and other options of this command: step2.py -h Step 3. Make energy table \u00b6 This step calculates conformer self energy and pairwise interaction table. step3.py This command generates opp files under energies/ folder and file head3.lst which are required of step 4. If you want to know the help information and other options of this command: step3.py -h Step 4. Simulate a titration with Monte Carlo sampling \u00b6 This setp simulates a titration and write out the conformation and ionization states of each side chain at various conditions. step4.py -i 0 -d 60 -t eh The occupancy table is in file fort.38. The net charge is in file sum_crg.out Eh is in file pK.out Results \u00b6 The pKa report is in file pK.out. cat pK.out Your will see the calculated Eh for heme is 247 mV To analyze the ionization energy of heme at the midpoint: mfe.py HEM+A0105_ A more detailed explanation of mfe.py program can be found here","title":"Em calculation"},{"location":"emexample/#calculate-em-of-heme-in-cytochrome","text":"Page last updated on: 2020-08-06","title":"Calculate Em of heme in Cytochrome"},{"location":"emexample/#background","text":"Cytochrome c is a small protein that transports electrons in mitochondria to facilitate the synthesis of ATP. Its redox potential plays an important role in its function. The regulation of the Cytochrome C redox potential can be explained by Continuum Electrostatic analysis. Junjun Mao, Karin Hauser, and M. R. Gunner, How Cytochromes with Different Folds Control Heme Redox Potentials, Biochemistry 2003, 42, 33, 9829\u20139840 Cytochrome C from E. Caballus (PDB ID 1AKK) has an experimental Em of 260 mV.","title":"Background"},{"location":"emexample/#prepare-the-calculation","text":"After the program is installed and execution path is configured (see link for details), make a working directory and go to the working directory. MCCE will generate intermediate files and result files in the current directory, so it's best to prepare one directory for calculation on one structure. mkdir 1akk cd 1akk Then download pdb file 1AKK to the working directory: getpdb 1akk Saving as 1AKK.pdb ... Download completed.","title":"Prepare the calculation"},{"location":"emexample/#run-4-steps-of-mcce","text":"","title":"Run 4 steps of MCCE"},{"location":"emexample/#step-1-convert-pdb-file-into-mcce-pdb","text":"This step checks for inconsistencies between PDB file and MCCE topology files. Missing sidechain atoms will be added back. Residues that are not in the MCCE lexicon will be flagged. Explicit waters with greater than 5% surface exposure will be stripped off. The heme in cytochrome C has two ligands HIS18 and MET80. They behave differently than HIS and MET so we have to rename them. step1.py can handle HIS, MET, and CYS if they are the ligands to heme. If your heme ligand is not one of these three residues, please let us know. Run step 1: step1.py 1akk.pdb The reason we specify the location is to force mcce to use our own renaming rules instead of the default one. This command generates step1_out.pdb which is required of step 2.","title":"Step 1. Convert PDB file into MCCE PDB"},{"location":"emexample/#step-2-make-side-chain-conformers","text":"This step makes alternative side chain locations and ionization states. step2.py This command generates step2_out.pdb which is required of step 3. If you want to know the help information and other options of this command: step2.py -h","title":"Step 2. Make side chain conformers"},{"location":"emexample/#step-3-make-energy-table","text":"This step calculates conformer self energy and pairwise interaction table. step3.py This command generates opp files under energies/ folder and file head3.lst which are required of step 4. If you want to know the help information and other options of this command: step3.py -h","title":"Step 3. Make energy table"},{"location":"emexample/#step-4-simulate-a-titration-with-monte-carlo-sampling","text":"This setp simulates a titration and write out the conformation and ionization states of each side chain at various conditions. step4.py -i 0 -d 60 -t eh The occupancy table is in file fort.38. The net charge is in file sum_crg.out Eh is in file pK.out","title":"Step 4. Simulate a titration with Monte Carlo sampling"},{"location":"emexample/#results","text":"The pKa report is in file pK.out. cat pK.out Your will see the calculated Eh for heme is 247 mV To analyze the ionization energy of heme at the midpoint: mfe.py HEM+A0105_ A more detailed explanation of mfe.py program can be found here","title":"Results"},{"location":"hbexample/","text":"Compute hydrogen bond network \u00b6 Page last updated on: 2020-06-22 Hydrogen bond network obtained from MCCE is the hydrogen bonds existing in protein in Boltzmann distribution. The network helps reveal proton transclocation pathways, water pathways involving in the protein. The relative publication is on Cytochrome c Oxidase . Principle \u00b6 The hydrogen bond network in MCCE is obtained from microstates in Boltzmann Distribution in Monte Carlo sampling, based on defined D-H...D distance and angle, where D is the donor atom with a lone pair. Save microstates with Boltzmann Distribution in Monte Carlo sampling. Calculate all possible hydrogen bonds exist between residue conformers. A hydrogen bond matrix is obtatined. Coupling with microstates (Step 1) and hydrogen bond matrix (Step 2), hydrogen bonds selected in miscrostates in Monte Carlo sampling are calculated. Input \u00b6 Monte Carlo sampling microstates is obtained from energies and head3.lst . Hydrogen bond matrix is obtatined from step2_out.pdb and head3.lst . Selected hydrogen bond network is calculated based on hb.dat and microstate file, which is in ms_out folder. Output \u00b6 pH#eH#ms.txt under ms_out folder is generated for each pH and eH titration, where each file is named after titration point of pH and eH value following by 'ms'. Hydrogen bond matrix is saved in hb.dat and hah.txt , where hb.dat is a binary file and hah.txt is a readable txt file. hb.dat has 2D matrix with N * N, where N is the total conformer number in the protein. hah.txt stores the geometry infos for each hydrogen bond. resInHbNet.txt contains the all residues that can be involved in hydrogen bond network. reshbond.txt contains all possible bonds between residues. pH#eH#hb.txt under hb_out folder is obtained for each pH and eH titration, where each file is named after titration point of pH and eH value foloowing by 'hb'. File format \u00b6 pH#eH#ms.txt : Comment line and blank line are dismissed. Each file starts with headers, consist of monte carlo sampling unchanged information. Then it stores the new conformer id for each microstate, and its relative energy and times it stay at this microstate. First line : Temperature, pH, eH values Second line : Method to get microstate. Either MONTERUNS or ENUMERATE, representing from monte carlo sampling or analytical method Third line : n_fixed, the number of fixed residues for sampling. Following are the occupied conformer ids for each fixed residue, splitted by space. Fourth line : n_free, the number of free titrated residues that can get flipped during sampling. Follwing are all conformer ids, splitted by space for each free titrated residue, splitted by semicolon. For each Monte Carlo sampling : Fifth line : order of monte carlo sampling Fifth line : n_free, following occupied conformer id for each free titrated residue. This is the starting state for the sampling. The starting state will be decided by its energy to be accpeted or not. Sixth line : Energy of microstate, counter representing times the microstate stays, new conformer ids compared to last microstate. T:298.15,pH:7.00,eH:0.00 METHOD:MONTERUNS #N_FIXED:FIXED_CONF_ID 33:4 5 16 17 18 19 20 35 39 93 94 103 104 105 111 119 128 129 138 145 157 158 176 199 216 217 226 232 239 708 762 854 919 #N_FREE residues:CONF_IDs for each free residues 43:0 1 2 3 ;6 7 10 11 ;27 28 ;29 30 31 32 33 34 ; ... #EVERY MONTERUN START FROM A NEW STATE #MC:ITER_MONTERUNS #N_FREE: FREE_CONF_ID, #ENERGY, COUNT,NEW_CONF MC:0 43:1 7 28 31 48 53 56 61 92 106 121 137 140 147 156 167 175 178 183 222 227 234 241 256 269 327 351 383 417 449 472 502 542 552 583 728 769 804 882 945 1008 1059 1112 -93.403641,9, -93.274643,3,782 -93.646645,1,63 ... MC:1 43:0 7 28 30 48 50 55 60 92 106 127 137 140 146 156 167 175 178 183 222 227 235 245 256 269 327 342 373 417 449 472 502 542 546 594 729 791 797 901 941 1008 1059 1112 -92.401054,3, -91.990730,4,121 925 -93.319809,9,572 ... 2. hb.dat : - First integer(4 bite): n_conf, the total conformer number of the protein. - The following is n_conf * n_conf matrix where 1 represents a hydrogen bond and 0 no hydrogen bond. 3. hah.txt : - Conformer_id of Donor, Conformer_id of Acceptor, Donor Atom, ~ Hyrogen-- Acceptor Atom, Distance, Angle GLN01A0002_001 HOH01A0109_001 NE2~2HE2-- O 3.02 160 GLN01A0002_001 HOH01A0109_002 NE2~2HE2-- O 3.02 160 4. resInHbNet.txt : - residue_name involving hydrogen bond network META0001 GLNA0002 TYRA0003 LYSA0004 5. reshbond.txt : - Residue_name of Donor, Residue_name of Acceptor GLNA0002 HOHA0109 TYRA0003 META0001 TYRA0003 HOHA0070 TYRA0003 HOHA0132 6. pH#eH#hb.txt : - Donor Residue, Acceptro Residue, Occupancy of hydrogen bond in all microstates LYSA0050 META0001 1.000 LYSA0050 ASPA0047 1.000 GLNA0002 HOHA0109 0.750 LYSA0004 GLUA0015 1.000 Example \u00b6 Here is a tutorial to calculate the hydrogen bond network using MCCE and to visualize hydrogen bond network using Cytoscape. Parameter setting in run.prm: \u00b6 Output microstate in MCCE step 4. step 4: t Output Microstate from standard monte carlo (MS_OUT) Run Step 6 to get hydrogen bond network. \"(GET_HBOND_MATRIX)\" : obtain hydrogen bond matrix from step2_out.pdb and head3.lst. \"(HBOND_LOWER_LIMIT)\" : setting for (GET_HBOND_MATRIX). Hydrogen bond distance lower limit. \"(HBOND_UPPER_LIMIT)\" : setting for (GET_HBOND_MATRIX). Hydrogen bond distance upper limit. \"(HBOND_ANG_CUTOFF)\" : setting for (GET_HBOND_MATRIX). Hydrogen bond angle cutoff, only angle larger than the cutoff will be considered hydrogen bond. \"(GET_HBOND_NETWORK)\" : obtain hydrogen bond network in Botlzmann distribution based on hb.dat and microstate file. Hydrogen bond donor and acceptor attom parameters are setting in param04/hb.tpl . HDONOR ASP01 HD1 HDONOR ASP02 HD2 HACCEPT ASP01 OD1 OD2 HACCEPT ASP02 OD1 OD2 HACCEPT ASP-1 OD1 OD2 Default hydrogen bond definition in run.prm is: Step 6: t Obtain hydrogen bond matrix (GET_HBOND_MATRIX) 1.2 Lower limit of hydrogen bond H--B distance (HBOND_LOWER_LIMIT) 3.2 Upper limit of hydrogen bond H--B distance (HBOND_UPPER_LIMIT) 90.0 Angle cutoff of hydrogen bond (HBOND_ANG_CUTOFF) t Obtain hydrogen bond network (GET_HBOND_NETWORK) Output file after step 6: hb.txt if final hydrogen bond network. hb.dat, hah.txt, resInHbNet.txt, reshbonds.txt from (GET_HBOND_MATRIX) . hb.txt from (GET_HBOND_NETWORK) . Result Analysis: \u00b6 Cytoscape visualization: \u00b6 We are using Cytoscape for visualizing hydrogen bond networks. Download and install Cytoscape . Input file preparation for Cytoscape: \u00b6 hb.txt: hydrogen bond network with direct hydrogen bond between residues/waters, which is the direct output after MCCE. out.dat: aggrageted hydrogen bond network coupling with water for multiple hydrogen bond networks, which needs post-analysis based on hb.txt. Steps to get out.dat: \u00b6 Inputs : - Multiple hb.txt files: rename them as 1.dat, 2.dat, 3.dat etc. - Residues_list.lst: residues list selected. ARGA0019 ASPA0028 LYSA0027 TYRA0122 ASNA0025 Scripts : /home/cai/source/jlu_net20170830 - jhead.h: water molecules cutoff represents the maximum water number allowing to bridging hydrogen bond between residues. Here 4 is up to 4 water molecules are allowed to bridge between two residues. For example, if you want to see up to two water bridging hydrogen bond connections between two residues, then you can change 4 to 2. static int cutoff = 4; - jlu_new-cai.cpp: flags if output relevent files. const int flag_interest=0; //flag to study interested residues: T100 and E286 const int flag_matrix=1; //flag to output matrix of hb network const int flag_network=1; //flag to output network with donor, acceptor, occ const int flag_network_opt=1; //flag to output network with shorter name const int flag_map=1; //flag to output classification of amino acids in network const int flag_sif=1; //flag to output network with format of sif const int flag_cat_3s8f=0; //flag to sync the cofactor name to protein 3s8f.pdb in sifformat const int flag_cat_1m56=1; //flag to sync the cofactor name to protein 1m56.pdb in sifformat - jhead-test2.cpp - Makefile: a-4w.out in makefile, output name after compiling, can be changed. Here for up to 4 water, we write a-4w.out . Suppose for two water: change a-4w.out to a-2w.out make - a-4w.out Run scripts : ./a-4w.out Outputs : - out.txt: residue-residue hydrogen bond interacton, in a N * N matrix format - out.dat: residue-residue hydrogen bond interaction DONOR ACCEPT OCCUPANCY RA0019 DA0028 100 KA0027 NA0025 100 NA0025 DA0028 100 - out_opt.dat: residue-residue hydrogen bond interaction with opimal shorter residue name DONOR ACCEPT OCCUPANCY 19 28 100 27 25 100 25 28 100 - out.sif: residue residue hydrogen bond interaction, with the format that can be used to connect 3D structure with cytoscape using RINalyzer - out_map.dat: residue's amnio acid type classification RESIDUE CLASS FULL_NAME 19 B ARGA0019 28 A ASPA0028 27 B LYSA0027 - out_path.txt: water pathway that connect the two residues ARGA0019#####################ASPA0028 GET: ARGA0019, HOHS5631, ASPA0028, Here, water HOHS5631 helps bridge ARGA0019 - ASPA0028 hydrogen bond. Visualization on Cytoscape: \u00b6 Open out.dat file using the Cytoscape and play with different layout. Supplement \u00b6 Comparison between old and new hydrogen bond network \u00b6 Comparison between old and new format microstate file old_version new_version time 58s 1s size 246MB 27MB Comparison between old and new step 6 old_version new_version time 117s 87s","title":"Hydrogen-bond network"},{"location":"hbexample/#compute-hydrogen-bond-network","text":"Page last updated on: 2020-06-22 Hydrogen bond network obtained from MCCE is the hydrogen bonds existing in protein in Boltzmann distribution. The network helps reveal proton transclocation pathways, water pathways involving in the protein. The relative publication is on Cytochrome c Oxidase .","title":"Compute hydrogen bond network"},{"location":"hbexample/#principle","text":"The hydrogen bond network in MCCE is obtained from microstates in Boltzmann Distribution in Monte Carlo sampling, based on defined D-H...D distance and angle, where D is the donor atom with a lone pair. Save microstates with Boltzmann Distribution in Monte Carlo sampling. Calculate all possible hydrogen bonds exist between residue conformers. A hydrogen bond matrix is obtatined. Coupling with microstates (Step 1) and hydrogen bond matrix (Step 2), hydrogen bonds selected in miscrostates in Monte Carlo sampling are calculated.","title":"Principle"},{"location":"hbexample/#input","text":"Monte Carlo sampling microstates is obtained from energies and head3.lst . Hydrogen bond matrix is obtatined from step2_out.pdb and head3.lst . Selected hydrogen bond network is calculated based on hb.dat and microstate file, which is in ms_out folder.","title":"Input"},{"location":"hbexample/#output","text":"pH#eH#ms.txt under ms_out folder is generated for each pH and eH titration, where each file is named after titration point of pH and eH value following by 'ms'. Hydrogen bond matrix is saved in hb.dat and hah.txt , where hb.dat is a binary file and hah.txt is a readable txt file. hb.dat has 2D matrix with N * N, where N is the total conformer number in the protein. hah.txt stores the geometry infos for each hydrogen bond. resInHbNet.txt contains the all residues that can be involved in hydrogen bond network. reshbond.txt contains all possible bonds between residues. pH#eH#hb.txt under hb_out folder is obtained for each pH and eH titration, where each file is named after titration point of pH and eH value foloowing by 'hb'.","title":"Output"},{"location":"hbexample/#file-format","text":"pH#eH#ms.txt : Comment line and blank line are dismissed. Each file starts with headers, consist of monte carlo sampling unchanged information. Then it stores the new conformer id for each microstate, and its relative energy and times it stay at this microstate. First line : Temperature, pH, eH values Second line : Method to get microstate. Either MONTERUNS or ENUMERATE, representing from monte carlo sampling or analytical method Third line : n_fixed, the number of fixed residues for sampling. Following are the occupied conformer ids for each fixed residue, splitted by space. Fourth line : n_free, the number of free titrated residues that can get flipped during sampling. Follwing are all conformer ids, splitted by space for each free titrated residue, splitted by semicolon. For each Monte Carlo sampling : Fifth line : order of monte carlo sampling Fifth line : n_free, following occupied conformer id for each free titrated residue. This is the starting state for the sampling. The starting state will be decided by its energy to be accpeted or not. Sixth line : Energy of microstate, counter representing times the microstate stays, new conformer ids compared to last microstate. T:298.15,pH:7.00,eH:0.00 METHOD:MONTERUNS #N_FIXED:FIXED_CONF_ID 33:4 5 16 17 18 19 20 35 39 93 94 103 104 105 111 119 128 129 138 145 157 158 176 199 216 217 226 232 239 708 762 854 919 #N_FREE residues:CONF_IDs for each free residues 43:0 1 2 3 ;6 7 10 11 ;27 28 ;29 30 31 32 33 34 ; ... #EVERY MONTERUN START FROM A NEW STATE #MC:ITER_MONTERUNS #N_FREE: FREE_CONF_ID, #ENERGY, COUNT,NEW_CONF MC:0 43:1 7 28 31 48 53 56 61 92 106 121 137 140 147 156 167 175 178 183 222 227 234 241 256 269 327 351 383 417 449 472 502 542 552 583 728 769 804 882 945 1008 1059 1112 -93.403641,9, -93.274643,3,782 -93.646645,1,63 ... MC:1 43:0 7 28 30 48 50 55 60 92 106 127 137 140 146 156 167 175 178 183 222 227 235 245 256 269 327 342 373 417 449 472 502 542 546 594 729 791 797 901 941 1008 1059 1112 -92.401054,3, -91.990730,4,121 925 -93.319809,9,572 ... 2. hb.dat : - First integer(4 bite): n_conf, the total conformer number of the protein. - The following is n_conf * n_conf matrix where 1 represents a hydrogen bond and 0 no hydrogen bond. 3. hah.txt : - Conformer_id of Donor, Conformer_id of Acceptor, Donor Atom, ~ Hyrogen-- Acceptor Atom, Distance, Angle GLN01A0002_001 HOH01A0109_001 NE2~2HE2-- O 3.02 160 GLN01A0002_001 HOH01A0109_002 NE2~2HE2-- O 3.02 160 4. resInHbNet.txt : - residue_name involving hydrogen bond network META0001 GLNA0002 TYRA0003 LYSA0004 5. reshbond.txt : - Residue_name of Donor, Residue_name of Acceptor GLNA0002 HOHA0109 TYRA0003 META0001 TYRA0003 HOHA0070 TYRA0003 HOHA0132 6. pH#eH#hb.txt : - Donor Residue, Acceptro Residue, Occupancy of hydrogen bond in all microstates LYSA0050 META0001 1.000 LYSA0050 ASPA0047 1.000 GLNA0002 HOHA0109 0.750 LYSA0004 GLUA0015 1.000","title":"File format"},{"location":"hbexample/#example","text":"Here is a tutorial to calculate the hydrogen bond network using MCCE and to visualize hydrogen bond network using Cytoscape.","title":"Example"},{"location":"hbexample/#parameter-setting-in-runprm","text":"Output microstate in MCCE step 4. step 4: t Output Microstate from standard monte carlo (MS_OUT) Run Step 6 to get hydrogen bond network. \"(GET_HBOND_MATRIX)\" : obtain hydrogen bond matrix from step2_out.pdb and head3.lst. \"(HBOND_LOWER_LIMIT)\" : setting for (GET_HBOND_MATRIX). Hydrogen bond distance lower limit. \"(HBOND_UPPER_LIMIT)\" : setting for (GET_HBOND_MATRIX). Hydrogen bond distance upper limit. \"(HBOND_ANG_CUTOFF)\" : setting for (GET_HBOND_MATRIX). Hydrogen bond angle cutoff, only angle larger than the cutoff will be considered hydrogen bond. \"(GET_HBOND_NETWORK)\" : obtain hydrogen bond network in Botlzmann distribution based on hb.dat and microstate file. Hydrogen bond donor and acceptor attom parameters are setting in param04/hb.tpl . HDONOR ASP01 HD1 HDONOR ASP02 HD2 HACCEPT ASP01 OD1 OD2 HACCEPT ASP02 OD1 OD2 HACCEPT ASP-1 OD1 OD2 Default hydrogen bond definition in run.prm is: Step 6: t Obtain hydrogen bond matrix (GET_HBOND_MATRIX) 1.2 Lower limit of hydrogen bond H--B distance (HBOND_LOWER_LIMIT) 3.2 Upper limit of hydrogen bond H--B distance (HBOND_UPPER_LIMIT) 90.0 Angle cutoff of hydrogen bond (HBOND_ANG_CUTOFF) t Obtain hydrogen bond network (GET_HBOND_NETWORK) Output file after step 6: hb.txt if final hydrogen bond network. hb.dat, hah.txt, resInHbNet.txt, reshbonds.txt from (GET_HBOND_MATRIX) . hb.txt from (GET_HBOND_NETWORK) .","title":"Parameter setting in run.prm:"},{"location":"hbexample/#result-analysis","text":"","title":"Result Analysis:"},{"location":"hbexample/#cytoscape-visualization","text":"We are using Cytoscape for visualizing hydrogen bond networks. Download and install Cytoscape .","title":"Cytoscape visualization:"},{"location":"hbexample/#input-file-preparation-for-cytoscape","text":"hb.txt: hydrogen bond network with direct hydrogen bond between residues/waters, which is the direct output after MCCE. out.dat: aggrageted hydrogen bond network coupling with water for multiple hydrogen bond networks, which needs post-analysis based on hb.txt.","title":"Input file preparation for Cytoscape:"},{"location":"hbexample/#steps-to-get-outdat","text":"Inputs : - Multiple hb.txt files: rename them as 1.dat, 2.dat, 3.dat etc. - Residues_list.lst: residues list selected. ARGA0019 ASPA0028 LYSA0027 TYRA0122 ASNA0025 Scripts : /home/cai/source/jlu_net20170830 - jhead.h: water molecules cutoff represents the maximum water number allowing to bridging hydrogen bond between residues. Here 4 is up to 4 water molecules are allowed to bridge between two residues. For example, if you want to see up to two water bridging hydrogen bond connections between two residues, then you can change 4 to 2. static int cutoff = 4; - jlu_new-cai.cpp: flags if output relevent files. const int flag_interest=0; //flag to study interested residues: T100 and E286 const int flag_matrix=1; //flag to output matrix of hb network const int flag_network=1; //flag to output network with donor, acceptor, occ const int flag_network_opt=1; //flag to output network with shorter name const int flag_map=1; //flag to output classification of amino acids in network const int flag_sif=1; //flag to output network with format of sif const int flag_cat_3s8f=0; //flag to sync the cofactor name to protein 3s8f.pdb in sifformat const int flag_cat_1m56=1; //flag to sync the cofactor name to protein 1m56.pdb in sifformat - jhead-test2.cpp - Makefile: a-4w.out in makefile, output name after compiling, can be changed. Here for up to 4 water, we write a-4w.out . Suppose for two water: change a-4w.out to a-2w.out make - a-4w.out Run scripts : ./a-4w.out Outputs : - out.txt: residue-residue hydrogen bond interacton, in a N * N matrix format - out.dat: residue-residue hydrogen bond interaction DONOR ACCEPT OCCUPANCY RA0019 DA0028 100 KA0027 NA0025 100 NA0025 DA0028 100 - out_opt.dat: residue-residue hydrogen bond interaction with opimal shorter residue name DONOR ACCEPT OCCUPANCY 19 28 100 27 25 100 25 28 100 - out.sif: residue residue hydrogen bond interaction, with the format that can be used to connect 3D structure with cytoscape using RINalyzer - out_map.dat: residue's amnio acid type classification RESIDUE CLASS FULL_NAME 19 B ARGA0019 28 A ASPA0028 27 B LYSA0027 - out_path.txt: water pathway that connect the two residues ARGA0019#####################ASPA0028 GET: ARGA0019, HOHS5631, ASPA0028, Here, water HOHS5631 helps bridge ARGA0019 - ASPA0028 hydrogen bond.","title":"Steps to get out.dat:"},{"location":"hbexample/#visualization-on-cytoscape","text":"Open out.dat file using the Cytoscape and play with different layout.","title":"Visualization on Cytoscape:"},{"location":"hbexample/#supplement","text":"","title":"Supplement"},{"location":"hbexample/#comparison-between-old-and-new-hydrogen-bond-network","text":"Comparison between old and new format microstate file old_version new_version time 58s 1s size 246MB 27MB Comparison between old and new step 6 old_version new_version time 117s 87s","title":"Comparison between old and new hydrogen bond network"},{"location":"mcce2free/","text":"How to convert an existing mcce tpl file to free format tpl file? \u00b6 Page last updated on: 2020-07-07 There accumulated a big number of mcce tpl files (topology file of a molecule) which defines the conformers, atoms, connectivity and so on. Since mcce tpl file follows strict format, new mcce adopted a free format to save the same information. Follow these steps to convert an existing mcce tpl file to a new free format tpl file. This example is assuming you convert a mcce tpl file glu.tpl in param04 directory. Convert \u00b6 Run this command to convert mcce format to free format. $ bin/tpl-mcce2free.py param04/glu.tpl > glu.ftpl The above output file has most entries converted. Fix \"rxn\" record \u00b6 Then we can manually compile rxn values in CONFORMER records. First manually replace rxn= with rxn02= , rxn04= , rxn08= depending on the dielectric constant of the tpl file that was converted from. CONFORMER, GLU01: Em0= 0.0, pKa0= 0.00, ne= 0, nH= 0, rxn02= -6.410, rxn04= -3.100, rxn08= -1.390 Error check \u00b6 Now find the atom name difference, especially H atoms. PDB is using version 3 names and old mcce is using version 2 names. For GLU, the name comparison can be found at here . If you have a pdb file of the residue/ligand, we can test the ftpl file against that pdb file: $ bin/verify_tpl.py ftplfile pdbfile It will report any atoms that can not be loaded by the converted ftpl file definition. To change the name in ftpl file, glu.ftp for example: $ sed -i 's/1HB / HB2/g' glu.ftpl You can verify the ftpl file again after the change of names. Store in param directory \u00b6 Finally, place the tested ftpl file under MCCE distribution's \"param\" directory. The MCCE distribution directory is the (HOME) line in your run.prm.","title":"Convert mcce tpl file"},{"location":"mcce2free/#how-to-convert-an-existing-mcce-tpl-file-to-free-format-tpl-file","text":"Page last updated on: 2020-07-07 There accumulated a big number of mcce tpl files (topology file of a molecule) which defines the conformers, atoms, connectivity and so on. Since mcce tpl file follows strict format, new mcce adopted a free format to save the same information. Follow these steps to convert an existing mcce tpl file to a new free format tpl file. This example is assuming you convert a mcce tpl file glu.tpl in param04 directory.","title":"How to convert an existing mcce tpl file to free format tpl file?"},{"location":"mcce2free/#convert","text":"Run this command to convert mcce format to free format. $ bin/tpl-mcce2free.py param04/glu.tpl > glu.ftpl The above output file has most entries converted.","title":"Convert"},{"location":"mcce2free/#fix-rxn-record","text":"Then we can manually compile rxn values in CONFORMER records. First manually replace rxn= with rxn02= , rxn04= , rxn08= depending on the dielectric constant of the tpl file that was converted from. CONFORMER, GLU01: Em0= 0.0, pKa0= 0.00, ne= 0, nH= 0, rxn02= -6.410, rxn04= -3.100, rxn08= -1.390","title":"Fix \"rxn\" record"},{"location":"mcce2free/#error-check","text":"Now find the atom name difference, especially H atoms. PDB is using version 3 names and old mcce is using version 2 names. For GLU, the name comparison can be found at here . If you have a pdb file of the residue/ligand, we can test the ftpl file against that pdb file: $ bin/verify_tpl.py ftplfile pdbfile It will report any atoms that can not be loaded by the converted ftpl file definition. To change the name in ftpl file, glu.ftp for example: $ sed -i 's/1HB / HB2/g' glu.ftpl You can verify the ftpl file again after the change of names.","title":"Error check"},{"location":"mcce2free/#store-in-param-directory","text":"Finally, place the tested ftpl file under MCCE distribution's \"param\" directory. The MCCE distribution directory is the (HOME) line in your run.prm.","title":"Store in param directory"},{"location":"mfehowto/","text":"How to break down the energy of a residue ionization? \u00b6 Page last updated on: 2020-06-19 MCCE calculates theoretical pKas as well as explain why these residues have those pKas. Continuum Electrostatic interpretation of pKa \u00b6 Free energy and pKa \u00b6 An amino acid and conjugate base in equilibrium: $$ AH <=> A^- + H^+ $$ The free energy of the reaction has relationship with the equilibrium of: $$ \\Delta G = \\Delta G_0 + 2.303RT\\lg(\\frac{[A^- ][H^+ ]}{[HA]}) $$ At the equilibrium of midpoint where [A^- ] = [HA] [A^- ] = [HA] , therefore residue pKa is linked to the reaction free energy: $$ 0 = \\Delta G_0 + 2.303RT\\lg([H^+ ]) $$ pKa = -\\lg([H^+ ]) = \\frac{\\Delta G_0}{2.303RT} pKa = -\\lg([H^+ ]) = \\frac{\\Delta G_0}{2.303RT} The acids in solution and in protein \u00b6 We know the ionization energy in solution, which is represented by the solution pKa: \\begin{alignat*}{5} &AH\\quad &&\\xrightarrow{\\Delta G1}\\quad &&&A^- + H^+ \\quad\\quad\\quad &&&&in\\thinspace solution\\\\ &\\downarrow \\small{\\Delta G2}\\quad &&\\quad &&&\\downarrow \\small{\\Delta G3} \\quad\\quad\\quad &&&&\\\\ &[Protein] | AH\\quad &&\\xrightarrow{\\Delta G4}\\quad &&&[Protein'] | A^- + H^+ \\quad\\quad\\quad &&&&in\\thinspace protein \\end{alignat*} \\begin{alignat*}{5} &AH\\quad &&\\xrightarrow{\\Delta G1}\\quad &&&A^- + H^+ \\quad\\quad\\quad &&&&in\\thinspace solution\\\\ &\\downarrow \\small{\\Delta G2}\\quad &&\\quad &&&\\downarrow \\small{\\Delta G3} \\quad\\quad\\quad &&&&\\\\ &[Protein] | AH\\quad &&\\xrightarrow{\\Delta G4}\\quad &&&[Protein'] | A^- + H^+ \\quad\\quad\\quad &&&&in\\thinspace protein \\end{alignat*} {\\Delta G1} {\\Delta G1} is solution pKa, and {\\Delta G4} {\\Delta G4} is acid pKa in protein, what we are looking for. {\\Delta G2} {\\Delta G2} and {\\Delta G3} {\\Delta G3} involve the free energy of moving acid from solution to protein environment, interaction between the acid and the protein, and the interaction within the protein at AH AH and A^- A^- states. The desolvation energy, pairwise interactions are all calculated by continuum electrostatic methods. MCCE's way to compute pKa \u00b6 MCCE makes residues as independently ionizable pieces. All residues are given freedom to change conformation and ionization if possible. Residue pairwise interactions are precalculated. The choice of a residue being at which position and ionization state is statistically counted by Monte Carlo sampling. A pKa calculation is a simulated titration that carried out at multiple pH points. The residue charges change with pH, and their pKas are their midpoints determined by fitting the titration curve. Therefore the calculated pKa of a residue is a statistical result that came from the simultaneous interactions of many factors. To understand the pKa, we need to decipher the factors with the help of mean field energy analysis. Understanding the residue pKa and factors that affect pKa \u00b6 Mean field approximation \u00b6 The accurate interaction calculation is only possible at microstate level. At the end, what we know is the probability of a residue being at certain conformation and ionization. The interaction between residues calculated after Monte Carlo sampling os approximated by \"mean field\". For example, 4 possible interactions for a pair of acids could be: A_1H \\leftrightarrow A_2H \\tag{1} A_1H \\leftrightarrow A_2H \\tag{1} A_1H \\leftrightarrow A_2^- \\tag{2} A_1H \\leftrightarrow A_2^- \\tag{2} A_1^- \\leftrightarrow A_2H \\tag{3} A_1^- \\leftrightarrow A_2H \\tag{3} A_1^- \\leftrightarrow A_2^- \\tag{4} A_1^- \\leftrightarrow A_2^- \\tag{4} If MCCE sampled acids A1 A1 and A2 A2 are both at 50% ionization, after MOnte Carlo sampling, from the ionization rate alone, we could not know the interaction is 50% of (2) and 50% of (3), 50% of (1) and 50% of (4), or a mix. This is the limitation of mean fields energy analysis. Once we know the limitation, we can extract quite useful information of residue ionization. MFE energy terms \u00b6 Once step 4 is done, one can run mfe.py on a residue to break down the energy terms of a ionization free energy. The input residue has to be in file pK.out. For example, in lysozyme pKa calculation , we obtained pKa output file pK.out. $ cat pK.out pH pKa/Em n(slope) 1000*chi2 vdw0 vdw1 tors ebkb dsol offset pHpK0 EhEm0 -TS residues total NTR+A0001_ 5.095 0.985 0.015 -0.00 -0.01 -0.26 0.52 4.01 -0.95 -2.90 0.00 0.00 -0.11 0.29 LYS+A0001_ 9.593 0.998 0.027 -0.00 -0.00 0.00 0.15 0.46 0.29 -0.81 0.00 -0.00 -0.09 0.00 ARG+A0005_ 12.695 0.858 0.051 -0.01 -0.00 -0.00 -0.73 0.89 0.00 0.20 0.00 0.14 -0.35 0.14 GLU-A0007_ 3.192 0.944 0.010 -0.01 0.00 -0.19 -1.27 1.17 -0.22 1.56 0.00 0.30 -1.02 0.31 LYS+A0013_ 11.322 0.954 0.019 -0.00 -0.00 0.00 0.19 0.61 0.29 0.92 0.00 0.00 -2.01 0.00 ARG+A0014_ 13.330 0.934 0.004 -0.01 -0.00 0.00 0.07 -0.28 0.00 0.83 0.00 0.43 -0.60 0.44 HIS+A0015_ 6.816 0.988 0.065 -0.01 -0.01 0.00 1.44 1.33 -0.73 -0.16 0.00 0.36 -0.42 1.80 ASP-A0018_ 2.013 0.929 0.127 -0.01 -0.00 -0.16 -2.03 0.95 -0.62 2.74 0.00 0.40 -0.86 0.40 TYR-A0020_ 13.498 0.687 0.401 0.00 0.00 0.00 0.24 3.29 -0.37 -3.30 0.00 0.18 0.04 0.09 ARG+A0021_ 13.239 0.796 0.092 -0.01 -0.00 0.00 -0.09 0.11 0.00 0.74 0.00 0.28 -0.74 0.29 TYR-A0023_ 10.312 0.863 0.020 0.00 0.00 0.00 -1.17 1.98 -0.37 -0.11 0.00 0.29 -0.33 0.29 LYS+A0033_ 10.581 0.974 0.026 -0.00 -0.00 0.00 0.06 0.61 0.29 0.18 0.00 0.00 -1.09 0.05 GLU-A0035_ 5.133 0.880 1.144 -0.04 -0.01 -0.01 -1.26 2.16 -0.22 -0.38 0.00 0.26 -0.23 0.26 ARG+A0045_ 12.919 0.796 1.608 -0.03 -0.00 0.00 0.19 -0.32 0.00 0.42 0.00 0.45 -0.24 0.46 ASP-A0048_ 1.528 0.963 0.058 -0.01 0.00 -0.24 -2.52 3.22 -0.62 3.22 0.00 0.14 -3.01 0.17 ASP-A0052_ 3.330 0.859 0.170 -0.01 0.00 -0.10 -1.32 1.99 -0.62 1.42 0.00 0.46 -1.20 0.61 TYR-A0053_ >14.0 0.00 0.00 0.00 -1.70 4.45 -0.37 -3.80 0.00 0.00 8.03 6.61 ARG+A0061_ >14.0 -0.01 -0.00 0.00 0.69 0.15 0.00 1.50 0.00 0.42 -2.43 0.31 ASP-A0066_ 2.066 3.239 0.002 -0.01 0.02 -0.04 -5.30 7.34 -0.62 2.68 0.00 -0.11 -4.50 -0.55 ARG+A0068_ 13.604 0.768 0.028 0.12 1.81 0.16 0.29 -0.80 0.00 1.10 0.00 -0.19 -0.05 2.46 ARG+A0073_ 12.750 0.935 0.132 -0.01 -0.00 0.00 -0.12 0.10 0.00 0.25 0.00 0.35 -0.22 0.35 ASP-A0087_ 2.073 0.960 0.014 -0.02 0.01 -0.21 -1.88 1.24 -0.62 2.68 0.00 0.31 -1.18 0.31 LYS+A0096_ 10.631 0.831 0.307 -0.00 0.00 0.00 -1.52 1.26 0.29 0.23 0.00 0.00 -0.25 0.01 LYS+A0097_ 10.813 0.918 0.072 -0.00 -0.00 0.00 -0.27 0.07 0.29 0.41 0.00 0.00 -0.51 -0.00 ASP-A0101_ 3.988 1.009 0.010 -0.00 -0.05 -0.10 0.04 1.15 -0.62 0.76 0.00 0.57 -1.17 0.58 ARG+A0112_ 12.956 0.923 0.080 -0.01 -0.00 0.00 -0.27 0.77 0.00 0.46 0.00 0.55 -0.90 0.59 ARG+A0114_ 13.257 0.968 0.050 -0.01 -0.00 0.00 -0.09 -0.29 0.00 0.76 0.00 0.34 -0.35 0.35 LYS+A0116_ 9.554 0.941 0.042 -0.00 -0.00 0.00 0.12 0.43 0.29 -0.85 0.00 0.00 0.02 0.01 ASP-A0119_ 3.596 1.005 0.031 -0.01 0.00 -0.24 -1.08 1.95 -0.62 1.15 0.00 0.09 -1.15 0.09 ARG+A0125_ 13.083 0.915 0.005 -0.01 -0.00 -0.00 0.36 -0.18 0.00 0.58 0.00 0.45 -0.75 0.45 ARG+A0128_ 13.586 0.939 0.008 0.00 -0.00 0.00 0.08 -0.81 0.00 1.09 0.00 0.45 -0.36 0.45 CTR-A0129_ 2.464 0.905 0.072 -0.01 -0.01 -0.12 -0.06 1.66 0.00 1.29 0.00 0.49 -2.75 0.49 Now we would like to know why ASP52 has a low pKa of 3.33 $ mfe.py ASP-A0052_ -c 0.1 Residue ASP-A0052_ pKa/Em=3.33 ================================= Terms pH meV Kcal --------------------------------- vdw0 -0.01 -0.85 -0.02 vdw1 0.00 0.21 0.00 tors -0.10 -5.89 -0.14 ebkb -1.32 -76.87 -1.81 dsol 1.99 115.58 2.72 offset -0.62 -36.17 -0.85 pH&pK0 1.42 82.42 1.94 Eh&Em0 0.00 0.00 0.00 -TS 0.00 0.00 0.00 residues -1.20 -69.73 -1.64 ********************************* TOTAL 0.15 8.70 0.20 sum_crg ********************************* ASNA0044_ -0.44 -25.31 -0.59 0.00 ARGA0045_ -0.12 -6.74 -0.16 1.00 ASNA0046_ -0.16 -9.25 -0.22 0.00 ASPA0048_ 0.51 29.65 0.70 -0.96 SERA0050_ 0.12 7.04 0.17 0.00 GLNA0057_ 0.22 12.63 0.30 0.00 ASNA0059_ -0.99 -57.31 -1.35 0.00 ARGA0061_ -0.27 -15.65 -0.37 1.00 ASPA0066_ 0.39 22.84 0.54 -1.00 ARGA0112_ -0.19 -11.15 -0.26 1.00 ARGA0114_ -0.10 -5.86 -0.14 1.00 ================================= Program computes the ionization free energy, specifically, the free energy difference between the ionized ASP and the neutral ASP. If we don't specify pH, mfe.py uses the midpoint pH or Eh. Energy terms: vdw0: Van der Waals interaction within the residue. Since the vdw interaction is similar to ionized and neutral ASP, the contribution to \\Delta G \\Delta G of ionization is small. vdw1: Van der Waals interaction to the protein backbone. Again the contribution to pKa is usually small. tors: Side chain torsion energy. The contribution to pKa is usually small. ebkb: The protein backbone electrostatic interaction. The protein secondary structure especially helices have a dipole that may affect the ionized residue more than neutral form of the residue, therefore it could be a factor of pKa. dsolv: The desolvation energy. The ionized residue is less stabilized im protein than in solution. This makes the ionization inside protein harder and it links to a positive free energy to the reaction from neutral residue to ionized residue. offset: The is a system correction of pKa calibrated by benchmark. It captures the terms not counted by MCCE. pH&pK0: Solution pH effect to the ionization. It is environment pressure to the residue ionization. To an acid, low solution pH makes the ionization (releasing proton) easy so it contributes as a favorable energy. To a base, low pH makes ionization harder. When pH equals residue's solution pKa, the environment pH is at the balance point, where the contribution is 0. Eh&Em0: Environment Eh effect to redox reaction. This works similarily as pH&pK0. -TS: Entropy term. The number of rotamers of neutral and ionized residues generated by MCCE may be different. The effect of number of rotamers on two ionization states act like entropy. Since this may not be a desired effect, one can enable entropy correction in step 4, Monte Carlo sampling. If entropy correction is enabled in MC, the entropy effect has been eliminated and entropy should be set to 0 in MFE analysis. Program mfe.py is able to know how MC is done and handle this accordingly, or one can turn on or off in MFE manually. residues: Total pairwise interaction from other residues. Other residues may shift the ionization free energy depending on their dipole orentation and charge. TOTAL: Total free enegy of ionization reaction. It the sum of all above terms. Redisue breakdown: Individual residue contribution. This part is the breakdown of term residues . At the midpoint, [AH] = [A^-] [AH] = [A^-] . This means conformers of AH AH and conformers of A^- A^- strike a balance, and the transition energy \\Delta G \\Delta G between them is 0 under this condition. The value \\Delta G \\Delta G in pH unit also means how far away the pKa is from the solution pH. At the midpoint, \\Delta G = 0 \\Delta G = 0 and residue pKa is the same as envrionment pH. In the above example, ASP52 has low pH because a pretty big stabilization from ASN59. We can also do mfe anaylysis off the midpoint, for example at physiological pH about 7. The command option \"-p 7\" sets the mfe point. $ mfe.py ASP-A0052_ -c 0.1 -p 7 Residue ASP-A0052_ pKa/Em=3.33 ================================= Terms pH meV Kcal --------------------------------- vdw0 -0.02 -0.97 -0.02 vdw1 -0.01 -0.52 -0.01 tors -0.11 -6.30 -0.15 ebkb -1.32 -76.59 -1.80 dsol 1.97 114.53 2.69 offset -0.62 -36.17 -0.85 pH&pK0 -2.25 -130.60 -3.07 Eh&Em0 0.00 0.00 0.00 -TS 0.00 0.00 0.00 residues -1.81 -105.25 -2.47 ********************************* TOTAL -4.17 -241.87 -5.68 sum_crg ********************************* GLUA0035_ 0.85 49.08 1.15 -0.98 ASNA0044_ -1.00 -57.84 -1.36 0.00 ARGA0045_ -0.11 -6.28 -0.15 1.00 ASNA0046_ -0.85 -49.43 -1.16 0.00 ASPA0048_ 0.52 30.08 0.71 -1.00 SERA0050_ 0.13 7.43 0.17 0.00 GLNA0057_ 0.18 10.47 0.25 0.00 ASNA0059_ -1.20 -69.75 -1.64 0.00 ARGA0061_ -0.28 -16.15 -0.38 1.00 ASPA0066_ 0.40 22.96 0.54 -1.00 ARGA0112_ -0.20 -11.56 -0.27 1.00 ================================= We see ASP52 is surrounded by these polar residues.gets extra stabilization from ASN44 and ASN46 besides ASN59. The stabilization is bigger at pH 7. Actually the back calculated pKa 7-4.17=2.83 7-4.17=2.83 is lower than titrated value 3.33 3.33 , indicating extra stabilization at pH 7. With MFE analysis, one can quickly determine what residues affect the pKa most therefore identify the influential sites.","title":"Analyze ionization energy"},{"location":"mfehowto/#how-to-break-down-the-energy-of-a-residue-ionization","text":"Page last updated on: 2020-06-19 MCCE calculates theoretical pKas as well as explain why these residues have those pKas.","title":"How to break down the energy of a residue ionization?"},{"location":"mfehowto/#continuum-electrostatic-interpretation-of-pka","text":"","title":"Continuum Electrostatic interpretation of pKa"},{"location":"mfehowto/#free-energy-and-pka","text":"An amino acid and conjugate base in equilibrium: $$ AH <=> A^- + H^+ $$ The free energy of the reaction has relationship with the equilibrium of: $$ \\Delta G = \\Delta G_0 + 2.303RT\\lg(\\frac{[A^- ][H^+ ]}{[HA]}) $$ At the equilibrium of midpoint where [A^- ] = [HA] [A^- ] = [HA] , therefore residue pKa is linked to the reaction free energy: $$ 0 = \\Delta G_0 + 2.303RT\\lg([H^+ ]) $$ pKa = -\\lg([H^+ ]) = \\frac{\\Delta G_0}{2.303RT} pKa = -\\lg([H^+ ]) = \\frac{\\Delta G_0}{2.303RT}","title":"Free energy and pKa"},{"location":"mfehowto/#the-acids-in-solution-and-in-protein","text":"We know the ionization energy in solution, which is represented by the solution pKa: \\begin{alignat*}{5} &AH\\quad &&\\xrightarrow{\\Delta G1}\\quad &&&A^- + H^+ \\quad\\quad\\quad &&&&in\\thinspace solution\\\\ &\\downarrow \\small{\\Delta G2}\\quad &&\\quad &&&\\downarrow \\small{\\Delta G3} \\quad\\quad\\quad &&&&\\\\ &[Protein] | AH\\quad &&\\xrightarrow{\\Delta G4}\\quad &&&[Protein'] | A^- + H^+ \\quad\\quad\\quad &&&&in\\thinspace protein \\end{alignat*} \\begin{alignat*}{5} &AH\\quad &&\\xrightarrow{\\Delta G1}\\quad &&&A^- + H^+ \\quad\\quad\\quad &&&&in\\thinspace solution\\\\ &\\downarrow \\small{\\Delta G2}\\quad &&\\quad &&&\\downarrow \\small{\\Delta G3} \\quad\\quad\\quad &&&&\\\\ &[Protein] | AH\\quad &&\\xrightarrow{\\Delta G4}\\quad &&&[Protein'] | A^- + H^+ \\quad\\quad\\quad &&&&in\\thinspace protein \\end{alignat*} {\\Delta G1} {\\Delta G1} is solution pKa, and {\\Delta G4} {\\Delta G4} is acid pKa in protein, what we are looking for. {\\Delta G2} {\\Delta G2} and {\\Delta G3} {\\Delta G3} involve the free energy of moving acid from solution to protein environment, interaction between the acid and the protein, and the interaction within the protein at AH AH and A^- A^- states. The desolvation energy, pairwise interactions are all calculated by continuum electrostatic methods.","title":"The acids in solution and in protein"},{"location":"mfehowto/#mcces-way-to-compute-pka","text":"MCCE makes residues as independently ionizable pieces. All residues are given freedom to change conformation and ionization if possible. Residue pairwise interactions are precalculated. The choice of a residue being at which position and ionization state is statistically counted by Monte Carlo sampling. A pKa calculation is a simulated titration that carried out at multiple pH points. The residue charges change with pH, and their pKas are their midpoints determined by fitting the titration curve. Therefore the calculated pKa of a residue is a statistical result that came from the simultaneous interactions of many factors. To understand the pKa, we need to decipher the factors with the help of mean field energy analysis.","title":"MCCE's way to compute pKa"},{"location":"mfehowto/#understanding-the-residue-pka-and-factors-that-affect-pka","text":"","title":"Understanding the residue pKa and factors that affect pKa"},{"location":"mfehowto/#mean-field-approximation","text":"The accurate interaction calculation is only possible at microstate level. At the end, what we know is the probability of a residue being at certain conformation and ionization. The interaction between residues calculated after Monte Carlo sampling os approximated by \"mean field\". For example, 4 possible interactions for a pair of acids could be: A_1H \\leftrightarrow A_2H \\tag{1} A_1H \\leftrightarrow A_2H \\tag{1} A_1H \\leftrightarrow A_2^- \\tag{2} A_1H \\leftrightarrow A_2^- \\tag{2} A_1^- \\leftrightarrow A_2H \\tag{3} A_1^- \\leftrightarrow A_2H \\tag{3} A_1^- \\leftrightarrow A_2^- \\tag{4} A_1^- \\leftrightarrow A_2^- \\tag{4} If MCCE sampled acids A1 A1 and A2 A2 are both at 50% ionization, after MOnte Carlo sampling, from the ionization rate alone, we could not know the interaction is 50% of (2) and 50% of (3), 50% of (1) and 50% of (4), or a mix. This is the limitation of mean fields energy analysis. Once we know the limitation, we can extract quite useful information of residue ionization.","title":"Mean field approximation"},{"location":"mfehowto/#mfe-energy-terms","text":"Once step 4 is done, one can run mfe.py on a residue to break down the energy terms of a ionization free energy. The input residue has to be in file pK.out. For example, in lysozyme pKa calculation , we obtained pKa output file pK.out. $ cat pK.out pH pKa/Em n(slope) 1000*chi2 vdw0 vdw1 tors ebkb dsol offset pHpK0 EhEm0 -TS residues total NTR+A0001_ 5.095 0.985 0.015 -0.00 -0.01 -0.26 0.52 4.01 -0.95 -2.90 0.00 0.00 -0.11 0.29 LYS+A0001_ 9.593 0.998 0.027 -0.00 -0.00 0.00 0.15 0.46 0.29 -0.81 0.00 -0.00 -0.09 0.00 ARG+A0005_ 12.695 0.858 0.051 -0.01 -0.00 -0.00 -0.73 0.89 0.00 0.20 0.00 0.14 -0.35 0.14 GLU-A0007_ 3.192 0.944 0.010 -0.01 0.00 -0.19 -1.27 1.17 -0.22 1.56 0.00 0.30 -1.02 0.31 LYS+A0013_ 11.322 0.954 0.019 -0.00 -0.00 0.00 0.19 0.61 0.29 0.92 0.00 0.00 -2.01 0.00 ARG+A0014_ 13.330 0.934 0.004 -0.01 -0.00 0.00 0.07 -0.28 0.00 0.83 0.00 0.43 -0.60 0.44 HIS+A0015_ 6.816 0.988 0.065 -0.01 -0.01 0.00 1.44 1.33 -0.73 -0.16 0.00 0.36 -0.42 1.80 ASP-A0018_ 2.013 0.929 0.127 -0.01 -0.00 -0.16 -2.03 0.95 -0.62 2.74 0.00 0.40 -0.86 0.40 TYR-A0020_ 13.498 0.687 0.401 0.00 0.00 0.00 0.24 3.29 -0.37 -3.30 0.00 0.18 0.04 0.09 ARG+A0021_ 13.239 0.796 0.092 -0.01 -0.00 0.00 -0.09 0.11 0.00 0.74 0.00 0.28 -0.74 0.29 TYR-A0023_ 10.312 0.863 0.020 0.00 0.00 0.00 -1.17 1.98 -0.37 -0.11 0.00 0.29 -0.33 0.29 LYS+A0033_ 10.581 0.974 0.026 -0.00 -0.00 0.00 0.06 0.61 0.29 0.18 0.00 0.00 -1.09 0.05 GLU-A0035_ 5.133 0.880 1.144 -0.04 -0.01 -0.01 -1.26 2.16 -0.22 -0.38 0.00 0.26 -0.23 0.26 ARG+A0045_ 12.919 0.796 1.608 -0.03 -0.00 0.00 0.19 -0.32 0.00 0.42 0.00 0.45 -0.24 0.46 ASP-A0048_ 1.528 0.963 0.058 -0.01 0.00 -0.24 -2.52 3.22 -0.62 3.22 0.00 0.14 -3.01 0.17 ASP-A0052_ 3.330 0.859 0.170 -0.01 0.00 -0.10 -1.32 1.99 -0.62 1.42 0.00 0.46 -1.20 0.61 TYR-A0053_ >14.0 0.00 0.00 0.00 -1.70 4.45 -0.37 -3.80 0.00 0.00 8.03 6.61 ARG+A0061_ >14.0 -0.01 -0.00 0.00 0.69 0.15 0.00 1.50 0.00 0.42 -2.43 0.31 ASP-A0066_ 2.066 3.239 0.002 -0.01 0.02 -0.04 -5.30 7.34 -0.62 2.68 0.00 -0.11 -4.50 -0.55 ARG+A0068_ 13.604 0.768 0.028 0.12 1.81 0.16 0.29 -0.80 0.00 1.10 0.00 -0.19 -0.05 2.46 ARG+A0073_ 12.750 0.935 0.132 -0.01 -0.00 0.00 -0.12 0.10 0.00 0.25 0.00 0.35 -0.22 0.35 ASP-A0087_ 2.073 0.960 0.014 -0.02 0.01 -0.21 -1.88 1.24 -0.62 2.68 0.00 0.31 -1.18 0.31 LYS+A0096_ 10.631 0.831 0.307 -0.00 0.00 0.00 -1.52 1.26 0.29 0.23 0.00 0.00 -0.25 0.01 LYS+A0097_ 10.813 0.918 0.072 -0.00 -0.00 0.00 -0.27 0.07 0.29 0.41 0.00 0.00 -0.51 -0.00 ASP-A0101_ 3.988 1.009 0.010 -0.00 -0.05 -0.10 0.04 1.15 -0.62 0.76 0.00 0.57 -1.17 0.58 ARG+A0112_ 12.956 0.923 0.080 -0.01 -0.00 0.00 -0.27 0.77 0.00 0.46 0.00 0.55 -0.90 0.59 ARG+A0114_ 13.257 0.968 0.050 -0.01 -0.00 0.00 -0.09 -0.29 0.00 0.76 0.00 0.34 -0.35 0.35 LYS+A0116_ 9.554 0.941 0.042 -0.00 -0.00 0.00 0.12 0.43 0.29 -0.85 0.00 0.00 0.02 0.01 ASP-A0119_ 3.596 1.005 0.031 -0.01 0.00 -0.24 -1.08 1.95 -0.62 1.15 0.00 0.09 -1.15 0.09 ARG+A0125_ 13.083 0.915 0.005 -0.01 -0.00 -0.00 0.36 -0.18 0.00 0.58 0.00 0.45 -0.75 0.45 ARG+A0128_ 13.586 0.939 0.008 0.00 -0.00 0.00 0.08 -0.81 0.00 1.09 0.00 0.45 -0.36 0.45 CTR-A0129_ 2.464 0.905 0.072 -0.01 -0.01 -0.12 -0.06 1.66 0.00 1.29 0.00 0.49 -2.75 0.49 Now we would like to know why ASP52 has a low pKa of 3.33 $ mfe.py ASP-A0052_ -c 0.1 Residue ASP-A0052_ pKa/Em=3.33 ================================= Terms pH meV Kcal --------------------------------- vdw0 -0.01 -0.85 -0.02 vdw1 0.00 0.21 0.00 tors -0.10 -5.89 -0.14 ebkb -1.32 -76.87 -1.81 dsol 1.99 115.58 2.72 offset -0.62 -36.17 -0.85 pH&pK0 1.42 82.42 1.94 Eh&Em0 0.00 0.00 0.00 -TS 0.00 0.00 0.00 residues -1.20 -69.73 -1.64 ********************************* TOTAL 0.15 8.70 0.20 sum_crg ********************************* ASNA0044_ -0.44 -25.31 -0.59 0.00 ARGA0045_ -0.12 -6.74 -0.16 1.00 ASNA0046_ -0.16 -9.25 -0.22 0.00 ASPA0048_ 0.51 29.65 0.70 -0.96 SERA0050_ 0.12 7.04 0.17 0.00 GLNA0057_ 0.22 12.63 0.30 0.00 ASNA0059_ -0.99 -57.31 -1.35 0.00 ARGA0061_ -0.27 -15.65 -0.37 1.00 ASPA0066_ 0.39 22.84 0.54 -1.00 ARGA0112_ -0.19 -11.15 -0.26 1.00 ARGA0114_ -0.10 -5.86 -0.14 1.00 ================================= Program computes the ionization free energy, specifically, the free energy difference between the ionized ASP and the neutral ASP. If we don't specify pH, mfe.py uses the midpoint pH or Eh. Energy terms: vdw0: Van der Waals interaction within the residue. Since the vdw interaction is similar to ionized and neutral ASP, the contribution to \\Delta G \\Delta G of ionization is small. vdw1: Van der Waals interaction to the protein backbone. Again the contribution to pKa is usually small. tors: Side chain torsion energy. The contribution to pKa is usually small. ebkb: The protein backbone electrostatic interaction. The protein secondary structure especially helices have a dipole that may affect the ionized residue more than neutral form of the residue, therefore it could be a factor of pKa. dsolv: The desolvation energy. The ionized residue is less stabilized im protein than in solution. This makes the ionization inside protein harder and it links to a positive free energy to the reaction from neutral residue to ionized residue. offset: The is a system correction of pKa calibrated by benchmark. It captures the terms not counted by MCCE. pH&pK0: Solution pH effect to the ionization. It is environment pressure to the residue ionization. To an acid, low solution pH makes the ionization (releasing proton) easy so it contributes as a favorable energy. To a base, low pH makes ionization harder. When pH equals residue's solution pKa, the environment pH is at the balance point, where the contribution is 0. Eh&Em0: Environment Eh effect to redox reaction. This works similarily as pH&pK0. -TS: Entropy term. The number of rotamers of neutral and ionized residues generated by MCCE may be different. The effect of number of rotamers on two ionization states act like entropy. Since this may not be a desired effect, one can enable entropy correction in step 4, Monte Carlo sampling. If entropy correction is enabled in MC, the entropy effect has been eliminated and entropy should be set to 0 in MFE analysis. Program mfe.py is able to know how MC is done and handle this accordingly, or one can turn on or off in MFE manually. residues: Total pairwise interaction from other residues. Other residues may shift the ionization free energy depending on their dipole orentation and charge. TOTAL: Total free enegy of ionization reaction. It the sum of all above terms. Redisue breakdown: Individual residue contribution. This part is the breakdown of term residues . At the midpoint, [AH] = [A^-] [AH] = [A^-] . This means conformers of AH AH and conformers of A^- A^- strike a balance, and the transition energy \\Delta G \\Delta G between them is 0 under this condition. The value \\Delta G \\Delta G in pH unit also means how far away the pKa is from the solution pH. At the midpoint, \\Delta G = 0 \\Delta G = 0 and residue pKa is the same as envrionment pH. In the above example, ASP52 has low pH because a pretty big stabilization from ASN59. We can also do mfe anaylysis off the midpoint, for example at physiological pH about 7. The command option \"-p 7\" sets the mfe point. $ mfe.py ASP-A0052_ -c 0.1 -p 7 Residue ASP-A0052_ pKa/Em=3.33 ================================= Terms pH meV Kcal --------------------------------- vdw0 -0.02 -0.97 -0.02 vdw1 -0.01 -0.52 -0.01 tors -0.11 -6.30 -0.15 ebkb -1.32 -76.59 -1.80 dsol 1.97 114.53 2.69 offset -0.62 -36.17 -0.85 pH&pK0 -2.25 -130.60 -3.07 Eh&Em0 0.00 0.00 0.00 -TS 0.00 0.00 0.00 residues -1.81 -105.25 -2.47 ********************************* TOTAL -4.17 -241.87 -5.68 sum_crg ********************************* GLUA0035_ 0.85 49.08 1.15 -0.98 ASNA0044_ -1.00 -57.84 -1.36 0.00 ARGA0045_ -0.11 -6.28 -0.15 1.00 ASNA0046_ -0.85 -49.43 -1.16 0.00 ASPA0048_ 0.52 30.08 0.71 -1.00 SERA0050_ 0.13 7.43 0.17 0.00 GLNA0057_ 0.18 10.47 0.25 0.00 ASNA0059_ -1.20 -69.75 -1.64 0.00 ARGA0061_ -0.28 -16.15 -0.38 1.00 ASPA0066_ 0.40 22.96 0.54 -1.00 ARGA0112_ -0.20 -11.56 -0.27 1.00 ================================= We see ASP52 is surrounded by these polar residues.gets extra stabilization from ASN44 and ASN46 besides ASN59. The stabilization is bigger at pH 7. Actually the back calculated pKa 7-4.17=2.83 7-4.17=2.83 is lower than titrated value 3.33 3.33 , indicating extra stabilization at pH 7. With MFE analysis, one can quickly determine what residues affect the pKa most therefore identify the influential sites.","title":"MFE energy terms"},{"location":"ms_analysis/","text":"How to use Microstate Analysis Library? \u00b6 Page last updated on: 2020-11-19 What is Microstate Analysis Library? \u00b6 Monte Carlo sampling in MCCE evaluates protein residue side chains' choice of being at different positions and charge states. This process typically takes thousands of millions of steps and contains of a wealth of information such as: What microstates charge states are most likely at different energy level? What microstates are at the lowest energy of the sampling energy landscape? Do other residues respond to certain changes of a specific residue? Microstate Analysis Library is a tool set to replay Monte Carlo sampling and reveal the above information. If you installed MCCE with conda/miniconda, Microstate Analysis Library is already included in the site-package path and it can be imported directly. If you installed MCCE from the source, Microstate Analysis Library is named as ms_analysis.py in bin directory. You need to copy this program to the same directory of your scripts or Jupyter Notebook to properly import it. Get basic Monte Carlo sampling information \u00b6 Prerequisite: You need to enable microstate recording in MCCE step 4 to have microstates saved. step4.py --ms You will have a ms_out directory and microstate files like pH0eH0ms.txt pH10eH0ms.txt pH11eH0ms.txt pH12eH0ms.txt ... under this directory. Import the library import ms_analysis as msa Show basic information of a MC titration \u00b6 Monte Carlo sapling steps are saved in files, one file at one totration condition. When we load the information back, one object is needed for one totration condition. mc = msa . MSout ( \"ms_out/pH4eH0ms.txt\" ) print ( \"Monte Carlo T = %.3f \" % mc . T ) print ( \"Monte Carlo pH = %.3f \" % mc . pH ) print ( \"Monte Carlo Eh = %.3f \" % mc . Eh ) print ( \"Number of MC counts = %d \" % mc . N_ms ) print ( \"Number of microstates = %d \" % mc . N_uniq ) print ( \"The lowest E = %.3f \" % mc . lowest_E ) print ( \"The average E = %.3f \" % mc . average_E ) print ( \"The hishest E = %.3f \" % mc . highest_E ) Monte Carlo T = 298.150 Monte Carlo pH = 4.000 Monte Carlo Eh = 0.000 Number of MC counts = 1500000 Number of microstates = 266328 The lowest E = -226.198 The average E = -221.267 The hishest E = -206.544 Access Conformer and Residue information \u00b6 Conformers are not tied to Monte Carlo sampling, so it is a separate object in Microstate Analysis Library. Conformers have index of conformers, conformer ID, index of residues (not initialized), residue ID, occupancy (not initialized), and charge. print ( \"iconf ires confid resid occ crg\" ) for conf in msa . conformers : print ( \" %5d %4d %s %s %5.3f %6.3f \" % ( conf . iconf , conf . ires , conf . confid , conf . resid , conf . occ , conf . crg )) iconf ires confid resid occ crg 0 0 NTR01A0001_001 NTRA0001_ 0.000 0.000 1 0 NTR+1A0001_002 NTRA0001_ 0.000 1.000 2 0 LYS01A0001_001 LYSA0001_ 0.000 0.000 3 0 LYS+1A0001_002 LYSA0001_ 0.000 1.000 4 0 VAL01A0002_001 VALA0002_ 0.000 0.000 5 0 PHE01A0003_001 PHEA0003_ 0.000 0.000 6 0 ARG01A0005_001 ARGA0005_ 0.000 0.000 7 0 ARG02A0005_002 ARGA0005_ 0.000 0.000 8 0 ARG02A0005_003 ARGA0005_ 0.000 0.000 9 0 ARG03A0005_004 ARGA0005_ 0.000 0.000 10 0 ARG+1A0005_005 ARGA0005_ 0.000 1.000 11 0 CYD01A0006_001 CYDA0006_ 0.000 0.000 12 0 GLU01A0007_001 GLUA0007_ 0.000 0.000 13 0 GLU01A0007_002 GLUA0007_ 0.000 0.000 14 0 GLU02A0007_003 GLUA0007_ 0.000 0.000 15 0 GLU02A0007_004 GLUA0007_ 0.000 0.000 16 0 GLU-1A0007_005 GLUA0007_ 0.000 -1.000 17 0 LEU01A0008_001 LEUA0008_ 0.000 0.000 18 0 ALA01A0009_001 ALAA0009_ 0.000 0.000 19 0 ALA01A0010_001 ALAA0010_ 0.000 0.000 20 0 ALA01A0011_001 ALAA0011_ 0.000 0.000 21 0 MET01A0012_001 META0012_ 0.000 0.000 22 0 LYS01A0013_001 LYSA0013_ 0.000 0.000 23 0 LYS+1A0013_002 LYSA0013_ 0.000 1.000 24 0 ARG01A0014_001 ARGA0014_ 0.000 0.000 25 0 ARG02A0014_002 ARGA0014_ 0.000 0.000 26 0 ARG03A0014_003 ARGA0014_ 0.000 0.000 27 0 ARG+1A0014_004 ARGA0014_ 0.000 1.000 28 0 HIS01A0015_001 HISA0015_ 0.000 0.000 29 0 HIS01A0015_002 HISA0015_ 0.000 0.000 30 0 HIS02A0015_003 HISA0015_ 0.000 0.000 31 0 HIS02A0015_004 HISA0015_ 0.000 0.000 32 0 HIS+1A0015_005 HISA0015_ 0.000 1.000 33 0 HIS+1A0015_006 HISA0015_ 0.000 1.000 34 0 LEU01A0017_001 LEUA0017_ 0.000 0.000 35 0 ASP01A0018_001 ASPA0018_ 0.000 0.000 36 0 ASP01A0018_002 ASPA0018_ 0.000 0.000 37 0 ASP02A0018_003 ASPA0018_ 0.000 0.000 38 0 ASP02A0018_004 ASPA0018_ 0.000 0.000 39 0 ASP-1A0018_005 ASPA0018_ 0.000 -1.000 40 0 ASN01A0019_001 ASNA0019_ 0.000 0.000 41 0 TYR01A0020_001 TYRA0020_ 0.000 0.000 42 0 TYR01A0020_002 TYRA0020_ 0.000 0.000 43 0 TYR-1A0020_003 TYRA0020_ 0.000 -1.000 44 0 ARG01A0021_001 ARGA0021_ 0.000 0.000 45 0 ARG02A0021_002 ARGA0021_ 0.000 0.000 46 0 ARG03A0021_003 ARGA0021_ 0.000 0.000 47 0 ARG+1A0021_004 ARGA0021_ 0.000 1.000 48 0 TYR01A0023_001 TYRA0023_ 0.000 0.000 49 0 TYR-1A0023_002 TYRA0023_ 0.000 -1.000 50 0 SER01A0024_001 SERA0024_ 0.000 0.000 51 0 SER01A0024_002 SERA0024_ 0.000 0.000 52 0 SER01A0024_003 SERA0024_ 0.000 0.000 53 0 LEU01A0025_001 LEUA0025_ 0.000 0.000 54 0 ASN01A0027_001 ASNA0027_ 0.000 0.000 55 0 ASN01A0027_002 ASNA0027_ 0.000 0.000 56 0 TRP01A0028_001 TRPA0028_ 0.000 0.000 57 0 VAL01A0029_001 VALA0029_ 0.000 0.000 58 0 CYD01A0030_001 CYDA0030_ 0.000 0.000 59 0 ALA01A0031_001 ALAA0031_ 0.000 0.000 60 0 ALA01A0032_001 ALAA0032_ 0.000 0.000 61 0 LYS01A0033_001 LYSA0033_ 0.000 0.000 62 0 LYS+1A0033_002 LYSA0033_ 0.000 1.000 63 0 PHE01A0034_001 PHEA0034_ 0.000 0.000 64 0 GLU01A0035_001 GLUA0035_ 0.000 0.000 65 0 GLU01A0035_002 GLUA0035_ 0.000 0.000 66 0 GLU02A0035_003 GLUA0035_ 0.000 0.000 67 0 GLU02A0035_004 GLUA0035_ 0.000 0.000 68 0 GLU-1A0035_005 GLUA0035_ 0.000 -1.000 69 0 SER01A0036_001 SERA0036_ 0.000 0.000 70 0 ASN01A0037_001 ASNA0037_ 0.000 0.000 71 0 ASN01A0037_002 ASNA0037_ 0.000 0.000 72 0 PHE01A0038_001 PHEA0038_ 0.000 0.000 73 0 ASN01A0039_001 ASNA0039_ 0.000 0.000 74 0 ASN01A0039_002 ASNA0039_ 0.000 0.000 75 0 THR01A0040_001 THRA0040_ 0.000 0.000 76 0 THR01A0040_002 THRA0040_ 0.000 0.000 77 0 GLN01A0041_001 GLNA0041_ 0.000 0.000 78 0 GLN01A0041_002 GLNA0041_ 0.000 0.000 79 0 ALA01A0042_001 ALAA0042_ 0.000 0.000 80 0 THR01A0043_001 THRA0043_ 0.000 0.000 81 0 THR01A0043_002 THRA0043_ 0.000 0.000 82 0 ASN01A0044_001 ASNA0044_ 0.000 0.000 83 0 ASN01A0044_002 ASNA0044_ 0.000 0.000 84 0 ARG01A0045_001 ARGA0045_ 0.000 0.000 85 0 ARG02A0045_002 ARGA0045_ 0.000 0.000 86 0 ARG03A0045_003 ARGA0045_ 0.000 0.000 87 0 ARG+1A0045_004 ARGA0045_ 0.000 1.000 88 0 ASN01A0046_001 ASNA0046_ 0.000 0.000 89 0 ASN01A0046_002 ASNA0046_ 0.000 0.000 90 0 ASN01A0046_003 ASNA0046_ 0.000 0.000 91 0 ASN01A0046_004 ASNA0046_ 0.000 0.000 92 0 THR01A0047_001 THRA0047_ 0.000 0.000 93 0 ASP01A0048_001 ASPA0048_ 0.000 0.000 94 0 ASP01A0048_002 ASPA0048_ 0.000 0.000 95 0 ASP01A0048_003 ASPA0048_ 0.000 0.000 96 0 ASP01A0048_004 ASPA0048_ 0.000 0.000 97 0 ASP02A0048_005 ASPA0048_ 0.000 0.000 98 0 ASP02A0048_006 ASPA0048_ 0.000 0.000 99 0 ASP02A0048_007 ASPA0048_ 0.000 0.000 100 0 ASP02A0048_008 ASPA0048_ 0.000 0.000 101 0 ASP-1A0048_009 ASPA0048_ 0.000 -1.000 102 0 ASP-1A0048_010 ASPA0048_ 0.000 -1.000 103 0 SER01A0050_001 SERA0050_ 0.000 0.000 104 0 SER01A0050_002 SERA0050_ 0.000 0.000 105 0 SER01A0050_003 SERA0050_ 0.000 0.000 106 0 THR01A0051_001 THRA0051_ 0.000 0.000 107 0 THR01A0051_002 THRA0051_ 0.000 0.000 108 0 ASP01A0052_001 ASPA0052_ 0.000 0.000 109 0 ASP01A0052_002 ASPA0052_ 0.000 0.000 110 0 ASP01A0052_003 ASPA0052_ 0.000 0.000 111 0 ASP01A0052_004 ASPA0052_ 0.000 0.000 112 0 ASP02A0052_005 ASPA0052_ 0.000 0.000 113 0 ASP02A0052_006 ASPA0052_ 0.000 0.000 114 0 ASP02A0052_007 ASPA0052_ 0.000 0.000 115 0 ASP02A0052_008 ASPA0052_ 0.000 0.000 116 0 ASP-1A0052_009 ASPA0052_ 0.000 -1.000 117 0 ASP-1A0052_010 ASPA0052_ 0.000 -1.000 118 0 TYR01A0053_001 TYRA0053_ 0.000 0.000 119 0 TYR01A0053_002 TYRA0053_ 0.000 0.000 120 0 TYR-1A0053_003 TYRA0053_ 0.000 -1.000 121 0 ILE01A0055_001 ILEA0055_ 0.000 0.000 122 0 LEU01A0056_001 LEUA0056_ 0.000 0.000 123 0 GLN01A0057_001 GLNA0057_ 0.000 0.000 124 0 GLN01A0057_002 GLNA0057_ 0.000 0.000 125 0 ILE01A0058_001 ILEA0058_ 0.000 0.000 126 0 ASN01A0059_001 ASNA0059_ 0.000 0.000 127 0 ASN01A0059_002 ASNA0059_ 0.000 0.000 128 0 ASN01A0059_003 ASNA0059_ 0.000 0.000 129 0 ASN01A0059_004 ASNA0059_ 0.000 0.000 130 0 SER01A0060_001 SERA0060_ 0.000 0.000 131 0 SER01A0060_002 SERA0060_ 0.000 0.000 132 0 SER01A0060_003 SERA0060_ 0.000 0.000 133 0 SER01A0060_004 SERA0060_ 0.000 0.000 134 0 SER01A0060_005 SERA0060_ 0.000 0.000 135 0 ARG01A0061_001 ARGA0061_ 0.000 0.000 136 0 ARG02A0061_002 ARGA0061_ 0.000 0.000 137 0 ARG03A0061_003 ARGA0061_ 0.000 0.000 138 0 ARG03A0061_004 ARGA0061_ 0.000 0.000 139 0 ARG+1A0061_005 ARGA0061_ 0.000 1.000 140 0 TRP01A0062_001 TRPA0062_ 0.000 0.000 141 0 TRP01A0063_001 TRPA0063_ 0.000 0.000 142 0 CYD01A0064_001 CYDA0064_ 0.000 0.000 143 0 ASN01A0065_001 ASNA0065_ 0.000 0.000 144 0 ASN01A0065_002 ASNA0065_ 0.000 0.000 145 0 ASP01A0066_001 ASPA0066_ 0.000 0.000 146 0 ASP01A0066_002 ASPA0066_ 0.000 0.000 147 0 ASP01A0066_003 ASPA0066_ 0.000 0.000 148 0 ASP01A0066_004 ASPA0066_ 0.000 0.000 149 0 ASP02A0066_005 ASPA0066_ 0.000 0.000 150 0 ASP02A0066_006 ASPA0066_ 0.000 0.000 151 0 ASP02A0066_007 ASPA0066_ 0.000 0.000 152 0 ASP02A0066_008 ASPA0066_ 0.000 0.000 153 0 ASP-1A0066_009 ASPA0066_ 0.000 -1.000 154 0 ASP-1A0066_010 ASPA0066_ 0.000 -1.000 155 0 ARG01A0068_001 ARGA0068_ 0.000 0.000 156 0 ARG02A0068_002 ARGA0068_ 0.000 0.000 157 0 ARG03A0068_003 ARGA0068_ 0.000 0.000 158 0 ARG+1A0068_004 ARGA0068_ 0.000 1.000 159 0 THR01A0069_001 THRA0069_ 0.000 0.000 160 0 THR01A0069_002 THRA0069_ 0.000 0.000 161 0 THR01A0069_003 THRA0069_ 0.000 0.000 162 0 PRO01A0070_001 PROA0070_ 0.000 0.000 163 0 SER01A0072_001 SERA0072_ 0.000 0.000 164 0 ARG01A0073_001 ARGA0073_ 0.000 0.000 165 0 ARG02A0073_002 ARGA0073_ 0.000 0.000 166 0 ARG03A0073_003 ARGA0073_ 0.000 0.000 167 0 ARG+1A0073_004 ARGA0073_ 0.000 1.000 168 0 ASN01A0074_001 ASNA0074_ 0.000 0.000 169 0 ASN01A0074_002 ASNA0074_ 0.000 0.000 170 0 LEU01A0075_001 LEUA0075_ 0.000 0.000 171 0 CYD01A0076_001 CYDA0076_ 0.000 0.000 172 0 ASN01A0077_001 ASNA0077_ 0.000 0.000 173 0 ILE01A0078_001 ILEA0078_ 0.000 0.000 174 0 PRO01A0079_001 PROA0079_ 0.000 0.000 175 0 CYD01A0080_001 CYDA0080_ 0.000 0.000 176 0 SER01A0081_001 SERA0081_ 0.000 0.000 177 0 ALA01A0082_001 ALAA0082_ 0.000 0.000 178 0 LEU01A0083_001 LEUA0083_ 0.000 0.000 179 0 LEU01A0084_001 LEUA0084_ 0.000 0.000 180 0 SER01A0085_001 SERA0085_ 0.000 0.000 181 0 SER01A0085_002 SERA0085_ 0.000 0.000 182 0 SER01A0086_001 SERA0086_ 0.000 0.000 183 0 SER01A0086_002 SERA0086_ 0.000 0.000 184 0 ASP01A0087_001 ASPA0087_ 0.000 0.000 185 0 ASP01A0087_002 ASPA0087_ 0.000 0.000 186 0 ASP02A0087_003 ASPA0087_ 0.000 0.000 187 0 ASP02A0087_004 ASPA0087_ 0.000 0.000 188 0 ASP-1A0087_005 ASPA0087_ 0.000 -1.000 189 0 ILE01A0088_001 ILEA0088_ 0.000 0.000 190 0 THR01A0089_001 THRA0089_ 0.000 0.000 191 0 THR01A0089_002 THRA0089_ 0.000 0.000 192 0 THR01A0089_003 THRA0089_ 0.000 0.000 193 0 ALA01A0090_001 ALAA0090_ 0.000 0.000 194 0 SER01A0091_001 SERA0091_ 0.000 0.000 195 0 SER01A0091_002 SERA0091_ 0.000 0.000 196 0 VAL01A0092_001 VALA0092_ 0.000 0.000 197 0 ASN01A0093_001 ASNA0093_ 0.000 0.000 198 0 ASN01A0093_002 ASNA0093_ 0.000 0.000 199 0 CYD01A0094_001 CYDA0094_ 0.000 0.000 200 0 ALA01A0095_001 ALAA0095_ 0.000 0.000 201 0 LYS01A0096_001 LYSA0096_ 0.000 0.000 202 0 LYS+1A0096_002 LYSA0096_ 0.000 1.000 203 0 LYS01A0097_001 LYSA0097_ 0.000 0.000 204 0 LYS+1A0097_002 LYSA0097_ 0.000 1.000 205 0 ILE01A0098_001 ILEA0098_ 0.000 0.000 206 0 VAL01A0099_001 VALA0099_ 0.000 0.000 207 0 SER01A0100_001 SERA0100_ 0.000 0.000 208 0 SER01A0100_002 SERA0100_ 0.000 0.000 209 0 SER01A0100_003 SERA0100_ 0.000 0.000 210 0 ASP01A0101_001 ASPA0101_ 0.000 0.000 211 0 ASP01A0101_002 ASPA0101_ 0.000 0.000 212 0 ASP02A0101_003 ASPA0101_ 0.000 0.000 213 0 ASP02A0101_004 ASPA0101_ 0.000 0.000 214 0 ASP-1A0101_005 ASPA0101_ 0.000 -1.000 215 0 ASN01A0103_001 ASNA0103_ 0.000 0.000 216 0 ASN01A0103_002 ASNA0103_ 0.000 0.000 217 0 MET01A0105_001 META0105_ 0.000 0.000 218 0 ASN01A0106_001 ASNA0106_ 0.000 0.000 219 0 ASN01A0106_002 ASNA0106_ 0.000 0.000 220 0 ALA01A0107_001 ALAA0107_ 0.000 0.000 221 0 TRP01A0108_001 TRPA0108_ 0.000 0.000 222 0 VAL01A0109_001 VALA0109_ 0.000 0.000 223 0 ALA01A0110_001 ALAA0110_ 0.000 0.000 224 0 TRP01A0111_001 TRPA0111_ 0.000 0.000 225 0 ARG01A0112_001 ARGA0112_ 0.000 0.000 226 0 ARG02A0112_002 ARGA0112_ 0.000 0.000 227 0 ARG03A0112_003 ARGA0112_ 0.000 0.000 228 0 ARG03A0112_004 ARGA0112_ 0.000 0.000 229 0 ARG+1A0112_005 ARGA0112_ 0.000 1.000 230 0 ASN01A0113_001 ASNA0113_ 0.000 0.000 231 0 ASN01A0113_002 ASNA0113_ 0.000 0.000 232 0 ARG01A0114_001 ARGA0114_ 0.000 0.000 233 0 ARG02A0114_002 ARGA0114_ 0.000 0.000 234 0 ARG03A0114_003 ARGA0114_ 0.000 0.000 235 0 ARG+1A0114_004 ARGA0114_ 0.000 1.000 236 0 CYD01A0115_001 CYDA0115_ 0.000 0.000 237 0 LYS01A0116_001 LYSA0116_ 0.000 0.000 238 0 LYS+1A0116_002 LYSA0116_ 0.000 1.000 239 0 THR01A0118_001 THRA0118_ 0.000 0.000 240 0 THR01A0118_002 THRA0118_ 0.000 0.000 241 0 ASP01A0119_001 ASPA0119_ 0.000 0.000 242 0 ASP01A0119_002 ASPA0119_ 0.000 0.000 243 0 ASP02A0119_003 ASPA0119_ 0.000 0.000 244 0 ASP02A0119_004 ASPA0119_ 0.000 0.000 245 0 ASP-1A0119_005 ASPA0119_ 0.000 -1.000 246 0 VAL01A0120_001 VALA0120_ 0.000 0.000 247 0 GLN01A0121_001 GLNA0121_ 0.000 0.000 248 0 GLN01A0121_002 GLNA0121_ 0.000 0.000 249 0 ALA01A0122_001 ALAA0122_ 0.000 0.000 250 0 TRP01A0123_001 TRPA0123_ 0.000 0.000 251 0 ILE01A0124_001 ILEA0124_ 0.000 0.000 252 0 ARG01A0125_001 ARGA0125_ 0.000 0.000 253 0 ARG02A0125_002 ARGA0125_ 0.000 0.000 254 0 ARG03A0125_003 ARGA0125_ 0.000 0.000 255 0 ARG03A0125_004 ARGA0125_ 0.000 0.000 256 0 ARG+1A0125_005 ARGA0125_ 0.000 1.000 257 0 CYD01A0127_001 CYDA0127_ 0.000 0.000 258 0 ARG01A0128_001 ARGA0128_ 0.000 0.000 259 0 ARG02A0128_002 ARGA0128_ 0.000 0.000 260 0 ARG03A0128_003 ARGA0128_ 0.000 0.000 261 0 ARG+1A0128_004 ARGA0128_ 0.000 1.000 262 0 LEU01A0129_001 LEUA0129_ 0.000 0.000 263 0 CTR01A0129_001 CTRA0129_ 0.000 0.000 264 0 CTR01A0129_002 CTRA0129_ 0.000 0.000 265 0 CTR02A0129_003 CTRA0129_ 0.000 0.000 266 0 CTR02A0129_004 CTRA0129_ 0.000 0.000 267 0 CTR-1A0129_005 CTRA0129_ 0.000 -1.000 Residue information is put in Monte Carlo sampling. The reason is Monte Carlo sampling sets fixed conformers/residues aside, and only samples free residues and free conformers. In the Monte Carlo sampling output we have what conformers are fixed and what the free residues are composed. # fixed conformer indecies print ( mc . fixed_iconfs ) [3, 4, 5, 10, 11, 17, 18, 19, 20, 21, 23, 27, 34, 40, 47, 48, 53, 56, 57, 58, 59, 60, 62, 63, 69, 72, 73, 79, 87, 92, 103, 121, 122, 125, 139, 140, 141, 142, 158, 162, 163, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 189, 193, 196, 199, 200, 202, 204, 205, 206, 217, 220, 221, 222, 223, 224, 229, 235, 236, 238, 246, 249, 250, 251, 256, 257, 261, 262] # free residues expressed as index of conformers. It is a list of residues, and each residue has a list of conformers it can choose from. for res in mc . free_residues : print ( res ) [0, 1] [13, 14, 15, 16] [29, 30, 32, 33] [36, 37, 38, 39] [41, 42] [50, 51, 52] [54, 55] [64, 65, 67, 68] [70, 71] [75, 76] [77, 78] [80, 81] [82, 83] [88, 89, 90, 91] [94, 97, 101, 102] [106, 107] [108, 109, 110, 111, 112, 113, 114, 115, 116, 117] [118, 119] [123, 124] [126, 127, 128, 129] [131, 132, 133, 134] [143, 144] [149, 153, 154] [159, 160, 161] [180, 181] [182, 183] [186, 188] [190, 191, 192] [194, 195] [197, 198] [207, 208, 209] [210, 211, 212, 213, 214] [215, 216] [218, 219] [230, 231] [239, 240] [241, 242, 243, 244, 245] [247, 248] [263, 264, 265, 266, 267] To get a residue ID for free residues,we need to use conformer information because residue ID is in conformer record. for res in mc . free_residues : print ( msa . conformers [ res [ 0 ]] . resid ) # use resid from the first conformer in that residue NTRA0001_ GLUA0007_ HISA0015_ ASPA0018_ TYRA0020_ SERA0024_ ASNA0027_ GLUA0035_ ASNA0037_ THRA0040_ GLNA0041_ THRA0043_ ASNA0044_ ASNA0046_ ASPA0048_ THRA0051_ ASPA0052_ TYRA0053_ GLNA0057_ ASNA0059_ SERA0060_ ASNA0065_ ASPA0066_ THRA0069_ SERA0085_ SERA0086_ ASPA0087_ THRA0089_ SERA0091_ ASNA0093_ SERA0100_ ASPA0101_ ASNA0103_ ASNA0106_ ASNA0113_ THRA0118_ ASPA0119_ GLNA0121_ CTRA0129_ Access microstates \u00b6 Each microstate is stored as data structure: class Microstate: def __init__(self, state, E, count): self.state = state self.E = E self.count = count In which state is an array of conformer indecies. E is the state energy, count is the number of times this microstate is chosen. Microstates are stored as a dictionary with the string value of state as the key, and Microstate as the value. One can get the list of microstates by microstates = list ( mc . microstates . values ()) # print first 10 entries for ms in microstates [: 10 ]: print ( ms . state , ms . E , ms . count ) [1, 15, 32, 39, 41, 51, 54, 65, 70, 76, 78, 80, 83, 88, 101, 106, 116, 119, 123, 126, 132, 143, 153, 160, 181, 183, 188, 192, 195, 197, 208, 210, 215, 219, 231, 239, 243, 247, 267] -220.605118 11 [1, 15, 32, 39, 41, 51, 54, 65, 70, 76, 78, 80, 83, 88, 101, 107, 116, 119, 123, 126, 132, 143, 153, 160, 181, 183, 188, 192, 195, 197, 208, 210, 215, 219, 231, 239, 243, 247, 267] -220.287003 3 [1, 15, 32, 39, 41, 51, 54, 65, 70, 76, 78, 80, 83, 88, 101, 107, 116, 119, 123, 126, 132, 143, 153, 160, 181, 183, 188, 192, 195, 197, 208, 210, 215, 219, 231, 239, 243, 248, 267] -220.543747 1 [1, 15, 32, 39, 41, 51, 54, 65, 70, 76, 78, 80, 83, 88, 101, 107, 116, 119, 123, 126, 132, 144, 153, 160, 181, 183, 188, 192, 195, 197, 208, 210, 215, 219, 231, 239, 243, 248, 267] -219.397995 1 [1, 15, 32, 39, 41, 51, 54, 65, 70, 76, 78, 80, 83, 88, 101, 107, 116, 119, 123, 126, 132, 144, 153, 160, 181, 182, 188, 192, 195, 197, 208, 210, 215, 219, 231, 239, 243, 248, 267] -217.926498 1 [1, 15, 32, 39, 41, 51, 54, 65, 70, 76, 78, 80, 83, 88, 101, 107, 116, 119, 123, 126, 132, 143, 153, 160, 181, 182, 188, 192, 195, 197, 208, 210, 215, 219, 231, 239, 243, 248, 267] -219.07225 4 [1, 15, 32, 39, 41, 51, 54, 65, 70, 76, 78, 80, 83, 88, 101, 107, 116, 119, 123, 126, 134, 143, 153, 160, 181, 182, 188, 192, 195, 197, 208, 210, 215, 219, 231, 239, 243, 248, 267] -218.826874 4 [1, 15, 32, 39, 41, 51, 54, 65, 70, 76, 78, 80, 83, 91, 101, 107, 116, 119, 123, 126, 134, 143, 153, 160, 181, 182, 188, 192, 195, 197, 208, 210, 215, 219, 231, 239, 243, 248, 267] -218.07251 2 [1, 15, 32, 39, 41, 51, 54, 65, 70, 76, 78, 80, 83, 91, 101, 107, 116, 119, 123, 126, 134, 143, 153, 160, 181, 183, 188, 192, 195, 197, 208, 210, 215, 219, 231, 239, 243, 248, 267] -219.544006 7 [1, 16, 32, 39, 41, 51, 54, 65, 70, 76, 78, 80, 83, 91, 101, 107, 116, 119, 123, 126, 134, 143, 153, 160, 181, 183, 188, 192, 195, 197, 208, 210, 215, 219, 231, 239, 243, 248, 267] -221.183884 2 Calculate residue charges for a group of conformers \u00b6 free_res_crg = msa . ms_convert2sumcrg ( microstates , mc . free_residues ) for ir in range ( len ( mc . free_residues )): resname = msa . conformers [ mc . free_residues [ ir ][ 0 ]] . resid # use resid from the first conformer in that residue print ( \" %s %6.3f \" % ( resname , free_res_crg [ ir ])) NTRA0001_ 0.992 GLUA0007_ -0.733 HISA0015_ 0.995 ASPA0018_ -0.962 TYRA0020_ 0.000 SERA0024_ 0.000 ASNA0027_ 0.000 GLUA0035_ -0.090 ASNA0037_ 0.000 THRA0040_ 0.000 GLNA0041_ 0.000 THRA0043_ 0.000 ASNA0044_ 0.000 ASNA0046_ 0.000 ASPA0048_ -0.991 THRA0051_ 0.000 ASPA0052_ -0.698 TYRA0053_ 0.000 GLNA0057_ 0.000 ASNA0059_ 0.000 SERA0060_ 0.000 ASNA0065_ 0.000 ASPA0066_ -0.987 THRA0069_ 0.000 SERA0085_ 0.000 SERA0086_ 0.000 ASPA0087_ -0.977 THRA0089_ 0.000 SERA0091_ 0.000 ASNA0093_ 0.000 SERA0100_ 0.000 ASPA0101_ -0.219 ASNA0103_ 0.000 ASNA0106_ 0.000 ASNA0113_ 0.000 THRA0118_ 0.000 ASPA0119_ -0.670 GLNA0121_ 0.000 CTRA0129_ -0.888 Group microstates by energy \u00b6 Here is an example to divide microstates into energy bands. Unique microstate couns and total counts over bands \u00b6 # get the energy bin size from the range of MC energy e_step = ( mc . highest_E - mc . lowest_E ) / 20 ticks = [ mc . lowest_E + e_step * ( i ) for i in range ( 20 )] ms_in_bands = msa . groupms_byenergy ( mc . microstates . values (), ticks ) uniqms_in_bands = [ len ( band ) for band in ms_in_bands ] print ( uniqms_in_bands ) [234, 3387, 18352, 38339, 48204, 46960, 38989, 28568, 18870, 11624, 6654, 3420, 1617, 674, 243, 104, 55, 21, 11, 2] # Now compute the counts instead of unique microstates counts_in_bands = [ sum ([ ms . count for ms in band ]) for band in ms_in_bands ] print ( counts_in_bands ) [31231, 96883, 181201, 240564, 254871, 227699, 176626, 122414, 77258, 45436, 24604, 12170, 5324, 2336, 743, 388, 165, 60, 23, 4] # plot them import matplotlib.pyplot as plt fig = plt . figure ( figsize = ( 18 , 6 )) ax1 = fig . add_subplot ( 121 ) ax1 . title . set_text ( 'Unique microstates' ) # charge over energy bands ax1 . bar ([ i for i in range ( 20 )], uniqms_in_bands ) ax2 = fig . add_subplot ( 122 ) ax2 . title . set_text ( 'Total counts' ) ax2 . bar ([ i for i in range ( 20 )], counts_in_bands ) plt . show () Charge over energy bands \u00b6 crg_in_bands = [] for band in ms_in_bands : band_total_crg = 0.0 for ms in band : band_total_crg += msa . ms_charge ( ms ) * ms . count crg_in_bands . append ( band_total_crg / msa . ms_counts ( band )) print ( crg_in_bands ) [-6.129454708462745, -5.798344394785463, -5.6241852969906345, -5.446471625014549, -5.284802900290735, -5.118779616950448, -4.983683036472547, -4.845483359746434, -4.724416888865878, -4.590610969275464, -4.436067306129084, -4.405012325390304, -4.340721262208866, -4.333476027397261, -4.141318977119784, -4.461340206185567, -3.8424242424242423, -4.116666666666666, -3.8260869565217392, -3.0] fig = plt . figure ( figsize = ( 8 , 6 )) plt . bar ([ i for i in range ( 20 )], crg_in_bands ) plt . show () Which charge is the most populated \u00b6 counts_vs_charge = {} for ms in mc . microstates . values (): charge = int ( msa . ms_charge ( ms )) if charge in counts_vs_charge : counts_vs_charge [ charge ] += ms . count else : counts_vs_charge [ charge ] = ms . count charges = list ( counts_vs_charge . keys ()) charges . sort () counts_population = [ counts_vs_charge [ i ] for i in charges ] fig = plt . figure ( figsize = ( 8 , 6 )) plt . bar ( charges , counts_population ) plt . show () Group microstate by conformer selection and show what changed \u00b6 ! grep A0035 head3 . lst 00065 GLU01A0035_001 f 0.00 0.000 0 0.00 0 0 2.062 -6.408 3.293 -0.967 1.795 0.000 01O000M000 t 00066 GLU01A0035_002 f 0.00 0.000 0 0.00 0 0 2.062 -6.408 0.573 -1.299 1.375 0.000 01O000M000 t 00067 GLU02A0035_003 f 0.00 0.000 0 0.00 0 0 1.629 -6.500 3.293 1.389 1.854 0.000 02O000M000 t 00068 GLU02A0035_004 f 0.00 0.000 0 0.00 0 0 1.629 -6.500 0.573 -0.131 1.245 0.000 02O000M000 t 00069 GLU-1A0035_005 f 0.00 -1.000 0 4.75 0 -1 1.573 -6.495 0.573 -2.810 4.319 -0.300 -1O000M000 t ! grep A0035 fort . 38 GLU01A0035_001 0.058 0.058 0.061 0.060 0.053 0.036 0.012 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 GLU01A0035_002 0.811 0.808 0.801 0.779 0.749 0.543 0.158 0.022 0.002 0.000 0.000 0.000 0.000 0.000 0.000 GLU02A0035_003 0.000 0.001 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 GLU02A0035_004 0.132 0.133 0.135 0.138 0.107 0.080 0.024 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 GLU-1A0035_005 0.000 0.000 0.004 0.023 0.090 0.341 0.807 0.978 0.998 1.000 1.000 1.000 1.000 1.000 1.000 Group microstates by conformer index numbers. If any conformer in the list appears in the microstate, this microstate will be put in the first group, otherwise in the second group. netural , charged = msa . groupms_byiconf ( mc . microstates . values (), [ 64 , 65 , 66 , 67 ]) See what conformer has changed by calculating conformer occupancy difference. # what conformers have changed diff_occ = msa . whatchanged_conf ( netural , charged ) for key in diff_occ . keys (): print ( \" %3d , %s : %6.3f \" % ( key , msa . conformers [ key ] . confid , diff_occ [ key ])) 0, NTR01A0001_001: 0.000 1, NTR+1A0001_002: -0.000 13, GLU01A0007_002: 0.001 14, GLU02A0007_003: 0.003 15, GLU02A0007_004: -0.003 16, GLU-1A0007_005: -0.001 29, HIS01A0015_002: -0.001 30, HIS02A0015_003: -0.000 32, HIS+1A0015_005: -0.003 33, HIS+1A0015_006: 0.004 36, ASP01A0018_002: 0.003 37, ASP02A0018_003: -0.001 38, ASP02A0018_004: -0.001 39, ASP-1A0018_005: -0.001 41, TYR01A0020_001: -0.006 42, TYR01A0020_002: 0.006 50, SER01A0024_001: 0.009 51, SER01A0024_002: -0.007 52, SER01A0024_003: -0.002 54, ASN01A0027_001: -0.019 55, ASN01A0027_002: 0.019 64, GLU01A0035_001: -0.058 65, GLU01A0035_002: -0.823 67, GLU02A0035_004: -0.118 68, GLU-1A0035_005: 1.000 70, ASN01A0037_001: 0.004 71, ASN01A0037_002: -0.004 75, THR01A0040_001: 0.001 76, THR01A0040_002: -0.001 77, GLN01A0041_001: -0.003 78, GLN01A0041_002: 0.003 80, THR01A0043_001: 0.005 81, THR01A0043_002: -0.005 82, ASN01A0044_001: -0.246 83, ASN01A0044_002: 0.246 88, ASN01A0046_001: -0.205 89, ASN01A0046_002: 0.147 90, ASN01A0046_003: 0.126 91, ASN01A0046_004: -0.068 94, ASP01A0048_002: -0.000 97, ASP02A0048_005: 0.001 101, ASP-1A0048_009: -0.009 102, ASP-1A0048_010: 0.008 106, THR01A0051_001: -0.005 107, THR01A0051_002: 0.005 108, ASP01A0052_001: 0.002 109, ASP01A0052_002: -0.000 110, ASP01A0052_003: 0.020 111, ASP01A0052_004: 0.004 112, ASP02A0052_005: 0.192 113, ASP02A0052_006: 0.016 114, ASP02A0052_007: 0.126 115, ASP02A0052_008: 0.008 116, ASP-1A0052_009: -0.349 117, ASP-1A0052_010: -0.020 118, TYR01A0053_001: 0.001 119, TYR01A0053_002: -0.001 123, GLN01A0057_001: 0.004 124, GLN01A0057_002: -0.004 126, ASN01A0059_001: -0.008 127, ASN01A0059_002: 0.001 128, ASN01A0059_003: 0.007 129, ASN01A0059_004: -0.000 131, SER01A0060_002: 0.002 132, SER01A0060_003: -0.028 133, SER01A0060_004: -0.002 134, SER01A0060_005: 0.028 143, ASN01A0065_001: 0.003 144, ASN01A0065_002: -0.003 149, ASP02A0066_005: 0.001 153, ASP-1A0066_009: 0.001 154, ASP-1A0066_010: -0.002 159, THR01A0069_001: 0.002 160, THR01A0069_002: -0.006 161, THR01A0069_003: 0.004 180, SER01A0085_001: 0.004 181, SER01A0085_002: -0.004 182, SER01A0086_001: -0.001 183, SER01A0086_002: 0.001 186, ASP02A0087_003: -0.005 188, ASP-1A0087_005: 0.005 190, THR01A0089_001: -0.000 191, THR01A0089_002: 0.009 192, THR01A0089_003: -0.009 194, SER01A0091_001: 0.008 195, SER01A0091_002: -0.008 197, ASN01A0093_001: -0.004 198, ASN01A0093_002: 0.004 207, SER01A0100_001: -0.012 208, SER01A0100_002: 0.003 209, SER01A0100_003: 0.009 210, ASP01A0101_001: 0.005 211, ASP01A0101_002: 0.001 212, ASP02A0101_003: -0.003 213, ASP02A0101_004: 0.013 214, ASP-1A0101_005: -0.017 215, ASN01A0103_001: -0.002 216, ASN01A0103_002: 0.002 218, ASN01A0106_001: 0.003 219, ASN01A0106_002: -0.003 230, ASN01A0113_001: 0.056 231, ASN01A0113_002: -0.056 239, THR01A0118_001: -0.000 240, THR01A0118_002: 0.000 241, ASP01A0119_001: 0.003 242, ASP01A0119_002: 0.000 243, ASP02A0119_003: 0.019 244, ASP02A0119_004: 0.000 245, ASP-1A0119_005: -0.023 247, GLN01A0121_001: -0.003 248, GLN01A0121_002: 0.003 263, CTR01A0129_001: -0.001 264, CTR01A0129_002: -0.003 265, CTR02A0129_003: -0.003 266, CTR02A0129_004: -0.003 267, CTR-1A0129_005: 0.010 See what has changed in terms of residue's conformer population change. The residue difference is measured by Bhattachayya distance of residues' conformer populations. # What residues have changed diff_bhd = msa . whatchanged_res ( netural , charged , mc . free_residues ) resname = [] bhd = [] for ir in range ( len ( mc . free_residues )): if diff_bhd [ ir ] < 99.0 : resname . append ( msa . conformers [ mc . free_residues [ ir ][ 0 ]] . resid ) bhd . append ( diff_bhd [ ir ]) def autolabel ( rects , ax ): \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\" for rect in rects : height = rect . get_height () ax . annotate ( ' %.3f ' % height , xy = ( rect . get_x () + rect . get_width () / 2 , height ), xytext = ( 0 , 3 ), # 3 points vertical offset textcoords = \"offset points\" , ha = 'center' , va = 'bottom' ) import numpy as np x = np . arange ( len ( resname )) width = 0.2 fig , ax = plt . subplots ( figsize = ( 18 , 8 )) rects = ax . bar ( x , bhd , width ) ax . set_ylabel ( \"Residue difference measured by Bhattachayya distance\" ) autolabel ( rects , ax ) plt . xticks ( x , resname , rotation = 'vertical' ) plt . show () Group microstate by conformer names, and chained selection \u00b6 confnames = [ conf . confid for conf in msa . conformers ] for confname in confnames : print ( confname ) NTR01A0001_001 NTR+1A0001_002 LYS01A0001_001 LYS+1A0001_002 VAL01A0002_001 PHE01A0003_001 ARG01A0005_001 ARG02A0005_002 ARG02A0005_003 ARG03A0005_004 ARG+1A0005_005 CYD01A0006_001 GLU01A0007_001 GLU01A0007_002 GLU02A0007_003 GLU02A0007_004 GLU-1A0007_005 LEU01A0008_001 ALA01A0009_001 ALA01A0010_001 ALA01A0011_001 MET01A0012_001 LYS01A0013_001 LYS+1A0013_002 ARG01A0014_001 ARG02A0014_002 ARG03A0014_003 ARG+1A0014_004 HIS01A0015_001 HIS01A0015_002 HIS02A0015_003 HIS02A0015_004 HIS+1A0015_005 HIS+1A0015_006 LEU01A0017_001 ASP01A0018_001 ASP01A0018_002 ASP02A0018_003 ASP02A0018_004 ASP-1A0018_005 ASN01A0019_001 TYR01A0020_001 TYR01A0020_002 TYR-1A0020_003 ARG01A0021_001 ARG02A0021_002 ARG03A0021_003 ARG+1A0021_004 TYR01A0023_001 TYR-1A0023_002 SER01A0024_001 SER01A0024_002 SER01A0024_003 LEU01A0025_001 ASN01A0027_001 ASN01A0027_002 TRP01A0028_001 VAL01A0029_001 CYD01A0030_001 ALA01A0031_001 ALA01A0032_001 LYS01A0033_001 LYS+1A0033_002 PHE01A0034_001 GLU01A0035_001 GLU01A0035_002 GLU02A0035_003 GLU02A0035_004 GLU-1A0035_005 SER01A0036_001 ASN01A0037_001 ASN01A0037_002 PHE01A0038_001 ASN01A0039_001 ASN01A0039_002 THR01A0040_001 THR01A0040_002 GLN01A0041_001 GLN01A0041_002 ALA01A0042_001 THR01A0043_001 THR01A0043_002 ASN01A0044_001 ASN01A0044_002 ARG01A0045_001 ARG02A0045_002 ARG03A0045_003 ARG+1A0045_004 ASN01A0046_001 ASN01A0046_002 ASN01A0046_003 ASN01A0046_004 THR01A0047_001 ASP01A0048_001 ASP01A0048_002 ASP01A0048_003 ASP01A0048_004 ASP02A0048_005 ASP02A0048_006 ASP02A0048_007 ASP02A0048_008 ASP-1A0048_009 ASP-1A0048_010 SER01A0050_001 SER01A0050_002 SER01A0050_003 THR01A0051_001 THR01A0051_002 ASP01A0052_001 ASP01A0052_002 ASP01A0052_003 ASP01A0052_004 ASP02A0052_005 ASP02A0052_006 ASP02A0052_007 ASP02A0052_008 ASP-1A0052_009 ASP-1A0052_010 TYR01A0053_001 TYR01A0053_002 TYR-1A0053_003 ILE01A0055_001 LEU01A0056_001 GLN01A0057_001 GLN01A0057_002 ILE01A0058_001 ASN01A0059_001 ASN01A0059_002 ASN01A0059_003 ASN01A0059_004 SER01A0060_001 SER01A0060_002 SER01A0060_003 SER01A0060_004 SER01A0060_005 ARG01A0061_001 ARG02A0061_002 ARG03A0061_003 ARG03A0061_004 ARG+1A0061_005 TRP01A0062_001 TRP01A0063_001 CYD01A0064_001 ASN01A0065_001 ASN01A0065_002 ASP01A0066_001 ASP01A0066_002 ASP01A0066_003 ASP01A0066_004 ASP02A0066_005 ASP02A0066_006 ASP02A0066_007 ASP02A0066_008 ASP-1A0066_009 ASP-1A0066_010 ARG01A0068_001 ARG02A0068_002 ARG03A0068_003 ARG+1A0068_004 THR01A0069_001 THR01A0069_002 THR01A0069_003 PRO01A0070_001 SER01A0072_001 ARG01A0073_001 ARG02A0073_002 ARG03A0073_003 ARG+1A0073_004 ASN01A0074_001 ASN01A0074_002 LEU01A0075_001 CYD01A0076_001 ASN01A0077_001 ILE01A0078_001 PRO01A0079_001 CYD01A0080_001 SER01A0081_001 ALA01A0082_001 LEU01A0083_001 LEU01A0084_001 SER01A0085_001 SER01A0085_002 SER01A0086_001 SER01A0086_002 ASP01A0087_001 ASP01A0087_002 ASP02A0087_003 ASP02A0087_004 ASP-1A0087_005 ILE01A0088_001 THR01A0089_001 THR01A0089_002 THR01A0089_003 ALA01A0090_001 SER01A0091_001 SER01A0091_002 VAL01A0092_001 ASN01A0093_001 ASN01A0093_002 CYD01A0094_001 ALA01A0095_001 LYS01A0096_001 LYS+1A0096_002 LYS01A0097_001 LYS+1A0097_002 ILE01A0098_001 VAL01A0099_001 SER01A0100_001 SER01A0100_002 SER01A0100_003 ASP01A0101_001 ASP01A0101_002 ASP02A0101_003 ASP02A0101_004 ASP-1A0101_005 ASN01A0103_001 ASN01A0103_002 MET01A0105_001 ASN01A0106_001 ASN01A0106_002 ALA01A0107_001 TRP01A0108_001 VAL01A0109_001 ALA01A0110_001 TRP01A0111_001 ARG01A0112_001 ARG02A0112_002 ARG03A0112_003 ARG03A0112_004 ARG+1A0112_005 ASN01A0113_001 ASN01A0113_002 ARG01A0114_001 ARG02A0114_002 ARG03A0114_003 ARG+1A0114_004 CYD01A0115_001 LYS01A0116_001 LYS+1A0116_002 THR01A0118_001 THR01A0118_002 ASP01A0119_001 ASP01A0119_002 ASP02A0119_003 ASP02A0119_004 ASP-1A0119_005 VAL01A0120_001 GLN01A0121_001 GLN01A0121_002 ALA01A0122_001 TRP01A0123_001 ILE01A0124_001 ARG01A0125_001 ARG02A0125_002 ARG03A0125_003 ARG03A0125_004 ARG+1A0125_005 CYD01A0127_001 ARG01A0128_001 ARG02A0128_002 ARG03A0128_003 ARG+1A0128_004 LEU01A0129_001 CTR01A0129_001 CTR01A0129_002 CTR02A0129_003 CTR02A0129_004 CTR-1A0129_005 You can Group conformers by the conformer IDs. IDs are in a list, and each ID is considered as a match as long as it is a substring of the conformer name. The selected microstates that contain all conformers in the ID list will be returned in the first group, and the rest are in the second group. # Let's select charged GLU35 glu35_charged , _ = msa . groupms_byconfid ( microstates , [ \"GLU-1A0035\" ]) print ( len ( glu35_charged )) 28695 # find charged ASP48 from the above selected conformers glu35_asp48_charged , _ = msa . groupms_byconfid ( glu35_charged , [ \"ASP-1A0048\" ]) print ( len ( glu35_asp48_charged )) 28379 # Or we can do it in one command glu35_asp48_charged2 , _ = msa . groupms_byconfid ( microstates , [ \"GLU-1A0035\" , \"ASP-1A0048\" ]) print ( len ( glu35_asp48_charged2 )) 28379","title":"Use MS Analysis Library"},{"location":"ms_analysis/#how-to-use-microstate-analysis-library","text":"Page last updated on: 2020-11-19","title":"How to use Microstate Analysis Library?"},{"location":"ms_analysis/#what-is-microstate-analysis-library","text":"Monte Carlo sampling in MCCE evaluates protein residue side chains' choice of being at different positions and charge states. This process typically takes thousands of millions of steps and contains of a wealth of information such as: What microstates charge states are most likely at different energy level? What microstates are at the lowest energy of the sampling energy landscape? Do other residues respond to certain changes of a specific residue? Microstate Analysis Library is a tool set to replay Monte Carlo sampling and reveal the above information. If you installed MCCE with conda/miniconda, Microstate Analysis Library is already included in the site-package path and it can be imported directly. If you installed MCCE from the source, Microstate Analysis Library is named as ms_analysis.py in bin directory. You need to copy this program to the same directory of your scripts or Jupyter Notebook to properly import it.","title":"What is Microstate Analysis Library?"},{"location":"ms_analysis/#get-basic-monte-carlo-sampling-information","text":"Prerequisite: You need to enable microstate recording in MCCE step 4 to have microstates saved. step4.py --ms You will have a ms_out directory and microstate files like pH0eH0ms.txt pH10eH0ms.txt pH11eH0ms.txt pH12eH0ms.txt ... under this directory. Import the library import ms_analysis as msa","title":"Get basic Monte Carlo sampling information"},{"location":"ms_analysis/#show-basic-information-of-a-mc-titration","text":"Monte Carlo sapling steps are saved in files, one file at one totration condition. When we load the information back, one object is needed for one totration condition. mc = msa . MSout ( \"ms_out/pH4eH0ms.txt\" ) print ( \"Monte Carlo T = %.3f \" % mc . T ) print ( \"Monte Carlo pH = %.3f \" % mc . pH ) print ( \"Monte Carlo Eh = %.3f \" % mc . Eh ) print ( \"Number of MC counts = %d \" % mc . N_ms ) print ( \"Number of microstates = %d \" % mc . N_uniq ) print ( \"The lowest E = %.3f \" % mc . lowest_E ) print ( \"The average E = %.3f \" % mc . average_E ) print ( \"The hishest E = %.3f \" % mc . highest_E ) Monte Carlo T = 298.150 Monte Carlo pH = 4.000 Monte Carlo Eh = 0.000 Number of MC counts = 1500000 Number of microstates = 266328 The lowest E = -226.198 The average E = -221.267 The hishest E = -206.544","title":"Show basic information of a MC titration"},{"location":"ms_analysis/#access-conformer-and-residue-information","text":"Conformers are not tied to Monte Carlo sampling, so it is a separate object in Microstate Analysis Library. Conformers have index of conformers, conformer ID, index of residues (not initialized), residue ID, occupancy (not initialized), and charge. print ( \"iconf ires confid resid occ crg\" ) for conf in msa . conformers : print ( \" %5d %4d %s %s %5.3f %6.3f \" % ( conf . iconf , conf . ires , conf . confid , conf . resid , conf . occ , conf . crg )) iconf ires confid resid occ crg 0 0 NTR01A0001_001 NTRA0001_ 0.000 0.000 1 0 NTR+1A0001_002 NTRA0001_ 0.000 1.000 2 0 LYS01A0001_001 LYSA0001_ 0.000 0.000 3 0 LYS+1A0001_002 LYSA0001_ 0.000 1.000 4 0 VAL01A0002_001 VALA0002_ 0.000 0.000 5 0 PHE01A0003_001 PHEA0003_ 0.000 0.000 6 0 ARG01A0005_001 ARGA0005_ 0.000 0.000 7 0 ARG02A0005_002 ARGA0005_ 0.000 0.000 8 0 ARG02A0005_003 ARGA0005_ 0.000 0.000 9 0 ARG03A0005_004 ARGA0005_ 0.000 0.000 10 0 ARG+1A0005_005 ARGA0005_ 0.000 1.000 11 0 CYD01A0006_001 CYDA0006_ 0.000 0.000 12 0 GLU01A0007_001 GLUA0007_ 0.000 0.000 13 0 GLU01A0007_002 GLUA0007_ 0.000 0.000 14 0 GLU02A0007_003 GLUA0007_ 0.000 0.000 15 0 GLU02A0007_004 GLUA0007_ 0.000 0.000 16 0 GLU-1A0007_005 GLUA0007_ 0.000 -1.000 17 0 LEU01A0008_001 LEUA0008_ 0.000 0.000 18 0 ALA01A0009_001 ALAA0009_ 0.000 0.000 19 0 ALA01A0010_001 ALAA0010_ 0.000 0.000 20 0 ALA01A0011_001 ALAA0011_ 0.000 0.000 21 0 MET01A0012_001 META0012_ 0.000 0.000 22 0 LYS01A0013_001 LYSA0013_ 0.000 0.000 23 0 LYS+1A0013_002 LYSA0013_ 0.000 1.000 24 0 ARG01A0014_001 ARGA0014_ 0.000 0.000 25 0 ARG02A0014_002 ARGA0014_ 0.000 0.000 26 0 ARG03A0014_003 ARGA0014_ 0.000 0.000 27 0 ARG+1A0014_004 ARGA0014_ 0.000 1.000 28 0 HIS01A0015_001 HISA0015_ 0.000 0.000 29 0 HIS01A0015_002 HISA0015_ 0.000 0.000 30 0 HIS02A0015_003 HISA0015_ 0.000 0.000 31 0 HIS02A0015_004 HISA0015_ 0.000 0.000 32 0 HIS+1A0015_005 HISA0015_ 0.000 1.000 33 0 HIS+1A0015_006 HISA0015_ 0.000 1.000 34 0 LEU01A0017_001 LEUA0017_ 0.000 0.000 35 0 ASP01A0018_001 ASPA0018_ 0.000 0.000 36 0 ASP01A0018_002 ASPA0018_ 0.000 0.000 37 0 ASP02A0018_003 ASPA0018_ 0.000 0.000 38 0 ASP02A0018_004 ASPA0018_ 0.000 0.000 39 0 ASP-1A0018_005 ASPA0018_ 0.000 -1.000 40 0 ASN01A0019_001 ASNA0019_ 0.000 0.000 41 0 TYR01A0020_001 TYRA0020_ 0.000 0.000 42 0 TYR01A0020_002 TYRA0020_ 0.000 0.000 43 0 TYR-1A0020_003 TYRA0020_ 0.000 -1.000 44 0 ARG01A0021_001 ARGA0021_ 0.000 0.000 45 0 ARG02A0021_002 ARGA0021_ 0.000 0.000 46 0 ARG03A0021_003 ARGA0021_ 0.000 0.000 47 0 ARG+1A0021_004 ARGA0021_ 0.000 1.000 48 0 TYR01A0023_001 TYRA0023_ 0.000 0.000 49 0 TYR-1A0023_002 TYRA0023_ 0.000 -1.000 50 0 SER01A0024_001 SERA0024_ 0.000 0.000 51 0 SER01A0024_002 SERA0024_ 0.000 0.000 52 0 SER01A0024_003 SERA0024_ 0.000 0.000 53 0 LEU01A0025_001 LEUA0025_ 0.000 0.000 54 0 ASN01A0027_001 ASNA0027_ 0.000 0.000 55 0 ASN01A0027_002 ASNA0027_ 0.000 0.000 56 0 TRP01A0028_001 TRPA0028_ 0.000 0.000 57 0 VAL01A0029_001 VALA0029_ 0.000 0.000 58 0 CYD01A0030_001 CYDA0030_ 0.000 0.000 59 0 ALA01A0031_001 ALAA0031_ 0.000 0.000 60 0 ALA01A0032_001 ALAA0032_ 0.000 0.000 61 0 LYS01A0033_001 LYSA0033_ 0.000 0.000 62 0 LYS+1A0033_002 LYSA0033_ 0.000 1.000 63 0 PHE01A0034_001 PHEA0034_ 0.000 0.000 64 0 GLU01A0035_001 GLUA0035_ 0.000 0.000 65 0 GLU01A0035_002 GLUA0035_ 0.000 0.000 66 0 GLU02A0035_003 GLUA0035_ 0.000 0.000 67 0 GLU02A0035_004 GLUA0035_ 0.000 0.000 68 0 GLU-1A0035_005 GLUA0035_ 0.000 -1.000 69 0 SER01A0036_001 SERA0036_ 0.000 0.000 70 0 ASN01A0037_001 ASNA0037_ 0.000 0.000 71 0 ASN01A0037_002 ASNA0037_ 0.000 0.000 72 0 PHE01A0038_001 PHEA0038_ 0.000 0.000 73 0 ASN01A0039_001 ASNA0039_ 0.000 0.000 74 0 ASN01A0039_002 ASNA0039_ 0.000 0.000 75 0 THR01A0040_001 THRA0040_ 0.000 0.000 76 0 THR01A0040_002 THRA0040_ 0.000 0.000 77 0 GLN01A0041_001 GLNA0041_ 0.000 0.000 78 0 GLN01A0041_002 GLNA0041_ 0.000 0.000 79 0 ALA01A0042_001 ALAA0042_ 0.000 0.000 80 0 THR01A0043_001 THRA0043_ 0.000 0.000 81 0 THR01A0043_002 THRA0043_ 0.000 0.000 82 0 ASN01A0044_001 ASNA0044_ 0.000 0.000 83 0 ASN01A0044_002 ASNA0044_ 0.000 0.000 84 0 ARG01A0045_001 ARGA0045_ 0.000 0.000 85 0 ARG02A0045_002 ARGA0045_ 0.000 0.000 86 0 ARG03A0045_003 ARGA0045_ 0.000 0.000 87 0 ARG+1A0045_004 ARGA0045_ 0.000 1.000 88 0 ASN01A0046_001 ASNA0046_ 0.000 0.000 89 0 ASN01A0046_002 ASNA0046_ 0.000 0.000 90 0 ASN01A0046_003 ASNA0046_ 0.000 0.000 91 0 ASN01A0046_004 ASNA0046_ 0.000 0.000 92 0 THR01A0047_001 THRA0047_ 0.000 0.000 93 0 ASP01A0048_001 ASPA0048_ 0.000 0.000 94 0 ASP01A0048_002 ASPA0048_ 0.000 0.000 95 0 ASP01A0048_003 ASPA0048_ 0.000 0.000 96 0 ASP01A0048_004 ASPA0048_ 0.000 0.000 97 0 ASP02A0048_005 ASPA0048_ 0.000 0.000 98 0 ASP02A0048_006 ASPA0048_ 0.000 0.000 99 0 ASP02A0048_007 ASPA0048_ 0.000 0.000 100 0 ASP02A0048_008 ASPA0048_ 0.000 0.000 101 0 ASP-1A0048_009 ASPA0048_ 0.000 -1.000 102 0 ASP-1A0048_010 ASPA0048_ 0.000 -1.000 103 0 SER01A0050_001 SERA0050_ 0.000 0.000 104 0 SER01A0050_002 SERA0050_ 0.000 0.000 105 0 SER01A0050_003 SERA0050_ 0.000 0.000 106 0 THR01A0051_001 THRA0051_ 0.000 0.000 107 0 THR01A0051_002 THRA0051_ 0.000 0.000 108 0 ASP01A0052_001 ASPA0052_ 0.000 0.000 109 0 ASP01A0052_002 ASPA0052_ 0.000 0.000 110 0 ASP01A0052_003 ASPA0052_ 0.000 0.000 111 0 ASP01A0052_004 ASPA0052_ 0.000 0.000 112 0 ASP02A0052_005 ASPA0052_ 0.000 0.000 113 0 ASP02A0052_006 ASPA0052_ 0.000 0.000 114 0 ASP02A0052_007 ASPA0052_ 0.000 0.000 115 0 ASP02A0052_008 ASPA0052_ 0.000 0.000 116 0 ASP-1A0052_009 ASPA0052_ 0.000 -1.000 117 0 ASP-1A0052_010 ASPA0052_ 0.000 -1.000 118 0 TYR01A0053_001 TYRA0053_ 0.000 0.000 119 0 TYR01A0053_002 TYRA0053_ 0.000 0.000 120 0 TYR-1A0053_003 TYRA0053_ 0.000 -1.000 121 0 ILE01A0055_001 ILEA0055_ 0.000 0.000 122 0 LEU01A0056_001 LEUA0056_ 0.000 0.000 123 0 GLN01A0057_001 GLNA0057_ 0.000 0.000 124 0 GLN01A0057_002 GLNA0057_ 0.000 0.000 125 0 ILE01A0058_001 ILEA0058_ 0.000 0.000 126 0 ASN01A0059_001 ASNA0059_ 0.000 0.000 127 0 ASN01A0059_002 ASNA0059_ 0.000 0.000 128 0 ASN01A0059_003 ASNA0059_ 0.000 0.000 129 0 ASN01A0059_004 ASNA0059_ 0.000 0.000 130 0 SER01A0060_001 SERA0060_ 0.000 0.000 131 0 SER01A0060_002 SERA0060_ 0.000 0.000 132 0 SER01A0060_003 SERA0060_ 0.000 0.000 133 0 SER01A0060_004 SERA0060_ 0.000 0.000 134 0 SER01A0060_005 SERA0060_ 0.000 0.000 135 0 ARG01A0061_001 ARGA0061_ 0.000 0.000 136 0 ARG02A0061_002 ARGA0061_ 0.000 0.000 137 0 ARG03A0061_003 ARGA0061_ 0.000 0.000 138 0 ARG03A0061_004 ARGA0061_ 0.000 0.000 139 0 ARG+1A0061_005 ARGA0061_ 0.000 1.000 140 0 TRP01A0062_001 TRPA0062_ 0.000 0.000 141 0 TRP01A0063_001 TRPA0063_ 0.000 0.000 142 0 CYD01A0064_001 CYDA0064_ 0.000 0.000 143 0 ASN01A0065_001 ASNA0065_ 0.000 0.000 144 0 ASN01A0065_002 ASNA0065_ 0.000 0.000 145 0 ASP01A0066_001 ASPA0066_ 0.000 0.000 146 0 ASP01A0066_002 ASPA0066_ 0.000 0.000 147 0 ASP01A0066_003 ASPA0066_ 0.000 0.000 148 0 ASP01A0066_004 ASPA0066_ 0.000 0.000 149 0 ASP02A0066_005 ASPA0066_ 0.000 0.000 150 0 ASP02A0066_006 ASPA0066_ 0.000 0.000 151 0 ASP02A0066_007 ASPA0066_ 0.000 0.000 152 0 ASP02A0066_008 ASPA0066_ 0.000 0.000 153 0 ASP-1A0066_009 ASPA0066_ 0.000 -1.000 154 0 ASP-1A0066_010 ASPA0066_ 0.000 -1.000 155 0 ARG01A0068_001 ARGA0068_ 0.000 0.000 156 0 ARG02A0068_002 ARGA0068_ 0.000 0.000 157 0 ARG03A0068_003 ARGA0068_ 0.000 0.000 158 0 ARG+1A0068_004 ARGA0068_ 0.000 1.000 159 0 THR01A0069_001 THRA0069_ 0.000 0.000 160 0 THR01A0069_002 THRA0069_ 0.000 0.000 161 0 THR01A0069_003 THRA0069_ 0.000 0.000 162 0 PRO01A0070_001 PROA0070_ 0.000 0.000 163 0 SER01A0072_001 SERA0072_ 0.000 0.000 164 0 ARG01A0073_001 ARGA0073_ 0.000 0.000 165 0 ARG02A0073_002 ARGA0073_ 0.000 0.000 166 0 ARG03A0073_003 ARGA0073_ 0.000 0.000 167 0 ARG+1A0073_004 ARGA0073_ 0.000 1.000 168 0 ASN01A0074_001 ASNA0074_ 0.000 0.000 169 0 ASN01A0074_002 ASNA0074_ 0.000 0.000 170 0 LEU01A0075_001 LEUA0075_ 0.000 0.000 171 0 CYD01A0076_001 CYDA0076_ 0.000 0.000 172 0 ASN01A0077_001 ASNA0077_ 0.000 0.000 173 0 ILE01A0078_001 ILEA0078_ 0.000 0.000 174 0 PRO01A0079_001 PROA0079_ 0.000 0.000 175 0 CYD01A0080_001 CYDA0080_ 0.000 0.000 176 0 SER01A0081_001 SERA0081_ 0.000 0.000 177 0 ALA01A0082_001 ALAA0082_ 0.000 0.000 178 0 LEU01A0083_001 LEUA0083_ 0.000 0.000 179 0 LEU01A0084_001 LEUA0084_ 0.000 0.000 180 0 SER01A0085_001 SERA0085_ 0.000 0.000 181 0 SER01A0085_002 SERA0085_ 0.000 0.000 182 0 SER01A0086_001 SERA0086_ 0.000 0.000 183 0 SER01A0086_002 SERA0086_ 0.000 0.000 184 0 ASP01A0087_001 ASPA0087_ 0.000 0.000 185 0 ASP01A0087_002 ASPA0087_ 0.000 0.000 186 0 ASP02A0087_003 ASPA0087_ 0.000 0.000 187 0 ASP02A0087_004 ASPA0087_ 0.000 0.000 188 0 ASP-1A0087_005 ASPA0087_ 0.000 -1.000 189 0 ILE01A0088_001 ILEA0088_ 0.000 0.000 190 0 THR01A0089_001 THRA0089_ 0.000 0.000 191 0 THR01A0089_002 THRA0089_ 0.000 0.000 192 0 THR01A0089_003 THRA0089_ 0.000 0.000 193 0 ALA01A0090_001 ALAA0090_ 0.000 0.000 194 0 SER01A0091_001 SERA0091_ 0.000 0.000 195 0 SER01A0091_002 SERA0091_ 0.000 0.000 196 0 VAL01A0092_001 VALA0092_ 0.000 0.000 197 0 ASN01A0093_001 ASNA0093_ 0.000 0.000 198 0 ASN01A0093_002 ASNA0093_ 0.000 0.000 199 0 CYD01A0094_001 CYDA0094_ 0.000 0.000 200 0 ALA01A0095_001 ALAA0095_ 0.000 0.000 201 0 LYS01A0096_001 LYSA0096_ 0.000 0.000 202 0 LYS+1A0096_002 LYSA0096_ 0.000 1.000 203 0 LYS01A0097_001 LYSA0097_ 0.000 0.000 204 0 LYS+1A0097_002 LYSA0097_ 0.000 1.000 205 0 ILE01A0098_001 ILEA0098_ 0.000 0.000 206 0 VAL01A0099_001 VALA0099_ 0.000 0.000 207 0 SER01A0100_001 SERA0100_ 0.000 0.000 208 0 SER01A0100_002 SERA0100_ 0.000 0.000 209 0 SER01A0100_003 SERA0100_ 0.000 0.000 210 0 ASP01A0101_001 ASPA0101_ 0.000 0.000 211 0 ASP01A0101_002 ASPA0101_ 0.000 0.000 212 0 ASP02A0101_003 ASPA0101_ 0.000 0.000 213 0 ASP02A0101_004 ASPA0101_ 0.000 0.000 214 0 ASP-1A0101_005 ASPA0101_ 0.000 -1.000 215 0 ASN01A0103_001 ASNA0103_ 0.000 0.000 216 0 ASN01A0103_002 ASNA0103_ 0.000 0.000 217 0 MET01A0105_001 META0105_ 0.000 0.000 218 0 ASN01A0106_001 ASNA0106_ 0.000 0.000 219 0 ASN01A0106_002 ASNA0106_ 0.000 0.000 220 0 ALA01A0107_001 ALAA0107_ 0.000 0.000 221 0 TRP01A0108_001 TRPA0108_ 0.000 0.000 222 0 VAL01A0109_001 VALA0109_ 0.000 0.000 223 0 ALA01A0110_001 ALAA0110_ 0.000 0.000 224 0 TRP01A0111_001 TRPA0111_ 0.000 0.000 225 0 ARG01A0112_001 ARGA0112_ 0.000 0.000 226 0 ARG02A0112_002 ARGA0112_ 0.000 0.000 227 0 ARG03A0112_003 ARGA0112_ 0.000 0.000 228 0 ARG03A0112_004 ARGA0112_ 0.000 0.000 229 0 ARG+1A0112_005 ARGA0112_ 0.000 1.000 230 0 ASN01A0113_001 ASNA0113_ 0.000 0.000 231 0 ASN01A0113_002 ASNA0113_ 0.000 0.000 232 0 ARG01A0114_001 ARGA0114_ 0.000 0.000 233 0 ARG02A0114_002 ARGA0114_ 0.000 0.000 234 0 ARG03A0114_003 ARGA0114_ 0.000 0.000 235 0 ARG+1A0114_004 ARGA0114_ 0.000 1.000 236 0 CYD01A0115_001 CYDA0115_ 0.000 0.000 237 0 LYS01A0116_001 LYSA0116_ 0.000 0.000 238 0 LYS+1A0116_002 LYSA0116_ 0.000 1.000 239 0 THR01A0118_001 THRA0118_ 0.000 0.000 240 0 THR01A0118_002 THRA0118_ 0.000 0.000 241 0 ASP01A0119_001 ASPA0119_ 0.000 0.000 242 0 ASP01A0119_002 ASPA0119_ 0.000 0.000 243 0 ASP02A0119_003 ASPA0119_ 0.000 0.000 244 0 ASP02A0119_004 ASPA0119_ 0.000 0.000 245 0 ASP-1A0119_005 ASPA0119_ 0.000 -1.000 246 0 VAL01A0120_001 VALA0120_ 0.000 0.000 247 0 GLN01A0121_001 GLNA0121_ 0.000 0.000 248 0 GLN01A0121_002 GLNA0121_ 0.000 0.000 249 0 ALA01A0122_001 ALAA0122_ 0.000 0.000 250 0 TRP01A0123_001 TRPA0123_ 0.000 0.000 251 0 ILE01A0124_001 ILEA0124_ 0.000 0.000 252 0 ARG01A0125_001 ARGA0125_ 0.000 0.000 253 0 ARG02A0125_002 ARGA0125_ 0.000 0.000 254 0 ARG03A0125_003 ARGA0125_ 0.000 0.000 255 0 ARG03A0125_004 ARGA0125_ 0.000 0.000 256 0 ARG+1A0125_005 ARGA0125_ 0.000 1.000 257 0 CYD01A0127_001 CYDA0127_ 0.000 0.000 258 0 ARG01A0128_001 ARGA0128_ 0.000 0.000 259 0 ARG02A0128_002 ARGA0128_ 0.000 0.000 260 0 ARG03A0128_003 ARGA0128_ 0.000 0.000 261 0 ARG+1A0128_004 ARGA0128_ 0.000 1.000 262 0 LEU01A0129_001 LEUA0129_ 0.000 0.000 263 0 CTR01A0129_001 CTRA0129_ 0.000 0.000 264 0 CTR01A0129_002 CTRA0129_ 0.000 0.000 265 0 CTR02A0129_003 CTRA0129_ 0.000 0.000 266 0 CTR02A0129_004 CTRA0129_ 0.000 0.000 267 0 CTR-1A0129_005 CTRA0129_ 0.000 -1.000 Residue information is put in Monte Carlo sampling. The reason is Monte Carlo sampling sets fixed conformers/residues aside, and only samples free residues and free conformers. In the Monte Carlo sampling output we have what conformers are fixed and what the free residues are composed. # fixed conformer indecies print ( mc . fixed_iconfs ) [3, 4, 5, 10, 11, 17, 18, 19, 20, 21, 23, 27, 34, 40, 47, 48, 53, 56, 57, 58, 59, 60, 62, 63, 69, 72, 73, 79, 87, 92, 103, 121, 122, 125, 139, 140, 141, 142, 158, 162, 163, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 189, 193, 196, 199, 200, 202, 204, 205, 206, 217, 220, 221, 222, 223, 224, 229, 235, 236, 238, 246, 249, 250, 251, 256, 257, 261, 262] # free residues expressed as index of conformers. It is a list of residues, and each residue has a list of conformers it can choose from. for res in mc . free_residues : print ( res ) [0, 1] [13, 14, 15, 16] [29, 30, 32, 33] [36, 37, 38, 39] [41, 42] [50, 51, 52] [54, 55] [64, 65, 67, 68] [70, 71] [75, 76] [77, 78] [80, 81] [82, 83] [88, 89, 90, 91] [94, 97, 101, 102] [106, 107] [108, 109, 110, 111, 112, 113, 114, 115, 116, 117] [118, 119] [123, 124] [126, 127, 128, 129] [131, 132, 133, 134] [143, 144] [149, 153, 154] [159, 160, 161] [180, 181] [182, 183] [186, 188] [190, 191, 192] [194, 195] [197, 198] [207, 208, 209] [210, 211, 212, 213, 214] [215, 216] [218, 219] [230, 231] [239, 240] [241, 242, 243, 244, 245] [247, 248] [263, 264, 265, 266, 267] To get a residue ID for free residues,we need to use conformer information because residue ID is in conformer record. for res in mc . free_residues : print ( msa . conformers [ res [ 0 ]] . resid ) # use resid from the first conformer in that residue NTRA0001_ GLUA0007_ HISA0015_ ASPA0018_ TYRA0020_ SERA0024_ ASNA0027_ GLUA0035_ ASNA0037_ THRA0040_ GLNA0041_ THRA0043_ ASNA0044_ ASNA0046_ ASPA0048_ THRA0051_ ASPA0052_ TYRA0053_ GLNA0057_ ASNA0059_ SERA0060_ ASNA0065_ ASPA0066_ THRA0069_ SERA0085_ SERA0086_ ASPA0087_ THRA0089_ SERA0091_ ASNA0093_ SERA0100_ ASPA0101_ ASNA0103_ ASNA0106_ ASNA0113_ THRA0118_ ASPA0119_ GLNA0121_ CTRA0129_","title":"Access Conformer and Residue information"},{"location":"ms_analysis/#access-microstates","text":"Each microstate is stored as data structure: class Microstate: def __init__(self, state, E, count): self.state = state self.E = E self.count = count In which state is an array of conformer indecies. E is the state energy, count is the number of times this microstate is chosen. Microstates are stored as a dictionary with the string value of state as the key, and Microstate as the value. One can get the list of microstates by microstates = list ( mc . microstates . values ()) # print first 10 entries for ms in microstates [: 10 ]: print ( ms . state , ms . E , ms . count ) [1, 15, 32, 39, 41, 51, 54, 65, 70, 76, 78, 80, 83, 88, 101, 106, 116, 119, 123, 126, 132, 143, 153, 160, 181, 183, 188, 192, 195, 197, 208, 210, 215, 219, 231, 239, 243, 247, 267] -220.605118 11 [1, 15, 32, 39, 41, 51, 54, 65, 70, 76, 78, 80, 83, 88, 101, 107, 116, 119, 123, 126, 132, 143, 153, 160, 181, 183, 188, 192, 195, 197, 208, 210, 215, 219, 231, 239, 243, 247, 267] -220.287003 3 [1, 15, 32, 39, 41, 51, 54, 65, 70, 76, 78, 80, 83, 88, 101, 107, 116, 119, 123, 126, 132, 143, 153, 160, 181, 183, 188, 192, 195, 197, 208, 210, 215, 219, 231, 239, 243, 248, 267] -220.543747 1 [1, 15, 32, 39, 41, 51, 54, 65, 70, 76, 78, 80, 83, 88, 101, 107, 116, 119, 123, 126, 132, 144, 153, 160, 181, 183, 188, 192, 195, 197, 208, 210, 215, 219, 231, 239, 243, 248, 267] -219.397995 1 [1, 15, 32, 39, 41, 51, 54, 65, 70, 76, 78, 80, 83, 88, 101, 107, 116, 119, 123, 126, 132, 144, 153, 160, 181, 182, 188, 192, 195, 197, 208, 210, 215, 219, 231, 239, 243, 248, 267] -217.926498 1 [1, 15, 32, 39, 41, 51, 54, 65, 70, 76, 78, 80, 83, 88, 101, 107, 116, 119, 123, 126, 132, 143, 153, 160, 181, 182, 188, 192, 195, 197, 208, 210, 215, 219, 231, 239, 243, 248, 267] -219.07225 4 [1, 15, 32, 39, 41, 51, 54, 65, 70, 76, 78, 80, 83, 88, 101, 107, 116, 119, 123, 126, 134, 143, 153, 160, 181, 182, 188, 192, 195, 197, 208, 210, 215, 219, 231, 239, 243, 248, 267] -218.826874 4 [1, 15, 32, 39, 41, 51, 54, 65, 70, 76, 78, 80, 83, 91, 101, 107, 116, 119, 123, 126, 134, 143, 153, 160, 181, 182, 188, 192, 195, 197, 208, 210, 215, 219, 231, 239, 243, 248, 267] -218.07251 2 [1, 15, 32, 39, 41, 51, 54, 65, 70, 76, 78, 80, 83, 91, 101, 107, 116, 119, 123, 126, 134, 143, 153, 160, 181, 183, 188, 192, 195, 197, 208, 210, 215, 219, 231, 239, 243, 248, 267] -219.544006 7 [1, 16, 32, 39, 41, 51, 54, 65, 70, 76, 78, 80, 83, 91, 101, 107, 116, 119, 123, 126, 134, 143, 153, 160, 181, 183, 188, 192, 195, 197, 208, 210, 215, 219, 231, 239, 243, 248, 267] -221.183884 2","title":"Access microstates"},{"location":"ms_analysis/#calculate-residue-charges-for-a-group-of-conformers","text":"free_res_crg = msa . ms_convert2sumcrg ( microstates , mc . free_residues ) for ir in range ( len ( mc . free_residues )): resname = msa . conformers [ mc . free_residues [ ir ][ 0 ]] . resid # use resid from the first conformer in that residue print ( \" %s %6.3f \" % ( resname , free_res_crg [ ir ])) NTRA0001_ 0.992 GLUA0007_ -0.733 HISA0015_ 0.995 ASPA0018_ -0.962 TYRA0020_ 0.000 SERA0024_ 0.000 ASNA0027_ 0.000 GLUA0035_ -0.090 ASNA0037_ 0.000 THRA0040_ 0.000 GLNA0041_ 0.000 THRA0043_ 0.000 ASNA0044_ 0.000 ASNA0046_ 0.000 ASPA0048_ -0.991 THRA0051_ 0.000 ASPA0052_ -0.698 TYRA0053_ 0.000 GLNA0057_ 0.000 ASNA0059_ 0.000 SERA0060_ 0.000 ASNA0065_ 0.000 ASPA0066_ -0.987 THRA0069_ 0.000 SERA0085_ 0.000 SERA0086_ 0.000 ASPA0087_ -0.977 THRA0089_ 0.000 SERA0091_ 0.000 ASNA0093_ 0.000 SERA0100_ 0.000 ASPA0101_ -0.219 ASNA0103_ 0.000 ASNA0106_ 0.000 ASNA0113_ 0.000 THRA0118_ 0.000 ASPA0119_ -0.670 GLNA0121_ 0.000 CTRA0129_ -0.888","title":"Calculate residue charges for a group of conformers"},{"location":"ms_analysis/#group-microstates-by-energy","text":"Here is an example to divide microstates into energy bands.","title":"Group microstates by energy"},{"location":"ms_analysis/#unique-microstate-couns-and-total-counts-over-bands","text":"# get the energy bin size from the range of MC energy e_step = ( mc . highest_E - mc . lowest_E ) / 20 ticks = [ mc . lowest_E + e_step * ( i ) for i in range ( 20 )] ms_in_bands = msa . groupms_byenergy ( mc . microstates . values (), ticks ) uniqms_in_bands = [ len ( band ) for band in ms_in_bands ] print ( uniqms_in_bands ) [234, 3387, 18352, 38339, 48204, 46960, 38989, 28568, 18870, 11624, 6654, 3420, 1617, 674, 243, 104, 55, 21, 11, 2] # Now compute the counts instead of unique microstates counts_in_bands = [ sum ([ ms . count for ms in band ]) for band in ms_in_bands ] print ( counts_in_bands ) [31231, 96883, 181201, 240564, 254871, 227699, 176626, 122414, 77258, 45436, 24604, 12170, 5324, 2336, 743, 388, 165, 60, 23, 4] # plot them import matplotlib.pyplot as plt fig = plt . figure ( figsize = ( 18 , 6 )) ax1 = fig . add_subplot ( 121 ) ax1 . title . set_text ( 'Unique microstates' ) # charge over energy bands ax1 . bar ([ i for i in range ( 20 )], uniqms_in_bands ) ax2 = fig . add_subplot ( 122 ) ax2 . title . set_text ( 'Total counts' ) ax2 . bar ([ i for i in range ( 20 )], counts_in_bands ) plt . show ()","title":"Unique microstate couns and total counts over bands"},{"location":"ms_analysis/#charge-over-energy-bands","text":"crg_in_bands = [] for band in ms_in_bands : band_total_crg = 0.0 for ms in band : band_total_crg += msa . ms_charge ( ms ) * ms . count crg_in_bands . append ( band_total_crg / msa . ms_counts ( band )) print ( crg_in_bands ) [-6.129454708462745, -5.798344394785463, -5.6241852969906345, -5.446471625014549, -5.284802900290735, -5.118779616950448, -4.983683036472547, -4.845483359746434, -4.724416888865878, -4.590610969275464, -4.436067306129084, -4.405012325390304, -4.340721262208866, -4.333476027397261, -4.141318977119784, -4.461340206185567, -3.8424242424242423, -4.116666666666666, -3.8260869565217392, -3.0] fig = plt . figure ( figsize = ( 8 , 6 )) plt . bar ([ i for i in range ( 20 )], crg_in_bands ) plt . show ()","title":"Charge over energy bands"},{"location":"ms_analysis/#which-charge-is-the-most-populated","text":"counts_vs_charge = {} for ms in mc . microstates . values (): charge = int ( msa . ms_charge ( ms )) if charge in counts_vs_charge : counts_vs_charge [ charge ] += ms . count else : counts_vs_charge [ charge ] = ms . count charges = list ( counts_vs_charge . keys ()) charges . sort () counts_population = [ counts_vs_charge [ i ] for i in charges ] fig = plt . figure ( figsize = ( 8 , 6 )) plt . bar ( charges , counts_population ) plt . show ()","title":"Which charge is the most populated"},{"location":"ms_analysis/#group-microstate-by-conformer-selection-and-show-what-changed","text":"! grep A0035 head3 . lst 00065 GLU01A0035_001 f 0.00 0.000 0 0.00 0 0 2.062 -6.408 3.293 -0.967 1.795 0.000 01O000M000 t 00066 GLU01A0035_002 f 0.00 0.000 0 0.00 0 0 2.062 -6.408 0.573 -1.299 1.375 0.000 01O000M000 t 00067 GLU02A0035_003 f 0.00 0.000 0 0.00 0 0 1.629 -6.500 3.293 1.389 1.854 0.000 02O000M000 t 00068 GLU02A0035_004 f 0.00 0.000 0 0.00 0 0 1.629 -6.500 0.573 -0.131 1.245 0.000 02O000M000 t 00069 GLU-1A0035_005 f 0.00 -1.000 0 4.75 0 -1 1.573 -6.495 0.573 -2.810 4.319 -0.300 -1O000M000 t ! grep A0035 fort . 38 GLU01A0035_001 0.058 0.058 0.061 0.060 0.053 0.036 0.012 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 GLU01A0035_002 0.811 0.808 0.801 0.779 0.749 0.543 0.158 0.022 0.002 0.000 0.000 0.000 0.000 0.000 0.000 GLU02A0035_003 0.000 0.001 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 GLU02A0035_004 0.132 0.133 0.135 0.138 0.107 0.080 0.024 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 GLU-1A0035_005 0.000 0.000 0.004 0.023 0.090 0.341 0.807 0.978 0.998 1.000 1.000 1.000 1.000 1.000 1.000 Group microstates by conformer index numbers. If any conformer in the list appears in the microstate, this microstate will be put in the first group, otherwise in the second group. netural , charged = msa . groupms_byiconf ( mc . microstates . values (), [ 64 , 65 , 66 , 67 ]) See what conformer has changed by calculating conformer occupancy difference. # what conformers have changed diff_occ = msa . whatchanged_conf ( netural , charged ) for key in diff_occ . keys (): print ( \" %3d , %s : %6.3f \" % ( key , msa . conformers [ key ] . confid , diff_occ [ key ])) 0, NTR01A0001_001: 0.000 1, NTR+1A0001_002: -0.000 13, GLU01A0007_002: 0.001 14, GLU02A0007_003: 0.003 15, GLU02A0007_004: -0.003 16, GLU-1A0007_005: -0.001 29, HIS01A0015_002: -0.001 30, HIS02A0015_003: -0.000 32, HIS+1A0015_005: -0.003 33, HIS+1A0015_006: 0.004 36, ASP01A0018_002: 0.003 37, ASP02A0018_003: -0.001 38, ASP02A0018_004: -0.001 39, ASP-1A0018_005: -0.001 41, TYR01A0020_001: -0.006 42, TYR01A0020_002: 0.006 50, SER01A0024_001: 0.009 51, SER01A0024_002: -0.007 52, SER01A0024_003: -0.002 54, ASN01A0027_001: -0.019 55, ASN01A0027_002: 0.019 64, GLU01A0035_001: -0.058 65, GLU01A0035_002: -0.823 67, GLU02A0035_004: -0.118 68, GLU-1A0035_005: 1.000 70, ASN01A0037_001: 0.004 71, ASN01A0037_002: -0.004 75, THR01A0040_001: 0.001 76, THR01A0040_002: -0.001 77, GLN01A0041_001: -0.003 78, GLN01A0041_002: 0.003 80, THR01A0043_001: 0.005 81, THR01A0043_002: -0.005 82, ASN01A0044_001: -0.246 83, ASN01A0044_002: 0.246 88, ASN01A0046_001: -0.205 89, ASN01A0046_002: 0.147 90, ASN01A0046_003: 0.126 91, ASN01A0046_004: -0.068 94, ASP01A0048_002: -0.000 97, ASP02A0048_005: 0.001 101, ASP-1A0048_009: -0.009 102, ASP-1A0048_010: 0.008 106, THR01A0051_001: -0.005 107, THR01A0051_002: 0.005 108, ASP01A0052_001: 0.002 109, ASP01A0052_002: -0.000 110, ASP01A0052_003: 0.020 111, ASP01A0052_004: 0.004 112, ASP02A0052_005: 0.192 113, ASP02A0052_006: 0.016 114, ASP02A0052_007: 0.126 115, ASP02A0052_008: 0.008 116, ASP-1A0052_009: -0.349 117, ASP-1A0052_010: -0.020 118, TYR01A0053_001: 0.001 119, TYR01A0053_002: -0.001 123, GLN01A0057_001: 0.004 124, GLN01A0057_002: -0.004 126, ASN01A0059_001: -0.008 127, ASN01A0059_002: 0.001 128, ASN01A0059_003: 0.007 129, ASN01A0059_004: -0.000 131, SER01A0060_002: 0.002 132, SER01A0060_003: -0.028 133, SER01A0060_004: -0.002 134, SER01A0060_005: 0.028 143, ASN01A0065_001: 0.003 144, ASN01A0065_002: -0.003 149, ASP02A0066_005: 0.001 153, ASP-1A0066_009: 0.001 154, ASP-1A0066_010: -0.002 159, THR01A0069_001: 0.002 160, THR01A0069_002: -0.006 161, THR01A0069_003: 0.004 180, SER01A0085_001: 0.004 181, SER01A0085_002: -0.004 182, SER01A0086_001: -0.001 183, SER01A0086_002: 0.001 186, ASP02A0087_003: -0.005 188, ASP-1A0087_005: 0.005 190, THR01A0089_001: -0.000 191, THR01A0089_002: 0.009 192, THR01A0089_003: -0.009 194, SER01A0091_001: 0.008 195, SER01A0091_002: -0.008 197, ASN01A0093_001: -0.004 198, ASN01A0093_002: 0.004 207, SER01A0100_001: -0.012 208, SER01A0100_002: 0.003 209, SER01A0100_003: 0.009 210, ASP01A0101_001: 0.005 211, ASP01A0101_002: 0.001 212, ASP02A0101_003: -0.003 213, ASP02A0101_004: 0.013 214, ASP-1A0101_005: -0.017 215, ASN01A0103_001: -0.002 216, ASN01A0103_002: 0.002 218, ASN01A0106_001: 0.003 219, ASN01A0106_002: -0.003 230, ASN01A0113_001: 0.056 231, ASN01A0113_002: -0.056 239, THR01A0118_001: -0.000 240, THR01A0118_002: 0.000 241, ASP01A0119_001: 0.003 242, ASP01A0119_002: 0.000 243, ASP02A0119_003: 0.019 244, ASP02A0119_004: 0.000 245, ASP-1A0119_005: -0.023 247, GLN01A0121_001: -0.003 248, GLN01A0121_002: 0.003 263, CTR01A0129_001: -0.001 264, CTR01A0129_002: -0.003 265, CTR02A0129_003: -0.003 266, CTR02A0129_004: -0.003 267, CTR-1A0129_005: 0.010 See what has changed in terms of residue's conformer population change. The residue difference is measured by Bhattachayya distance of residues' conformer populations. # What residues have changed diff_bhd = msa . whatchanged_res ( netural , charged , mc . free_residues ) resname = [] bhd = [] for ir in range ( len ( mc . free_residues )): if diff_bhd [ ir ] < 99.0 : resname . append ( msa . conformers [ mc . free_residues [ ir ][ 0 ]] . resid ) bhd . append ( diff_bhd [ ir ]) def autolabel ( rects , ax ): \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\" for rect in rects : height = rect . get_height () ax . annotate ( ' %.3f ' % height , xy = ( rect . get_x () + rect . get_width () / 2 , height ), xytext = ( 0 , 3 ), # 3 points vertical offset textcoords = \"offset points\" , ha = 'center' , va = 'bottom' ) import numpy as np x = np . arange ( len ( resname )) width = 0.2 fig , ax = plt . subplots ( figsize = ( 18 , 8 )) rects = ax . bar ( x , bhd , width ) ax . set_ylabel ( \"Residue difference measured by Bhattachayya distance\" ) autolabel ( rects , ax ) plt . xticks ( x , resname , rotation = 'vertical' ) plt . show ()","title":"Group microstate by conformer selection and show what changed"},{"location":"ms_analysis/#group-microstate-by-conformer-names-and-chained-selection","text":"confnames = [ conf . confid for conf in msa . conformers ] for confname in confnames : print ( confname ) NTR01A0001_001 NTR+1A0001_002 LYS01A0001_001 LYS+1A0001_002 VAL01A0002_001 PHE01A0003_001 ARG01A0005_001 ARG02A0005_002 ARG02A0005_003 ARG03A0005_004 ARG+1A0005_005 CYD01A0006_001 GLU01A0007_001 GLU01A0007_002 GLU02A0007_003 GLU02A0007_004 GLU-1A0007_005 LEU01A0008_001 ALA01A0009_001 ALA01A0010_001 ALA01A0011_001 MET01A0012_001 LYS01A0013_001 LYS+1A0013_002 ARG01A0014_001 ARG02A0014_002 ARG03A0014_003 ARG+1A0014_004 HIS01A0015_001 HIS01A0015_002 HIS02A0015_003 HIS02A0015_004 HIS+1A0015_005 HIS+1A0015_006 LEU01A0017_001 ASP01A0018_001 ASP01A0018_002 ASP02A0018_003 ASP02A0018_004 ASP-1A0018_005 ASN01A0019_001 TYR01A0020_001 TYR01A0020_002 TYR-1A0020_003 ARG01A0021_001 ARG02A0021_002 ARG03A0021_003 ARG+1A0021_004 TYR01A0023_001 TYR-1A0023_002 SER01A0024_001 SER01A0024_002 SER01A0024_003 LEU01A0025_001 ASN01A0027_001 ASN01A0027_002 TRP01A0028_001 VAL01A0029_001 CYD01A0030_001 ALA01A0031_001 ALA01A0032_001 LYS01A0033_001 LYS+1A0033_002 PHE01A0034_001 GLU01A0035_001 GLU01A0035_002 GLU02A0035_003 GLU02A0035_004 GLU-1A0035_005 SER01A0036_001 ASN01A0037_001 ASN01A0037_002 PHE01A0038_001 ASN01A0039_001 ASN01A0039_002 THR01A0040_001 THR01A0040_002 GLN01A0041_001 GLN01A0041_002 ALA01A0042_001 THR01A0043_001 THR01A0043_002 ASN01A0044_001 ASN01A0044_002 ARG01A0045_001 ARG02A0045_002 ARG03A0045_003 ARG+1A0045_004 ASN01A0046_001 ASN01A0046_002 ASN01A0046_003 ASN01A0046_004 THR01A0047_001 ASP01A0048_001 ASP01A0048_002 ASP01A0048_003 ASP01A0048_004 ASP02A0048_005 ASP02A0048_006 ASP02A0048_007 ASP02A0048_008 ASP-1A0048_009 ASP-1A0048_010 SER01A0050_001 SER01A0050_002 SER01A0050_003 THR01A0051_001 THR01A0051_002 ASP01A0052_001 ASP01A0052_002 ASP01A0052_003 ASP01A0052_004 ASP02A0052_005 ASP02A0052_006 ASP02A0052_007 ASP02A0052_008 ASP-1A0052_009 ASP-1A0052_010 TYR01A0053_001 TYR01A0053_002 TYR-1A0053_003 ILE01A0055_001 LEU01A0056_001 GLN01A0057_001 GLN01A0057_002 ILE01A0058_001 ASN01A0059_001 ASN01A0059_002 ASN01A0059_003 ASN01A0059_004 SER01A0060_001 SER01A0060_002 SER01A0060_003 SER01A0060_004 SER01A0060_005 ARG01A0061_001 ARG02A0061_002 ARG03A0061_003 ARG03A0061_004 ARG+1A0061_005 TRP01A0062_001 TRP01A0063_001 CYD01A0064_001 ASN01A0065_001 ASN01A0065_002 ASP01A0066_001 ASP01A0066_002 ASP01A0066_003 ASP01A0066_004 ASP02A0066_005 ASP02A0066_006 ASP02A0066_007 ASP02A0066_008 ASP-1A0066_009 ASP-1A0066_010 ARG01A0068_001 ARG02A0068_002 ARG03A0068_003 ARG+1A0068_004 THR01A0069_001 THR01A0069_002 THR01A0069_003 PRO01A0070_001 SER01A0072_001 ARG01A0073_001 ARG02A0073_002 ARG03A0073_003 ARG+1A0073_004 ASN01A0074_001 ASN01A0074_002 LEU01A0075_001 CYD01A0076_001 ASN01A0077_001 ILE01A0078_001 PRO01A0079_001 CYD01A0080_001 SER01A0081_001 ALA01A0082_001 LEU01A0083_001 LEU01A0084_001 SER01A0085_001 SER01A0085_002 SER01A0086_001 SER01A0086_002 ASP01A0087_001 ASP01A0087_002 ASP02A0087_003 ASP02A0087_004 ASP-1A0087_005 ILE01A0088_001 THR01A0089_001 THR01A0089_002 THR01A0089_003 ALA01A0090_001 SER01A0091_001 SER01A0091_002 VAL01A0092_001 ASN01A0093_001 ASN01A0093_002 CYD01A0094_001 ALA01A0095_001 LYS01A0096_001 LYS+1A0096_002 LYS01A0097_001 LYS+1A0097_002 ILE01A0098_001 VAL01A0099_001 SER01A0100_001 SER01A0100_002 SER01A0100_003 ASP01A0101_001 ASP01A0101_002 ASP02A0101_003 ASP02A0101_004 ASP-1A0101_005 ASN01A0103_001 ASN01A0103_002 MET01A0105_001 ASN01A0106_001 ASN01A0106_002 ALA01A0107_001 TRP01A0108_001 VAL01A0109_001 ALA01A0110_001 TRP01A0111_001 ARG01A0112_001 ARG02A0112_002 ARG03A0112_003 ARG03A0112_004 ARG+1A0112_005 ASN01A0113_001 ASN01A0113_002 ARG01A0114_001 ARG02A0114_002 ARG03A0114_003 ARG+1A0114_004 CYD01A0115_001 LYS01A0116_001 LYS+1A0116_002 THR01A0118_001 THR01A0118_002 ASP01A0119_001 ASP01A0119_002 ASP02A0119_003 ASP02A0119_004 ASP-1A0119_005 VAL01A0120_001 GLN01A0121_001 GLN01A0121_002 ALA01A0122_001 TRP01A0123_001 ILE01A0124_001 ARG01A0125_001 ARG02A0125_002 ARG03A0125_003 ARG03A0125_004 ARG+1A0125_005 CYD01A0127_001 ARG01A0128_001 ARG02A0128_002 ARG03A0128_003 ARG+1A0128_004 LEU01A0129_001 CTR01A0129_001 CTR01A0129_002 CTR02A0129_003 CTR02A0129_004 CTR-1A0129_005 You can Group conformers by the conformer IDs. IDs are in a list, and each ID is considered as a match as long as it is a substring of the conformer name. The selected microstates that contain all conformers in the ID list will be returned in the first group, and the rest are in the second group. # Let's select charged GLU35 glu35_charged , _ = msa . groupms_byconfid ( microstates , [ \"GLU-1A0035\" ]) print ( len ( glu35_charged )) 28695 # find charged ASP48 from the above selected conformers glu35_asp48_charged , _ = msa . groupms_byconfid ( glu35_charged , [ \"ASP-1A0048\" ]) print ( len ( glu35_asp48_charged )) 28379 # Or we can do it in one command glu35_asp48_charged2 , _ = msa . groupms_byconfid ( microstates , [ \"GLU-1A0035\" , \"ASP-1A0048\" ]) print ( len ( glu35_asp48_charged2 )) 28379","title":"Group microstate by conformer names, and chained selection"},{"location":"newftpl/","text":"How to make a new topology file? \u00b6 Page last updated on: 2020-09-29 Topology file defines a molecule, including the atom connectivity, atom charge and radius, how conformers are made etc. General format of ftpl file \u00b6 The format of free format tpl file is simple. It is simply a key value pair separated by \":\". The key can be up to three fields, separated by \",\". The first key field is primary key, describing what kind of record it is, and the other two keys are supplementary, describing what molecule/conformer/atom it belongs to. The Value is a string, and will be processed by the mcce program in the context of key. If a space is a part of the key or value, it must be quoted inside double quotes. \":\", \",\" and \"#\" are reserved, and can not be used as part of key and value. The following is an example: Any text after \"#\" is considered comment. Any line that doesn't have \":\" is considered as comment CONNECT, \" N \", GLUBK: sp2, \" ? \", \" CA \", \" H \" MCCE reads in lines from ftpl files and save them in a single database. The content in multiple ftpl files are compiled into the database. Therefore one ftpl file can define multiple residues, and one residue parameter lines can be spread in multiple files. If the same key appears more than once, only the value of the last one is valid. This means the previous loaded value under this key will be overwritten. The order of reading ftpl files is alphabetic order of the file names. Reference of ftpl records \u00b6 Conformer list \u00b6 Example: CONFLIST, GLU: GLUBK, GLU01, GLU02, GLU-1 This is a required parameter for a molecule This parameter tells MCCE that residue GLU has 4 conformers. A conformer is named in as a 3-char residue name + 2-char conformer label. The conformer that ends with BK is a special backbone conformer. The atoms of the backbone conformerdo not change charge and protonation states. They and the atoms of one of the other side chain conformers make up the residue. In addition backbone conformers of all residues are grouped into one big chunck for energy calculation. Conformers other than backbone conformer are side chain conformers. They differ with each other by atom charge, bond connection, or proton number. Another special type conformer ends with \"DM\" as a convention name. The \"DM\" is not required. It has 0 atoms (no matching CONNECT parameters), and it represents the absence of this conformer, such as water leaving the site. Atom and bonds \u00b6 Example: CONNECT, \" N \", GLUBK: sp2, \" ? \", \" CA \", \" H \" CONNECT, \" H \", GLUBK: s, \" N \" CONNECT, \" CA \", GLUBK: sp3, \" N \", \" C \", \" CB \", \" HA \" CONNECT, \" HA \", GLUBK: s, \" CA \" CONNECT, \" C \", GLUBK: sp2, \" CA \", \" O \", \" ? \" CONNECT, \" O \", GLUBK: sp2, \" C \" CONNECT, \" CB \", GLU01: sp3, \" CA \", \" CG \", \" HB2\", \" HB3\" CONNECT, \" HB2\", GLU01: s, \" CB \" CONNECT, \" HB3\", GLU01: s, \" CB \" CONNECT, \" CG \", GLU01: sp3, \" CB \", \" CD \", \" HG2\", \" HG3\" CONNECT, \" HG2\", GLU01: s, \" CG \" CONNECT, \" HG3\", GLU01: s, \" CG \" CONNECT, \" CD \", GLU01: sp2, \" CG \", \" OE1\", \" OE2\" CONNECT, \" OE1\", GLU01: sp3, \" CD \", \" HE1\" CONNECT, \" HE1\", GLU01: s, \" OE1\" CONNECT, \" OE2\", GLU01: s, \" CD \" CONNECT, \" CB \", GLU02: sp3, \" CA \", \" CG \", \" HB2\", \" HB3\" CONNECT, \" HB2\", GLU02: s, \" CB \" CONNECT, \" HB3\", GLU02: s, \" CB \" CONNECT, \" CG \", GLU02: sp3, \" CB \", \" CD \", \" HG2\", \" HG3\" CONNECT, \" HG2\", GLU02: s, \" CG \" CONNECT, \" HG3\", GLU02: s, \" CG \" CONNECT, \" CD \", GLU02: sp2, \" CG \", \" OE1\", \" OE2\" CONNECT, \" OE1\", GLU02: s, \" CD \" CONNECT, \" OE2\", GLU02: sp3, \" CD \", \" HE2\" CONNECT, \" HE2\", GLU02: sp3, \" OE2\" CONNECT, \" CB \", GLU-1: sp3, \" CA \", \" CG \", \" HB2\", \" HB3\" CONNECT, \" HB2\", GLU-1: s, \" CB \" CONNECT, \" HB3\", GLU-1: s, \" CB \" CONNECT, \" CG \", GLU-1: sp3, \" CB \", \" CD \", \" HG2\", \" HG3\" CONNECT, \" HG2\", GLU-1: s, \" CG \" CONNECT, \" HG3\", GLU-1: s, \" CG \" CONNECT, \" CD \", GLU-1: sp2, \" CG \", \" OE1\", \" OE2\" CONNECT, \" OE1\", GLU-1: sp2, \" CD \" CONNECT, \" OE2\", GLU-1: sp2, \" CD \" CONNECT parameters define three things for a conformer: the atom names, bond geometry, and bonds. If none CONNECT parameters exist for a conformer, that conformer is a \"dummy\" conformer, representing the absence of the atoms/molecule. The keys are: parameter name, atom name, and conformer name, in this order. The value starts with atom orbital hybridization, which defines the bond angles and bond numbers, then the atoms that are bonded. For a single atom molecule, or an atom that are not connected to other atoms, use \"ion\" as the orbital type. The atom names need to be enclosed in quotations so the spaces will be counted. Atom charges \u00b6 CHARGE, GLUBK, \" N \": -0.350 CHARGE, GLUBK, \" H \": 0.250 CHARGE, GLUBK, \" CA \": 0.100 CHARGE, GLUBK, \" HA \": 0.000 CHARGE, GLUBK, \" C \": 0.550 CHARGE, GLUBK, \" O \": -0.550 CHARGE, GLU01, \" CB \": 0.000 CHARGE, GLU01, \" HB2\": 0.000 CHARGE, GLU01, \" HB3\": 0.000 CHARGE, GLU01, \" CG \": 0.000 CHARGE, GLU01, \" HG2\": 0.000 CHARGE, GLU01, \" HG3\": 0.000 CHARGE, GLU01, \" CD \": 0.550 CHARGE, GLU01, \" OE1\": -0.495 CHARGE, GLU01, \" HE1\": 0.435 CHARGE, GLU01, \" OE2\": -0.490 CHARGE, GLU02, \" CB \": 0.000 CHARGE, GLU02, \" HB2\": 0.000 CHARGE, GLU02, \" HB3\": 0.000 CHARGE, GLU02, \" CG \": 0.000 CHARGE, GLU02, \" HG2\": 0.000 CHARGE, GLU02, \" HG3\": 0.000 CHARGE, GLU02, \" CD \": 0.550 CHARGE, GLU02, \" OE1\": -0.490 CHARGE, GLU02, \" OE2\": -0.495 CHARGE, GLU02, \" HE2\": 0.435 CHARGE, GLU-1, \" CB \": 0.000 CHARGE, GLU-1, \" HB2\": 0.000 CHARGE, GLU-1, \" HB3\": 0.000 CHARGE, GLU-1, \" CG \": 0.000 CHARGE, GLU-1, \" HG2\": 0.000 CHARGE, GLU-1, \" HG3\": 0.000 CHARGE, GLU-1, \" CD \": 0.100 CHARGE, GLU-1, \" OE1\": -0.550 CHARGE, GLU-1, \" OE2\": -0.550 This parameter defines the charge of an atom in a conformer. The same atom in a molecule may have different charge depending on its bond status, protonation states, and ionization states. The key is the parameter name, conformer name and atom name. and the value is the atomic charge. If a CHARGE parameter is missing for an atom, a 0 charge is assumed. Atom radius \u00b6 Example: RADIUS, GLUBK, \" N \": 1.500, 1.750, 0.160 RADIUS, GLUBK, \" H \": 1.000, 1.000, 0.020 RADIUS, GLUBK, \" CA \": 2.000, 2.000, 0.150 RADIUS, GLUBK, \" HA \": 0.000, 1.000, 0.020 RADIUS, GLUBK, \" C \": 1.700, 2.000, 0.150 RADIUS, GLUBK, \" O \": 1.400, 1.600, 0.200 RADIUS, GLU01, \" CB \": 2.000, 2.000, 0.150 RADIUS, GLU01, \" HB2\": 0.000, 1.000, 0.020 RADIUS, GLU01, \" HB3\": 0.000, 1.000, 0.020 RADIUS, GLU01, \" CG \": 2.000, 2.000, 0.150 RADIUS, GLU01, \" HG2\": 0.000, 1.000, 0.020 RADIUS, GLU01, \" HG3\": 0.000, 1.000, 0.020 RADIUS, GLU01, \" CD \": 1.700, 2.000, 0.150 RADIUS, GLU01, \" OE1\": 1.400, 1.600, 0.200 RADIUS, GLU01, \" HE1\": 1.000, 1.000, 0.020 RADIUS, GLU01, \" OE2\": 1.400, 1.600, 0.200 RADIUS, GLU02, \" CB \": 2.000, 2.000, 0.150 RADIUS, GLU02, \" HB2\": 0.000, 1.000, 0.020 RADIUS, GLU02, \" HB3\": 0.000, 1.000, 0.020 RADIUS, GLU02, \" CG \": 2.000, 2.000, 0.150 RADIUS, GLU02, \" HG2\": 0.000, 1.000, 0.020 RADIUS, GLU02, \" HG3\": 0.000, 1.000, 0.020 RADIUS, GLU02, \" CD \": 1.700, 2.000, 0.150 RADIUS, GLU02, \" OE1\": 1.400, 1.600, 0.200 RADIUS, GLU02, \" OE2\": 1.400, 1.600, 0.200 RADIUS, GLU02, \" HE2\": 1.000, 1.000, 0.020 RADIUS, GLU-1, \" CB \": 2.000, 2.000, 0.150 RADIUS, GLU-1, \" HB2\": 0.000, 1.000, 0.020 RADIUS, GLU-1, \" HB3\": 0.000, 1.000, 0.020 RADIUS, GLU-1, \" CG \": 2.000, 2.000, 0.150 RADIUS, GLU-1, \" HG2\": 0.000, 1.000, 0.020 RADIUS, GLU-1, \" HG3\": 0.000, 1.000, 0.020 RADIUS, GLU-1, \" CD \": 1.700, 2.000, 0.150 RADIUS, GLU-1, \" OE1\": 1.400, 1.600, 0.200 RADIUS, GLU-1, \" OE2\": 1.400, 1.600, 0.200 The radius parameter includes both the dielelctric boundary radius, and VDW radius plus energy well depth. The key is the parameter name, conformer name and atom name. The value has three fields. They are radius for defining dielectric boundary, and the radius and energy well depth to caculate Van der Waals energy. Conformer parameters \u00b6 Example: CONFORMER, GLU01: Em0= 0.0, pKa0= 0.00, ne= 0, nH= 0, rxn02 = -6.41, rxn04= -3.100, rxn08= -1.39 CONFORMER, GLU02: Em0= 0.0, pKa0= 0.00, ne= 0, nH= 0, rxn02 = -6.44, rxn04= -3.100, rxn08= -1.39 CONFORMER, GLU-1: Em0= 0.0, pKa0= 4.75, ne= 0, nH=-1, rxn02 =-41.76, rxn04=-20.200, rxn08= -9.59 Each conformer defined in CONFLIST except backbone and dummy conformers should have a line in this section. It defines some necessary conformer properties. The key is parameter name and conformer. The value consists fields separated by commas. Each field is a key value pair. Em0: Redox titration midpoint potential of the molecule in solution. pKa0: pH titration mid point of the molecule in solution ne: relative number of electrons. For a redox reaction, the ground state has ne = 0, the excited state has a ne of none 0. nH: relative number of protons. For a protonation reaction, the ground state has nH = 0, charged acid loses a proton so nH = -1 and charged base gains a proton so nH = 1. rxn02: reference reaction field energy at dielectric constant 2. rxn04: reference reaction field energy at dielectric constant 4. rxn08: reference reaction field energy at dielectric constant 8. Rotatable bonds \u00b6 Example: ROTATE, GLU: \" CA \" - \" CB \", \" CB \" - \" CG \", \" CG \" - \" CD \" This is an optional parameter. The key is parameter name and residue name. Different conformer types are not configured to have different bond rotations. The key is a series of rotatable bonds. Each rotatable bond is defined by two atoms, and these two atoms are directional. The direction means when a bond rotation is made, the first atom is stationary, and the second atom and all atoms connected to it in that direction will all rotate accordingly. How to make a new ftpl file \u00b6 Although one can manually write all the parameter lines in ftpl file. There are tools to help making ftpl file much easier. Make ftpl file template \u00b6 If you have a pdb file, you can build a ftpl file template out of it. Syntax: $ pdb2ftpl.py [-d] [-c ID] pdbfile The command will use CONECT record in pdb file to find bonds when available. If CONECT does not exist, the program will switch to distance calculated by atom coordinates to make bonds. The switch \"-d\" forces the program to use distance to make bonds. The switch \"-c ID\" lets the program to use a different 2-character conformer ID. By default, the ID is 01. Obtain atom charges \u00b6 One way to compute atomic charge is through Atomic Charge Calculator at https://webchem.ncbr.muni.cz/Platform/ChargeCalculator You can specify non-0 total charge of the molecule with this tool. Calculate reference reaction field energy \u00b6 Once you assign the atomic charges to the atoms in the ftpl file template and name it with suffix .ftpl, copy this file to the mcce param directory under its installation folder. The installation directory is where the mcce program is. For example, you find the location of mcce executable: $ which mcce /home/jmao/projects/Stable-MCCE/bin/mcce Then the param directory is: $ ls /home/jmao/projects/Stable-MCCE/param 00always_needed.tpl asn.ftpl _cl.ftpl ena.ftpl gly.ftpl ile.ftpl mel.ftpl ntr.ftpl ser.ftpl tyr.ftpl 7MQ.ftpl asp.ftpl ctr.ftpl for.ftpl hil.ftpl leu.ftpl mem.ftpl pdbs step1_out.pdb val.ftpl ala.ftpl bcl.ftpl cyd.ftpl gln.ftpl his.ftpl lys.ftpl met.ftpl phe.ftpl thr.ftpl _zn.ftpl arg.ftpl bcr.ftpl cys.ftpl glu.ftpl hoh.ftpl mcce.tpl _na.ftpl pro.ftpl trp.ftpl This is the directory ftpl files are stored. Examples of making ftpl file \u00b6 Here are some examples of making new ftpl file for molecules: Single state \u00b6 This example prepares a ftpl file for a molecule with one single state. That is, no inozation conformer, no dummy conformer. Ethanol: CH3CH2OH Step 1: Get pdb file \u00b6 Goto RSCB ligand expo http://ligand-expo.rcsb.org/ Search Ethanol as molecule name from http://ligand-expo.rcsb.org/ . Download the pdb file of ethanol EOH_ideal.pdb. or use this command to download directly $ wget http://ligand-expo.rcsb.org/reports/E/EOH/EOH_ideal.pdb Step 2: Make a ftpl file \u00b6 $ pdb2ftpl.py EOH_ideal.pdb > eoh.ftpl $ cat eoh.ftpl # Conformer definition CONFLIST, EOH: EOHBK, EOH01 # ATOM name and bonds CONNECT, \" C1 \", EOH01: sp3, \" C2 \",\" O \",\" H11\",\" H12\" CONNECT, \" C2 \", EOH01: sp3, \" C1 \",\" H21\",\" H22\",\" H23\" CONNECT, \" O \", EOH01: sp3, \" C1 \",\" HO \" CONNECT, \" H11\", EOH01: s, \" C1 \" CONNECT, \" H12\", EOH01: s, \" C1 \" CONNECT, \" H21\", EOH01: s, \" C2 \" CONNECT, \" H22\", EOH01: s, \" C2 \" CONNECT, \" H23\", EOH01: s, \" C2 \" CONNECT, \" HO \", EOH01: s, \" O \" # ATOM charges CHARGE, EOH01, \" C1 \": to_be_filled CHARGE, EOH01, \" C2 \": to_be_filled CHARGE, EOH01, \" O \": to_be_filled CHARGE, EOH01, \" H11\": to_be_filled CHARGE, EOH01, \" H12\": to_be_filled CHARGE, EOH01, \" H21\": to_be_filled CHARGE, EOH01, \" H22\": to_be_filled CHARGE, EOH01, \" H23\": to_be_filled CHARGE, EOH01, \" HO \": to_be_filled # Atom radius, dielelctric boundary radius, VDW radius, and energy well depth RADIUS, EOH01, \" C1 \": 1.700, 2.000, 0.150 RADIUS, EOH01, \" C2 \": 1.700, 2.000, 0.150 RADIUS, EOH01, \" O \": 1.400, 1.600, 0.200 RADIUS, EOH01, \" H11\": 1.000, 1.000, 0.020 RADIUS, EOH01, \" H12\": 1.000, 1.000, 0.020 RADIUS, EOH01, \" H21\": 1.000, 1.000, 0.020 RADIUS, EOH01, \" H22\": 1.000, 1.000, 0.020 RADIUS, EOH01, \" H23\": 1.000, 1.000, 0.020 RADIUS, EOH01, \" HO \": 1.000, 1.000, 0.020 # Conformer parameters that appear in head3.lst: ne, Em0, nH, pKa0, rxn CONFORMER, EOH01: Em0=0.0, pKa0=0.00, ne=0, nH=0, rxn02= to_be_filled, rxn04= to_be_filled, rxn08= to_be_filled Step 3: Calculate charge \u00b6 Go to https://webchem.ncbr.muni.cz/Platform/ChargeCalculator Submit EOH_ideal.pdb, set total charge 0, and obtain the atomic charge results. Assign the charges to the previously made file eoh.ftpl # Conformer definition CONFLIST, EOH: EOHBK, EOH01 # ATOM name and bonds CONNECT, \" C1 \", EOH01: sp3, \" C2 \",\" O \",\" H11\",\" H12\" CONNECT, \" C2 \", EOH01: sp3, \" C1 \",\" H21\",\" H22\",\" H23\" CONNECT, \" O \", EOH01: sp3, \" C1 \",\" HO \" CONNECT, \" H11\", EOH01: s, \" C1 \" CONNECT, \" H12\", EOH01: s, \" C1 \" CONNECT, \" H21\", EOH01: s, \" C2 \" CONNECT, \" H22\", EOH01: s, \" C2 \" CONNECT, \" H23\", EOH01: s, \" C2 \" CONNECT, \" HO \", EOH01: s, \" O \" # ATOM charges CHARGE, EOH01, \" C1 \": -0.085 CHARGE, EOH01, \" C2 \": -0.554 CHARGE, EOH01, \" O \": -0.746 CHARGE, EOH01, \" H11\": 0.177 CHARGE, EOH01, \" H12\": 0.177 CHARGE, EOH01, \" H21\": 0.237 CHARGE, EOH01, \" H22\": 0.237 CHARGE, EOH01, \" H23\": 0.209 CHARGE, EOH01, \" HO \": 0.351 # Atom radius, dielelctric boundary radius, VDW radius, and energy well depth RADIUS, EOH01, \" C1 \": 1.700, 2.000, 0.150 RADIUS, EOH01, \" C2 \": 1.700, 2.000, 0.150 RADIUS, EOH01, \" O \": 1.400, 1.600, 0.200 RADIUS, EOH01, \" H11\": 1.000, 1.000, 0.020 RADIUS, EOH01, \" H12\": 1.000, 1.000, 0.020 RADIUS, EOH01, \" H21\": 1.000, 1.000, 0.020 RADIUS, EOH01, \" H22\": 1.000, 1.000, 0.020 RADIUS, EOH01, \" H23\": 1.000, 1.000, 0.020 RADIUS, EOH01, \" HO \": 1.000, 1.000, 0.020 # Conformer parameters that appear in head3.lst: ne, Em0, nH, pKa0, rxn CONFORMER, EOH01: Em0=0.0, pKa0=0.00, ne=0, nH=0, rxn02= 0, rxn04= 0, rxn08= 0 Step 4: Install ftpl file \u00b6 Find the param/ location $ which mcce /home/jmao/projects/Stable-MCCE/bin/mcce Copy ftpl file to param/ $ cp eoh.ftpl /home/jmao/projects/Stable-MCCE/param Step 5: Reaction field energy \u00b6 Starting with rxn02 = 0, rxn04 = 0, and rxn08 = 0, we are going to recalculate the proper reference values so that this molecule in solution gives 0 desolvation energy in self-energy file head3.lst. $ step1.py --noter EOH_ideal.pdb $ step2.py $ step3.py Then do cat head3.lst and find the number under dsolv, which is -4.076 in our case. The step 3 used default dielectric constant 4, so this value is for rxn04. Put this number back to eoh.ftpl file under param/ so it reads like: # Conformer parameters that appear in head3.lst: ne, Em0, nH, pKa0, rxn CONFORMER, EOH01: Em0=0.0, pKa0=0.00, ne=0, nH=0, rxn02= 0, rxn04= -4.076, rxn08= 0 If we run 3 steps again, we will get dsolv about 0 this time: $ step3.py $ cat head3.lst iConf CONFORMER FL occ crg Em0 pKa0 ne nH vdw0 vdw1 tors epol dsolv extra history 00001 EOH01A0001_001 f 0.00 0.003 0 0.00 0 0 0.677 0.000 0.000 0.000 0.004 0.000 01O000M000 t Next we need to do the same for rxn02 and rxn 08. Step3 will take epsilon as our command option this time. Dielectric constant 2 $ step3.py -d 2 $ cat head3.lst iConf CONFORMER FL occ crg Em0 pKa0 ne nH vdw0 vdw1 tors epol dsolv extra history 00001 EOH01A0001_001 f 0.00 0.003 0 0.00 0 0 0.677 0.000 0.000 0.000 -8.500 0.000 01O000M000 t Dielectric constant 8 $ step3.py -d 8 $ cat head3.lst iConf CONFORMER FL occ crg Em0 pKa0 ne nH vdw0 vdw1 tors epol dsolv extra history 00001 EOH01A0001_001 f 0.00 0.003 0 0.00 0 0 0.677 0.000 0.000 0.000 -1.875 0.000 01O000M000 t Put these numbers back to param/eoh.ftpl under installation folder, this line reads as: CONFORMER, EOH01: Em0=0.0, pKa0=0.00, ne=0, nH=0, rxn02= -8.5, rxn04= -4.076, rxn08= -1.875 Protonation or redox states \u00b6 What if a molecule has multiple ionization states? In short, we need to assign two conformer types and give atoms different charge sets. Example: Acetic acid: CH3COOH Prepare pdb files \u00b6 Goto RSCB ligand expo http://ligand-expo.rcsb.org/ Search \"acetic acid\" Click on Chemical details of ACY Download pdb file or $ wget http://ligand-expo.rcsb.org/reports/A/ACY/ACY_ideal.pdb This file is in protonated state: ATOM 1 C ACY A 1 0.012 -0.056 0.002 1.00 10.00 C ATOM 2 O ACY A 1 0.261 -1.238 -0.000 1.00 10.00 O ATOM 3 OXT ACY A 1 1.011 0.840 -0.000 1.00 10.00 O ATOM 4 CH3 ACY A 1 -1.421 0.412 -0.000 1.00 10.00 C ATOM 5 HXT ACY A 1 1.913 0.493 -0.003 1.00 10.00 H ATOM 6 H1 ACY A 1 -1.768 0.523 1.027 1.00 10.00 H ATOM 7 H2 ACY A 1 -1.489 1.372 -0.512 1.00 10.00 H ATOM 8 H3 ACY A 1 -2.042 -0.320 -0.517 1.00 10.00 H CONECT 1 2 3 4 CONECT 2 1 CONECT 3 1 5 CONECT 4 1 6 7 8 CONECT 5 3 CONECT 6 4 CONECT 7 4 CONECT 8 4 We need to make a pdb file in name ACY_deprotonated.pdb for deprotonated state by deleting HXT: ATOM 1 C ACY A 1 0.012 -0.056 0.002 1.00 10.00 C ATOM 2 O ACY A 1 0.261 -1.238 -0.000 1.00 10.00 O ATOM 3 OXT ACY A 1 1.011 0.840 -0.000 1.00 10.00 O ATOM 4 CH3 ACY A 1 -1.421 0.412 -0.000 1.00 10.00 C ATOM 6 H1 ACY A 1 -1.768 0.523 1.027 1.00 10.00 H ATOM 7 H2 ACY A 1 -1.489 1.372 -0.512 1.00 10.00 H ATOM 8 H3 ACY A 1 -2.042 -0.320 -0.517 1.00 10.00 H We also deleted CONECT because we dont want to manually fix CONECT due to the missing HXT. Make ftpl files \u00b6 create ftpl template for protonated acetic acid $ pdb2ftpl.py ACY_ideal.pdb > acy.ftpl create ftpl template for deprotonated acetic acid $ pdb2ftpl.py -c -1 ACY_deprotonated.pdb > acy-1.ftpl Merge two files. While CONFLIST maintains a single line, other parameters still take individual lines. # Conformer definition CONFLIST, ACY: ACYBK, ACY01, ACY-1 # ATOM name and bonds CONNECT, \" C \", ACY01: sp2, \" O \",\" OXT\",\" CH3\" CONNECT, \" O \", ACY01: sp3, \" C \" CONNECT, \" OXT\", ACY01: sp2, \" C \",\" HXT\" CONNECT, \" CH3\", ACY01: sp3, \" C \",\" H1 \",\" H2 \",\" H3 \" CONNECT, \" HXT\", ACY01: s, \" OXT\" CONNECT, \" H1 \", ACY01: s, \" CH3\" CONNECT, \" H2 \", ACY01: s, \" CH3\" CONNECT, \" H3 \", ACY01: s, \" CH3\" CONNECT, \" C \", ACY-1: sp2, \" O \",\" OXT\",\" CH3\" CONNECT, \" O \", ACY-1: sp3, \" C \" CONNECT, \" OXT\", ACY-1: sp3, \" C \" CONNECT, \" CH3\", ACY-1: sp3, \" C \",\" H1 \",\" H2 \",\" H3 \" CONNECT, \" H1 \", ACY-1: s, \" CH3\" CONNECT, \" H2 \", ACY-1: s, \" CH3\" CONNECT, \" H3 \", ACY-1: s, \" CH3\" # ATOM charges CHARGE, ACY01, \" C \": to_be_filled CHARGE, ACY01, \" O \": to_be_filled CHARGE, ACY01, \" OXT\": to_be_filled CHARGE, ACY01, \" CH3\": to_be_filled CHARGE, ACY01, \" HXT\": to_be_filled CHARGE, ACY01, \" H1 \": to_be_filled CHARGE, ACY01, \" H2 \": to_be_filled CHARGE, ACY01, \" H3 \": to_be_filled CHARGE, ACY-1, \" C \": to_be_filled CHARGE, ACY-1, \" O \": to_be_filled CHARGE, ACY-1, \" OXT\": to_be_filled CHARGE, ACY-1, \" CH3\": to_be_filled CHARGE, ACY-1, \" H1 \": to_be_filled CHARGE, ACY-1, \" H2 \": to_be_filled CHARGE, ACY-1, \" H3 \": to_be_filled # Atom radius, dielelctric boundary radius, VDW radius, and energy well depth RADIUS, ACY01, \" C \": 1.700, 2.000, 0.150 RADIUS, ACY01, \" O \": 1.400, 1.600, 0.200 RADIUS, ACY01, \" OXT\": 1.400, 1.600, 0.200 RADIUS, ACY01, \" CH3\": 1.700, 2.000, 0.150 RADIUS, ACY01, \" HXT\": 1.000, 1.000, 0.020 RADIUS, ACY01, \" H1 \": 1.000, 1.000, 0.020 RADIUS, ACY01, \" H2 \": 1.000, 1.000, 0.020 RADIUS, ACY01, \" H3 \": 1.000, 1.000, 0.020 RADIUS, ACY-1, \" C \": 1.700, 2.000, 0.150 RADIUS, ACY-1, \" O \": 1.400, 1.600, 0.200 RADIUS, ACY-1, \" OXT\": 1.400, 1.600, 0.200 RADIUS, ACY-1, \" CH3\": 1.700, 2.000, 0.150 RADIUS, ACY-1, \" H1 \": 1.000, 1.000, 0.020 RADIUS, ACY-1, \" H2 \": 1.000, 1.000, 0.020 RADIUS, ACY-1, \" H3 \": 1.000, 1.000, 0.020 # Conformer parameters that appear in head3.lst: ne, Em0, nH, pKa0, rxn CONFORMER, ACY01: Em0=0.0, pKa0=0.00, ne=0, nH=0, rxn02= 0, rxn04= 0, rxn08= 0 CONFORMER, ACY-1: Em0=0.0, pKa0=0.00, ne=0, nH=0, rxn02= 0, rxn04= 0, rxn08= 0 Calculate charge \u00b6 Go to https://webchem.ncbr.muni.cz/Platform/ChargeCalculator Submit ACY_ideal.pdb, set total charge 0, and obtain the atomic charge results. Submit ACY_deprotonated.pdb, set total charge -1, and obtain the atomic charge results. Assign the charges to acy.ftpl file: take individual lines. # Conformer definition CONFLIST, ACY: ACYBK, ACY01, ACY-1 # ATOM name and bonds CONNECT, \" C \", ACY01: sp2, \" O \",\" OXT\",\" CH3\" CONNECT, \" O \", ACY01: sp3, \" C \" CONNECT, \" OXT\", ACY01: sp2, \" C \",\" HXT\" CONNECT, \" CH3\", ACY01: sp3, \" C \",\" H1 \",\" H2 \",\" H3 \" CONNECT, \" HXT\", ACY01: s, \" OXT\" CONNECT, \" H1 \", ACY01: s, \" CH3\" CONNECT, \" H2 \", ACY01: s, \" CH3\" CONNECT, \" H3 \", ACY01: s, \" CH3\" CONNECT, \" C \", ACY-1: sp2, \" O \",\" OXT\",\" CH3\" CONNECT, \" O \", ACY-1: sp3, \" C \" CONNECT, \" OXT\", ACY-1: sp3, \" C \" CONNECT, \" CH3\", ACY-1: sp3, \" C \",\" H1 \",\" H2 \",\" H3 \" CONNECT, \" H1 \", ACY-1: s, \" CH3\" CONNECT, \" H2 \", ACY-1: s, \" CH3\" CONNECT, \" H3 \", ACY-1: s, \" CH3\" # ATOM charges CHARGE, ACY01, \" C \": 0.680 CHARGE, ACY01, \" O \": -0.590 CHARGE, ACY01, \" OXT\": -0.774 CHARGE, ACY01, \" CH3\": -0.606 CHARGE, ACY01, \" HXT\": 0.433 CHARGE, ACY01, \" H1 \": 0.283 CHARGE, ACY01, \" H2 \": 0.287 CHARGE, ACY01, \" H3 \": 0.287 CHARGE, ACY-1, \" C \": 0.577 CHARGE, ACY-1, \" O \": -0.768 CHARGE, ACY-1, \" OXT\": -0.699 CHARGE, ACY-1, \" CH3\": -0.714 CHARGE, ACY-1, \" H1 \": 0.198 CHARGE, ACY-1, \" H2 \": 0.202 CHARGE, ACY-1, \" H3 \": 0.204 # Atom radius, dielelctric boundary radius, VDW radius, and energy well depth RADIUS, ACY01, \" C \": 1.700, 2.000, 0.150 RADIUS, ACY01, \" O \": 1.400, 1.600, 0.200 RADIUS, ACY01, \" OXT\": 1.400, 1.600, 0.200 RADIUS, ACY01, \" CH3\": 1.700, 2.000, 0.150 RADIUS, ACY01, \" HXT\": 1.000, 1.000, 0.020 RADIUS, ACY01, \" H1 \": 1.000, 1.000, 0.020 RADIUS, ACY01, \" H2 \": 1.000, 1.000, 0.020 RADIUS, ACY01, \" H3 \": 1.000, 1.000, 0.020 RADIUS, ACY-1, \" C \": 1.700, 2.000, 0.150 RADIUS, ACY-1, \" O \": 1.400, 1.600, 0.200 RADIUS, ACY-1, \" OXT\": 1.400, 1.600, 0.200 RADIUS, ACY-1, \" CH3\": 1.700, 2.000, 0.150 RADIUS, ACY-1, \" H1 \": 1.000, 1.000, 0.020 RADIUS, ACY-1, \" H2 \": 1.000, 1.000, 0.020 RADIUS, ACY-1, \" H3 \": 1.000, 1.000, 0.020 # Conformer parameters that appear in head3.lst: ne, Em0, nH, pKa0, rxn CONFORMER, ACY01: Em0=0.0, pKa0=0.00, ne=0, nH=0, rxn02= 0, rxn04= 0, rxn08= 0 CONFORMER, ACY-1: Em0=0.0, pKa0=0.00, ne=0, nH=0, rxn02= 0, rxn04= 0, rxn08= 0 Install ftpl file \u00b6 User made ftpl files are called custom ftpl files. They should be placed under ./user_param of working directory. If this directory doesn't exist, create one. The ftpl files under ./user_param supercsede the system ftpl files so you can overwrite system ftpl files with your own. Within this directory, files are read in based on alphabetic order. Copy ftpl file to ./user_param/ $ cp acy.ftpl ./user_param Reaction field energy \u00b6 Run step 1 to 3: $ step1.py --noter ACY_ideal.pdb $ step2.py $ step3.py -d 2 $ cat head3.lst iConf CONFORMER FL occ crg Em0 pKa0 ne nH vdw0 vdw1 tors epol dsolv extra history 00001 ACY01A0001_001 f 0.00 0.000 0 0.00 0 0 0.497 0.000 0.000 0.000 -11.413 0.000 01O000M000 t 00002 ACY-1A0001_002 f 0.00 -1.000 0 0.00 0 0 0.180 0.000 0.000 0.000 -47.119 0.000 -1O000M000 t $ step3.py -d 4 $ cat head3.lst iConf CONFORMER FL occ crg Em0 pKa0 ne nH vdw0 vdw1 tors epol dsolv extra history 00001 ACY01A0001_001 f 0.00 0.000 0 0.00 0 0 0.497 0.000 0.000 0.000 -5.495 0.000 01O000M000 t 00002 ACY-1A0001_002 f 0.00 -1.000 0 0.00 0 0 0.180 0.000 0.000 0.000 -22.902 0.000 -1O000M000 t $ step3.py -d 8 $ cat head3.lst iConf CONFORMER FL occ crg Em0 pKa0 ne nH vdw0 vdw1 tors epol dsolv extra history 00001 ACY01A0001_001 f 0.00 0.000 0 0.00 0 0 0.497 0.000 0.000 0.000 -2.548 0.000 01O000M000 t 00002 ACY-1A0001_002 f 0.00 -1.000 0 0.00 0 0 0.180 0.000 0.000 0.000 -10.801 0.000 -1O000M000 t Put the values back in /path/to/param/acy.ftpl, set nH=-1 because this conformer loses a proton, and set pKa0 =4.75 as this is acetic acid pKa. # Conformer parameters that appear in head3.lst: ne, Em0, nH, pKa0, rxn CONFORMER, ACY01: Em0=0.0, pKa0=0.00, ne=0, nH=0, rxn02= -11.413, rxn04= -5.495, rxn08= -2.548 CONFORMER, ACY-1: Em0=0.0, pKa0=4.75, ne=0, nH=-1, rxn02= -47.119, rxn04= -22.902, rxn08= -10.801","title":"Make a new topology file"},{"location":"newftpl/#how-to-make-a-new-topology-file","text":"Page last updated on: 2020-09-29 Topology file defines a molecule, including the atom connectivity, atom charge and radius, how conformers are made etc.","title":"How to make a new topology file?"},{"location":"newftpl/#general-format-of-ftpl-file","text":"The format of free format tpl file is simple. It is simply a key value pair separated by \":\". The key can be up to three fields, separated by \",\". The first key field is primary key, describing what kind of record it is, and the other two keys are supplementary, describing what molecule/conformer/atom it belongs to. The Value is a string, and will be processed by the mcce program in the context of key. If a space is a part of the key or value, it must be quoted inside double quotes. \":\", \",\" and \"#\" are reserved, and can not be used as part of key and value. The following is an example: Any text after \"#\" is considered comment. Any line that doesn't have \":\" is considered as comment CONNECT, \" N \", GLUBK: sp2, \" ? \", \" CA \", \" H \" MCCE reads in lines from ftpl files and save them in a single database. The content in multiple ftpl files are compiled into the database. Therefore one ftpl file can define multiple residues, and one residue parameter lines can be spread in multiple files. If the same key appears more than once, only the value of the last one is valid. This means the previous loaded value under this key will be overwritten. The order of reading ftpl files is alphabetic order of the file names.","title":"General format of ftpl file"},{"location":"newftpl/#reference-of-ftpl-records","text":"","title":"Reference of ftpl records"},{"location":"newftpl/#conformer-list","text":"Example: CONFLIST, GLU: GLUBK, GLU01, GLU02, GLU-1 This is a required parameter for a molecule This parameter tells MCCE that residue GLU has 4 conformers. A conformer is named in as a 3-char residue name + 2-char conformer label. The conformer that ends with BK is a special backbone conformer. The atoms of the backbone conformerdo not change charge and protonation states. They and the atoms of one of the other side chain conformers make up the residue. In addition backbone conformers of all residues are grouped into one big chunck for energy calculation. Conformers other than backbone conformer are side chain conformers. They differ with each other by atom charge, bond connection, or proton number. Another special type conformer ends with \"DM\" as a convention name. The \"DM\" is not required. It has 0 atoms (no matching CONNECT parameters), and it represents the absence of this conformer, such as water leaving the site.","title":"Conformer list"},{"location":"newftpl/#atom-and-bonds","text":"Example: CONNECT, \" N \", GLUBK: sp2, \" ? \", \" CA \", \" H \" CONNECT, \" H \", GLUBK: s, \" N \" CONNECT, \" CA \", GLUBK: sp3, \" N \", \" C \", \" CB \", \" HA \" CONNECT, \" HA \", GLUBK: s, \" CA \" CONNECT, \" C \", GLUBK: sp2, \" CA \", \" O \", \" ? \" CONNECT, \" O \", GLUBK: sp2, \" C \" CONNECT, \" CB \", GLU01: sp3, \" CA \", \" CG \", \" HB2\", \" HB3\" CONNECT, \" HB2\", GLU01: s, \" CB \" CONNECT, \" HB3\", GLU01: s, \" CB \" CONNECT, \" CG \", GLU01: sp3, \" CB \", \" CD \", \" HG2\", \" HG3\" CONNECT, \" HG2\", GLU01: s, \" CG \" CONNECT, \" HG3\", GLU01: s, \" CG \" CONNECT, \" CD \", GLU01: sp2, \" CG \", \" OE1\", \" OE2\" CONNECT, \" OE1\", GLU01: sp3, \" CD \", \" HE1\" CONNECT, \" HE1\", GLU01: s, \" OE1\" CONNECT, \" OE2\", GLU01: s, \" CD \" CONNECT, \" CB \", GLU02: sp3, \" CA \", \" CG \", \" HB2\", \" HB3\" CONNECT, \" HB2\", GLU02: s, \" CB \" CONNECT, \" HB3\", GLU02: s, \" CB \" CONNECT, \" CG \", GLU02: sp3, \" CB \", \" CD \", \" HG2\", \" HG3\" CONNECT, \" HG2\", GLU02: s, \" CG \" CONNECT, \" HG3\", GLU02: s, \" CG \" CONNECT, \" CD \", GLU02: sp2, \" CG \", \" OE1\", \" OE2\" CONNECT, \" OE1\", GLU02: s, \" CD \" CONNECT, \" OE2\", GLU02: sp3, \" CD \", \" HE2\" CONNECT, \" HE2\", GLU02: sp3, \" OE2\" CONNECT, \" CB \", GLU-1: sp3, \" CA \", \" CG \", \" HB2\", \" HB3\" CONNECT, \" HB2\", GLU-1: s, \" CB \" CONNECT, \" HB3\", GLU-1: s, \" CB \" CONNECT, \" CG \", GLU-1: sp3, \" CB \", \" CD \", \" HG2\", \" HG3\" CONNECT, \" HG2\", GLU-1: s, \" CG \" CONNECT, \" HG3\", GLU-1: s, \" CG \" CONNECT, \" CD \", GLU-1: sp2, \" CG \", \" OE1\", \" OE2\" CONNECT, \" OE1\", GLU-1: sp2, \" CD \" CONNECT, \" OE2\", GLU-1: sp2, \" CD \" CONNECT parameters define three things for a conformer: the atom names, bond geometry, and bonds. If none CONNECT parameters exist for a conformer, that conformer is a \"dummy\" conformer, representing the absence of the atoms/molecule. The keys are: parameter name, atom name, and conformer name, in this order. The value starts with atom orbital hybridization, which defines the bond angles and bond numbers, then the atoms that are bonded. For a single atom molecule, or an atom that are not connected to other atoms, use \"ion\" as the orbital type. The atom names need to be enclosed in quotations so the spaces will be counted.","title":"Atom and bonds"},{"location":"newftpl/#atom-charges","text":"CHARGE, GLUBK, \" N \": -0.350 CHARGE, GLUBK, \" H \": 0.250 CHARGE, GLUBK, \" CA \": 0.100 CHARGE, GLUBK, \" HA \": 0.000 CHARGE, GLUBK, \" C \": 0.550 CHARGE, GLUBK, \" O \": -0.550 CHARGE, GLU01, \" CB \": 0.000 CHARGE, GLU01, \" HB2\": 0.000 CHARGE, GLU01, \" HB3\": 0.000 CHARGE, GLU01, \" CG \": 0.000 CHARGE, GLU01, \" HG2\": 0.000 CHARGE, GLU01, \" HG3\": 0.000 CHARGE, GLU01, \" CD \": 0.550 CHARGE, GLU01, \" OE1\": -0.495 CHARGE, GLU01, \" HE1\": 0.435 CHARGE, GLU01, \" OE2\": -0.490 CHARGE, GLU02, \" CB \": 0.000 CHARGE, GLU02, \" HB2\": 0.000 CHARGE, GLU02, \" HB3\": 0.000 CHARGE, GLU02, \" CG \": 0.000 CHARGE, GLU02, \" HG2\": 0.000 CHARGE, GLU02, \" HG3\": 0.000 CHARGE, GLU02, \" CD \": 0.550 CHARGE, GLU02, \" OE1\": -0.490 CHARGE, GLU02, \" OE2\": -0.495 CHARGE, GLU02, \" HE2\": 0.435 CHARGE, GLU-1, \" CB \": 0.000 CHARGE, GLU-1, \" HB2\": 0.000 CHARGE, GLU-1, \" HB3\": 0.000 CHARGE, GLU-1, \" CG \": 0.000 CHARGE, GLU-1, \" HG2\": 0.000 CHARGE, GLU-1, \" HG3\": 0.000 CHARGE, GLU-1, \" CD \": 0.100 CHARGE, GLU-1, \" OE1\": -0.550 CHARGE, GLU-1, \" OE2\": -0.550 This parameter defines the charge of an atom in a conformer. The same atom in a molecule may have different charge depending on its bond status, protonation states, and ionization states. The key is the parameter name, conformer name and atom name. and the value is the atomic charge. If a CHARGE parameter is missing for an atom, a 0 charge is assumed.","title":"Atom charges"},{"location":"newftpl/#atom-radius","text":"Example: RADIUS, GLUBK, \" N \": 1.500, 1.750, 0.160 RADIUS, GLUBK, \" H \": 1.000, 1.000, 0.020 RADIUS, GLUBK, \" CA \": 2.000, 2.000, 0.150 RADIUS, GLUBK, \" HA \": 0.000, 1.000, 0.020 RADIUS, GLUBK, \" C \": 1.700, 2.000, 0.150 RADIUS, GLUBK, \" O \": 1.400, 1.600, 0.200 RADIUS, GLU01, \" CB \": 2.000, 2.000, 0.150 RADIUS, GLU01, \" HB2\": 0.000, 1.000, 0.020 RADIUS, GLU01, \" HB3\": 0.000, 1.000, 0.020 RADIUS, GLU01, \" CG \": 2.000, 2.000, 0.150 RADIUS, GLU01, \" HG2\": 0.000, 1.000, 0.020 RADIUS, GLU01, \" HG3\": 0.000, 1.000, 0.020 RADIUS, GLU01, \" CD \": 1.700, 2.000, 0.150 RADIUS, GLU01, \" OE1\": 1.400, 1.600, 0.200 RADIUS, GLU01, \" HE1\": 1.000, 1.000, 0.020 RADIUS, GLU01, \" OE2\": 1.400, 1.600, 0.200 RADIUS, GLU02, \" CB \": 2.000, 2.000, 0.150 RADIUS, GLU02, \" HB2\": 0.000, 1.000, 0.020 RADIUS, GLU02, \" HB3\": 0.000, 1.000, 0.020 RADIUS, GLU02, \" CG \": 2.000, 2.000, 0.150 RADIUS, GLU02, \" HG2\": 0.000, 1.000, 0.020 RADIUS, GLU02, \" HG3\": 0.000, 1.000, 0.020 RADIUS, GLU02, \" CD \": 1.700, 2.000, 0.150 RADIUS, GLU02, \" OE1\": 1.400, 1.600, 0.200 RADIUS, GLU02, \" OE2\": 1.400, 1.600, 0.200 RADIUS, GLU02, \" HE2\": 1.000, 1.000, 0.020 RADIUS, GLU-1, \" CB \": 2.000, 2.000, 0.150 RADIUS, GLU-1, \" HB2\": 0.000, 1.000, 0.020 RADIUS, GLU-1, \" HB3\": 0.000, 1.000, 0.020 RADIUS, GLU-1, \" CG \": 2.000, 2.000, 0.150 RADIUS, GLU-1, \" HG2\": 0.000, 1.000, 0.020 RADIUS, GLU-1, \" HG3\": 0.000, 1.000, 0.020 RADIUS, GLU-1, \" CD \": 1.700, 2.000, 0.150 RADIUS, GLU-1, \" OE1\": 1.400, 1.600, 0.200 RADIUS, GLU-1, \" OE2\": 1.400, 1.600, 0.200 The radius parameter includes both the dielelctric boundary radius, and VDW radius plus energy well depth. The key is the parameter name, conformer name and atom name. The value has three fields. They are radius for defining dielectric boundary, and the radius and energy well depth to caculate Van der Waals energy.","title":"Atom radius"},{"location":"newftpl/#conformer-parameters","text":"Example: CONFORMER, GLU01: Em0= 0.0, pKa0= 0.00, ne= 0, nH= 0, rxn02 = -6.41, rxn04= -3.100, rxn08= -1.39 CONFORMER, GLU02: Em0= 0.0, pKa0= 0.00, ne= 0, nH= 0, rxn02 = -6.44, rxn04= -3.100, rxn08= -1.39 CONFORMER, GLU-1: Em0= 0.0, pKa0= 4.75, ne= 0, nH=-1, rxn02 =-41.76, rxn04=-20.200, rxn08= -9.59 Each conformer defined in CONFLIST except backbone and dummy conformers should have a line in this section. It defines some necessary conformer properties. The key is parameter name and conformer. The value consists fields separated by commas. Each field is a key value pair. Em0: Redox titration midpoint potential of the molecule in solution. pKa0: pH titration mid point of the molecule in solution ne: relative number of electrons. For a redox reaction, the ground state has ne = 0, the excited state has a ne of none 0. nH: relative number of protons. For a protonation reaction, the ground state has nH = 0, charged acid loses a proton so nH = -1 and charged base gains a proton so nH = 1. rxn02: reference reaction field energy at dielectric constant 2. rxn04: reference reaction field energy at dielectric constant 4. rxn08: reference reaction field energy at dielectric constant 8.","title":"Conformer parameters"},{"location":"newftpl/#rotatable-bonds","text":"Example: ROTATE, GLU: \" CA \" - \" CB \", \" CB \" - \" CG \", \" CG \" - \" CD \" This is an optional parameter. The key is parameter name and residue name. Different conformer types are not configured to have different bond rotations. The key is a series of rotatable bonds. Each rotatable bond is defined by two atoms, and these two atoms are directional. The direction means when a bond rotation is made, the first atom is stationary, and the second atom and all atoms connected to it in that direction will all rotate accordingly.","title":"Rotatable bonds"},{"location":"newftpl/#how-to-make-a-new-ftpl-file","text":"Although one can manually write all the parameter lines in ftpl file. There are tools to help making ftpl file much easier.","title":"How to make a new ftpl file"},{"location":"newftpl/#make-ftpl-file-template","text":"If you have a pdb file, you can build a ftpl file template out of it. Syntax: $ pdb2ftpl.py [-d] [-c ID] pdbfile The command will use CONECT record in pdb file to find bonds when available. If CONECT does not exist, the program will switch to distance calculated by atom coordinates to make bonds. The switch \"-d\" forces the program to use distance to make bonds. The switch \"-c ID\" lets the program to use a different 2-character conformer ID. By default, the ID is 01.","title":"Make ftpl file template"},{"location":"newftpl/#obtain-atom-charges","text":"One way to compute atomic charge is through Atomic Charge Calculator at https://webchem.ncbr.muni.cz/Platform/ChargeCalculator You can specify non-0 total charge of the molecule with this tool.","title":"Obtain atom charges"},{"location":"newftpl/#calculate-reference-reaction-field-energy","text":"Once you assign the atomic charges to the atoms in the ftpl file template and name it with suffix .ftpl, copy this file to the mcce param directory under its installation folder. The installation directory is where the mcce program is. For example, you find the location of mcce executable: $ which mcce /home/jmao/projects/Stable-MCCE/bin/mcce Then the param directory is: $ ls /home/jmao/projects/Stable-MCCE/param 00always_needed.tpl asn.ftpl _cl.ftpl ena.ftpl gly.ftpl ile.ftpl mel.ftpl ntr.ftpl ser.ftpl tyr.ftpl 7MQ.ftpl asp.ftpl ctr.ftpl for.ftpl hil.ftpl leu.ftpl mem.ftpl pdbs step1_out.pdb val.ftpl ala.ftpl bcl.ftpl cyd.ftpl gln.ftpl his.ftpl lys.ftpl met.ftpl phe.ftpl thr.ftpl _zn.ftpl arg.ftpl bcr.ftpl cys.ftpl glu.ftpl hoh.ftpl mcce.tpl _na.ftpl pro.ftpl trp.ftpl This is the directory ftpl files are stored.","title":"Calculate reference reaction field energy"},{"location":"newftpl/#examples-of-making-ftpl-file","text":"Here are some examples of making new ftpl file for molecules:","title":"Examples of making ftpl file"},{"location":"newftpl/#single-state","text":"This example prepares a ftpl file for a molecule with one single state. That is, no inozation conformer, no dummy conformer. Ethanol: CH3CH2OH","title":"Single state"},{"location":"newftpl/#step-1-get-pdb-file","text":"Goto RSCB ligand expo http://ligand-expo.rcsb.org/ Search Ethanol as molecule name from http://ligand-expo.rcsb.org/ . Download the pdb file of ethanol EOH_ideal.pdb. or use this command to download directly $ wget http://ligand-expo.rcsb.org/reports/E/EOH/EOH_ideal.pdb","title":"Step 1: Get pdb file"},{"location":"newftpl/#step-2-make-a-ftpl-file","text":"$ pdb2ftpl.py EOH_ideal.pdb > eoh.ftpl $ cat eoh.ftpl # Conformer definition CONFLIST, EOH: EOHBK, EOH01 # ATOM name and bonds CONNECT, \" C1 \", EOH01: sp3, \" C2 \",\" O \",\" H11\",\" H12\" CONNECT, \" C2 \", EOH01: sp3, \" C1 \",\" H21\",\" H22\",\" H23\" CONNECT, \" O \", EOH01: sp3, \" C1 \",\" HO \" CONNECT, \" H11\", EOH01: s, \" C1 \" CONNECT, \" H12\", EOH01: s, \" C1 \" CONNECT, \" H21\", EOH01: s, \" C2 \" CONNECT, \" H22\", EOH01: s, \" C2 \" CONNECT, \" H23\", EOH01: s, \" C2 \" CONNECT, \" HO \", EOH01: s, \" O \" # ATOM charges CHARGE, EOH01, \" C1 \": to_be_filled CHARGE, EOH01, \" C2 \": to_be_filled CHARGE, EOH01, \" O \": to_be_filled CHARGE, EOH01, \" H11\": to_be_filled CHARGE, EOH01, \" H12\": to_be_filled CHARGE, EOH01, \" H21\": to_be_filled CHARGE, EOH01, \" H22\": to_be_filled CHARGE, EOH01, \" H23\": to_be_filled CHARGE, EOH01, \" HO \": to_be_filled # Atom radius, dielelctric boundary radius, VDW radius, and energy well depth RADIUS, EOH01, \" C1 \": 1.700, 2.000, 0.150 RADIUS, EOH01, \" C2 \": 1.700, 2.000, 0.150 RADIUS, EOH01, \" O \": 1.400, 1.600, 0.200 RADIUS, EOH01, \" H11\": 1.000, 1.000, 0.020 RADIUS, EOH01, \" H12\": 1.000, 1.000, 0.020 RADIUS, EOH01, \" H21\": 1.000, 1.000, 0.020 RADIUS, EOH01, \" H22\": 1.000, 1.000, 0.020 RADIUS, EOH01, \" H23\": 1.000, 1.000, 0.020 RADIUS, EOH01, \" HO \": 1.000, 1.000, 0.020 # Conformer parameters that appear in head3.lst: ne, Em0, nH, pKa0, rxn CONFORMER, EOH01: Em0=0.0, pKa0=0.00, ne=0, nH=0, rxn02= to_be_filled, rxn04= to_be_filled, rxn08= to_be_filled","title":"Step 2: Make a ftpl file"},{"location":"newftpl/#step-3-calculate-charge","text":"Go to https://webchem.ncbr.muni.cz/Platform/ChargeCalculator Submit EOH_ideal.pdb, set total charge 0, and obtain the atomic charge results. Assign the charges to the previously made file eoh.ftpl # Conformer definition CONFLIST, EOH: EOHBK, EOH01 # ATOM name and bonds CONNECT, \" C1 \", EOH01: sp3, \" C2 \",\" O \",\" H11\",\" H12\" CONNECT, \" C2 \", EOH01: sp3, \" C1 \",\" H21\",\" H22\",\" H23\" CONNECT, \" O \", EOH01: sp3, \" C1 \",\" HO \" CONNECT, \" H11\", EOH01: s, \" C1 \" CONNECT, \" H12\", EOH01: s, \" C1 \" CONNECT, \" H21\", EOH01: s, \" C2 \" CONNECT, \" H22\", EOH01: s, \" C2 \" CONNECT, \" H23\", EOH01: s, \" C2 \" CONNECT, \" HO \", EOH01: s, \" O \" # ATOM charges CHARGE, EOH01, \" C1 \": -0.085 CHARGE, EOH01, \" C2 \": -0.554 CHARGE, EOH01, \" O \": -0.746 CHARGE, EOH01, \" H11\": 0.177 CHARGE, EOH01, \" H12\": 0.177 CHARGE, EOH01, \" H21\": 0.237 CHARGE, EOH01, \" H22\": 0.237 CHARGE, EOH01, \" H23\": 0.209 CHARGE, EOH01, \" HO \": 0.351 # Atom radius, dielelctric boundary radius, VDW radius, and energy well depth RADIUS, EOH01, \" C1 \": 1.700, 2.000, 0.150 RADIUS, EOH01, \" C2 \": 1.700, 2.000, 0.150 RADIUS, EOH01, \" O \": 1.400, 1.600, 0.200 RADIUS, EOH01, \" H11\": 1.000, 1.000, 0.020 RADIUS, EOH01, \" H12\": 1.000, 1.000, 0.020 RADIUS, EOH01, \" H21\": 1.000, 1.000, 0.020 RADIUS, EOH01, \" H22\": 1.000, 1.000, 0.020 RADIUS, EOH01, \" H23\": 1.000, 1.000, 0.020 RADIUS, EOH01, \" HO \": 1.000, 1.000, 0.020 # Conformer parameters that appear in head3.lst: ne, Em0, nH, pKa0, rxn CONFORMER, EOH01: Em0=0.0, pKa0=0.00, ne=0, nH=0, rxn02= 0, rxn04= 0, rxn08= 0","title":"Step 3: Calculate charge"},{"location":"newftpl/#step-4-install-ftpl-file","text":"Find the param/ location $ which mcce /home/jmao/projects/Stable-MCCE/bin/mcce Copy ftpl file to param/ $ cp eoh.ftpl /home/jmao/projects/Stable-MCCE/param","title":"Step 4: Install ftpl file"},{"location":"newftpl/#step-5-reaction-field-energy","text":"Starting with rxn02 = 0, rxn04 = 0, and rxn08 = 0, we are going to recalculate the proper reference values so that this molecule in solution gives 0 desolvation energy in self-energy file head3.lst. $ step1.py --noter EOH_ideal.pdb $ step2.py $ step3.py Then do cat head3.lst and find the number under dsolv, which is -4.076 in our case. The step 3 used default dielectric constant 4, so this value is for rxn04. Put this number back to eoh.ftpl file under param/ so it reads like: # Conformer parameters that appear in head3.lst: ne, Em0, nH, pKa0, rxn CONFORMER, EOH01: Em0=0.0, pKa0=0.00, ne=0, nH=0, rxn02= 0, rxn04= -4.076, rxn08= 0 If we run 3 steps again, we will get dsolv about 0 this time: $ step3.py $ cat head3.lst iConf CONFORMER FL occ crg Em0 pKa0 ne nH vdw0 vdw1 tors epol dsolv extra history 00001 EOH01A0001_001 f 0.00 0.003 0 0.00 0 0 0.677 0.000 0.000 0.000 0.004 0.000 01O000M000 t Next we need to do the same for rxn02 and rxn 08. Step3 will take epsilon as our command option this time. Dielectric constant 2 $ step3.py -d 2 $ cat head3.lst iConf CONFORMER FL occ crg Em0 pKa0 ne nH vdw0 vdw1 tors epol dsolv extra history 00001 EOH01A0001_001 f 0.00 0.003 0 0.00 0 0 0.677 0.000 0.000 0.000 -8.500 0.000 01O000M000 t Dielectric constant 8 $ step3.py -d 8 $ cat head3.lst iConf CONFORMER FL occ crg Em0 pKa0 ne nH vdw0 vdw1 tors epol dsolv extra history 00001 EOH01A0001_001 f 0.00 0.003 0 0.00 0 0 0.677 0.000 0.000 0.000 -1.875 0.000 01O000M000 t Put these numbers back to param/eoh.ftpl under installation folder, this line reads as: CONFORMER, EOH01: Em0=0.0, pKa0=0.00, ne=0, nH=0, rxn02= -8.5, rxn04= -4.076, rxn08= -1.875","title":"Step 5: Reaction field energy"},{"location":"newftpl/#protonation-or-redox-states","text":"What if a molecule has multiple ionization states? In short, we need to assign two conformer types and give atoms different charge sets. Example: Acetic acid: CH3COOH","title":"Protonation or redox states"},{"location":"newftpl/#prepare-pdb-files","text":"Goto RSCB ligand expo http://ligand-expo.rcsb.org/ Search \"acetic acid\" Click on Chemical details of ACY Download pdb file or $ wget http://ligand-expo.rcsb.org/reports/A/ACY/ACY_ideal.pdb This file is in protonated state: ATOM 1 C ACY A 1 0.012 -0.056 0.002 1.00 10.00 C ATOM 2 O ACY A 1 0.261 -1.238 -0.000 1.00 10.00 O ATOM 3 OXT ACY A 1 1.011 0.840 -0.000 1.00 10.00 O ATOM 4 CH3 ACY A 1 -1.421 0.412 -0.000 1.00 10.00 C ATOM 5 HXT ACY A 1 1.913 0.493 -0.003 1.00 10.00 H ATOM 6 H1 ACY A 1 -1.768 0.523 1.027 1.00 10.00 H ATOM 7 H2 ACY A 1 -1.489 1.372 -0.512 1.00 10.00 H ATOM 8 H3 ACY A 1 -2.042 -0.320 -0.517 1.00 10.00 H CONECT 1 2 3 4 CONECT 2 1 CONECT 3 1 5 CONECT 4 1 6 7 8 CONECT 5 3 CONECT 6 4 CONECT 7 4 CONECT 8 4 We need to make a pdb file in name ACY_deprotonated.pdb for deprotonated state by deleting HXT: ATOM 1 C ACY A 1 0.012 -0.056 0.002 1.00 10.00 C ATOM 2 O ACY A 1 0.261 -1.238 -0.000 1.00 10.00 O ATOM 3 OXT ACY A 1 1.011 0.840 -0.000 1.00 10.00 O ATOM 4 CH3 ACY A 1 -1.421 0.412 -0.000 1.00 10.00 C ATOM 6 H1 ACY A 1 -1.768 0.523 1.027 1.00 10.00 H ATOM 7 H2 ACY A 1 -1.489 1.372 -0.512 1.00 10.00 H ATOM 8 H3 ACY A 1 -2.042 -0.320 -0.517 1.00 10.00 H We also deleted CONECT because we dont want to manually fix CONECT due to the missing HXT.","title":"Prepare pdb files"},{"location":"newftpl/#make-ftpl-files","text":"create ftpl template for protonated acetic acid $ pdb2ftpl.py ACY_ideal.pdb > acy.ftpl create ftpl template for deprotonated acetic acid $ pdb2ftpl.py -c -1 ACY_deprotonated.pdb > acy-1.ftpl Merge two files. While CONFLIST maintains a single line, other parameters still take individual lines. # Conformer definition CONFLIST, ACY: ACYBK, ACY01, ACY-1 # ATOM name and bonds CONNECT, \" C \", ACY01: sp2, \" O \",\" OXT\",\" CH3\" CONNECT, \" O \", ACY01: sp3, \" C \" CONNECT, \" OXT\", ACY01: sp2, \" C \",\" HXT\" CONNECT, \" CH3\", ACY01: sp3, \" C \",\" H1 \",\" H2 \",\" H3 \" CONNECT, \" HXT\", ACY01: s, \" OXT\" CONNECT, \" H1 \", ACY01: s, \" CH3\" CONNECT, \" H2 \", ACY01: s, \" CH3\" CONNECT, \" H3 \", ACY01: s, \" CH3\" CONNECT, \" C \", ACY-1: sp2, \" O \",\" OXT\",\" CH3\" CONNECT, \" O \", ACY-1: sp3, \" C \" CONNECT, \" OXT\", ACY-1: sp3, \" C \" CONNECT, \" CH3\", ACY-1: sp3, \" C \",\" H1 \",\" H2 \",\" H3 \" CONNECT, \" H1 \", ACY-1: s, \" CH3\" CONNECT, \" H2 \", ACY-1: s, \" CH3\" CONNECT, \" H3 \", ACY-1: s, \" CH3\" # ATOM charges CHARGE, ACY01, \" C \": to_be_filled CHARGE, ACY01, \" O \": to_be_filled CHARGE, ACY01, \" OXT\": to_be_filled CHARGE, ACY01, \" CH3\": to_be_filled CHARGE, ACY01, \" HXT\": to_be_filled CHARGE, ACY01, \" H1 \": to_be_filled CHARGE, ACY01, \" H2 \": to_be_filled CHARGE, ACY01, \" H3 \": to_be_filled CHARGE, ACY-1, \" C \": to_be_filled CHARGE, ACY-1, \" O \": to_be_filled CHARGE, ACY-1, \" OXT\": to_be_filled CHARGE, ACY-1, \" CH3\": to_be_filled CHARGE, ACY-1, \" H1 \": to_be_filled CHARGE, ACY-1, \" H2 \": to_be_filled CHARGE, ACY-1, \" H3 \": to_be_filled # Atom radius, dielelctric boundary radius, VDW radius, and energy well depth RADIUS, ACY01, \" C \": 1.700, 2.000, 0.150 RADIUS, ACY01, \" O \": 1.400, 1.600, 0.200 RADIUS, ACY01, \" OXT\": 1.400, 1.600, 0.200 RADIUS, ACY01, \" CH3\": 1.700, 2.000, 0.150 RADIUS, ACY01, \" HXT\": 1.000, 1.000, 0.020 RADIUS, ACY01, \" H1 \": 1.000, 1.000, 0.020 RADIUS, ACY01, \" H2 \": 1.000, 1.000, 0.020 RADIUS, ACY01, \" H3 \": 1.000, 1.000, 0.020 RADIUS, ACY-1, \" C \": 1.700, 2.000, 0.150 RADIUS, ACY-1, \" O \": 1.400, 1.600, 0.200 RADIUS, ACY-1, \" OXT\": 1.400, 1.600, 0.200 RADIUS, ACY-1, \" CH3\": 1.700, 2.000, 0.150 RADIUS, ACY-1, \" H1 \": 1.000, 1.000, 0.020 RADIUS, ACY-1, \" H2 \": 1.000, 1.000, 0.020 RADIUS, ACY-1, \" H3 \": 1.000, 1.000, 0.020 # Conformer parameters that appear in head3.lst: ne, Em0, nH, pKa0, rxn CONFORMER, ACY01: Em0=0.0, pKa0=0.00, ne=0, nH=0, rxn02= 0, rxn04= 0, rxn08= 0 CONFORMER, ACY-1: Em0=0.0, pKa0=0.00, ne=0, nH=0, rxn02= 0, rxn04= 0, rxn08= 0","title":"Make ftpl files"},{"location":"newftpl/#calculate-charge","text":"Go to https://webchem.ncbr.muni.cz/Platform/ChargeCalculator Submit ACY_ideal.pdb, set total charge 0, and obtain the atomic charge results. Submit ACY_deprotonated.pdb, set total charge -1, and obtain the atomic charge results. Assign the charges to acy.ftpl file: take individual lines. # Conformer definition CONFLIST, ACY: ACYBK, ACY01, ACY-1 # ATOM name and bonds CONNECT, \" C \", ACY01: sp2, \" O \",\" OXT\",\" CH3\" CONNECT, \" O \", ACY01: sp3, \" C \" CONNECT, \" OXT\", ACY01: sp2, \" C \",\" HXT\" CONNECT, \" CH3\", ACY01: sp3, \" C \",\" H1 \",\" H2 \",\" H3 \" CONNECT, \" HXT\", ACY01: s, \" OXT\" CONNECT, \" H1 \", ACY01: s, \" CH3\" CONNECT, \" H2 \", ACY01: s, \" CH3\" CONNECT, \" H3 \", ACY01: s, \" CH3\" CONNECT, \" C \", ACY-1: sp2, \" O \",\" OXT\",\" CH3\" CONNECT, \" O \", ACY-1: sp3, \" C \" CONNECT, \" OXT\", ACY-1: sp3, \" C \" CONNECT, \" CH3\", ACY-1: sp3, \" C \",\" H1 \",\" H2 \",\" H3 \" CONNECT, \" H1 \", ACY-1: s, \" CH3\" CONNECT, \" H2 \", ACY-1: s, \" CH3\" CONNECT, \" H3 \", ACY-1: s, \" CH3\" # ATOM charges CHARGE, ACY01, \" C \": 0.680 CHARGE, ACY01, \" O \": -0.590 CHARGE, ACY01, \" OXT\": -0.774 CHARGE, ACY01, \" CH3\": -0.606 CHARGE, ACY01, \" HXT\": 0.433 CHARGE, ACY01, \" H1 \": 0.283 CHARGE, ACY01, \" H2 \": 0.287 CHARGE, ACY01, \" H3 \": 0.287 CHARGE, ACY-1, \" C \": 0.577 CHARGE, ACY-1, \" O \": -0.768 CHARGE, ACY-1, \" OXT\": -0.699 CHARGE, ACY-1, \" CH3\": -0.714 CHARGE, ACY-1, \" H1 \": 0.198 CHARGE, ACY-1, \" H2 \": 0.202 CHARGE, ACY-1, \" H3 \": 0.204 # Atom radius, dielelctric boundary radius, VDW radius, and energy well depth RADIUS, ACY01, \" C \": 1.700, 2.000, 0.150 RADIUS, ACY01, \" O \": 1.400, 1.600, 0.200 RADIUS, ACY01, \" OXT\": 1.400, 1.600, 0.200 RADIUS, ACY01, \" CH3\": 1.700, 2.000, 0.150 RADIUS, ACY01, \" HXT\": 1.000, 1.000, 0.020 RADIUS, ACY01, \" H1 \": 1.000, 1.000, 0.020 RADIUS, ACY01, \" H2 \": 1.000, 1.000, 0.020 RADIUS, ACY01, \" H3 \": 1.000, 1.000, 0.020 RADIUS, ACY-1, \" C \": 1.700, 2.000, 0.150 RADIUS, ACY-1, \" O \": 1.400, 1.600, 0.200 RADIUS, ACY-1, \" OXT\": 1.400, 1.600, 0.200 RADIUS, ACY-1, \" CH3\": 1.700, 2.000, 0.150 RADIUS, ACY-1, \" H1 \": 1.000, 1.000, 0.020 RADIUS, ACY-1, \" H2 \": 1.000, 1.000, 0.020 RADIUS, ACY-1, \" H3 \": 1.000, 1.000, 0.020 # Conformer parameters that appear in head3.lst: ne, Em0, nH, pKa0, rxn CONFORMER, ACY01: Em0=0.0, pKa0=0.00, ne=0, nH=0, rxn02= 0, rxn04= 0, rxn08= 0 CONFORMER, ACY-1: Em0=0.0, pKa0=0.00, ne=0, nH=0, rxn02= 0, rxn04= 0, rxn08= 0","title":"Calculate charge"},{"location":"newftpl/#install-ftpl-file","text":"User made ftpl files are called custom ftpl files. They should be placed under ./user_param of working directory. If this directory doesn't exist, create one. The ftpl files under ./user_param supercsede the system ftpl files so you can overwrite system ftpl files with your own. Within this directory, files are read in based on alphabetic order. Copy ftpl file to ./user_param/ $ cp acy.ftpl ./user_param","title":"Install ftpl file"},{"location":"newftpl/#reaction-field-energy","text":"Run step 1 to 3: $ step1.py --noter ACY_ideal.pdb $ step2.py $ step3.py -d 2 $ cat head3.lst iConf CONFORMER FL occ crg Em0 pKa0 ne nH vdw0 vdw1 tors epol dsolv extra history 00001 ACY01A0001_001 f 0.00 0.000 0 0.00 0 0 0.497 0.000 0.000 0.000 -11.413 0.000 01O000M000 t 00002 ACY-1A0001_002 f 0.00 -1.000 0 0.00 0 0 0.180 0.000 0.000 0.000 -47.119 0.000 -1O000M000 t $ step3.py -d 4 $ cat head3.lst iConf CONFORMER FL occ crg Em0 pKa0 ne nH vdw0 vdw1 tors epol dsolv extra history 00001 ACY01A0001_001 f 0.00 0.000 0 0.00 0 0 0.497 0.000 0.000 0.000 -5.495 0.000 01O000M000 t 00002 ACY-1A0001_002 f 0.00 -1.000 0 0.00 0 0 0.180 0.000 0.000 0.000 -22.902 0.000 -1O000M000 t $ step3.py -d 8 $ cat head3.lst iConf CONFORMER FL occ crg Em0 pKa0 ne nH vdw0 vdw1 tors epol dsolv extra history 00001 ACY01A0001_001 f 0.00 0.000 0 0.00 0 0 0.497 0.000 0.000 0.000 -2.548 0.000 01O000M000 t 00002 ACY-1A0001_002 f 0.00 -1.000 0 0.00 0 0 0.180 0.000 0.000 0.000 -10.801 0.000 -1O000M000 t Put the values back in /path/to/param/acy.ftpl, set nH=-1 because this conformer loses a proton, and set pKa0 =4.75 as this is acetic acid pKa. # Conformer parameters that appear in head3.lst: ne, Em0, nH, pKa0, rxn CONFORMER, ACY01: Em0=0.0, pKa0=0.00, ne=0, nH=0, rxn02= -11.413, rxn04= -5.495, rxn08= -2.548 CONFORMER, ACY-1: Em0=0.0, pKa0=4.75, ne=0, nH=-1, rxn02= -47.119, rxn04= -22.902, rxn08= -10.801","title":"Reaction field energy"},{"location":"pkaexample/","text":"Calculate pKas of Lysozyme \u00b6 Page last updated on: 2020-08-06 Background \u00b6 Lysozyme is a small enzyme that dissolves bacterial cell walls thus kills bacteria. It was discovered as the first antibiotic to inhibit bacteria growth in food, before penicillin. Crystal structure of hen egg white lysozyme - PDB ID 4LZT The experimental pKas of all Lysozyme residues is provided at the bottom of this tutorial. Here we will focus on two residues in the active site that have perturbed pKas. Residue GLU 35 and ASP 52 are in the active sites. The pKas of these two residues play an important role in the enzyme's activity. In order for lysozyme to attack the glucose molecule of the substrate, GLU needs a high pKa and ASP 52 a low pKa. GLU 35 acts as a proton donor, cutting the glucose with protonation of the glycosidic oxygen and a deprotonated ASP 52 stabilizes the highly charged intermediate, making the reaction easier. Jens Erik Nielsen and J. Andrew McCammon, Protein Sci. 2003 Sep; 12(9): 1894\u20131901 Prepare the calculation \u00b6 After the program is installed and the environment variable PATH is configured (see link for details), make a working directory and go to the directory. MCCE will generate intermediate files and result files in the current directory, so it's best to prepare one directory for each calculation on one structure. $ mkdir 4lzt $ cd 4lzt Then download pdb file 4LZT from rscb.org to the working directory: jmao@jmao-desktop ~/4lzt $ getpdb 4lzt Saving as 4LZT.pdb ... Download completed. Explicit water in pdb file. We suggest removing explicit waters from the input pdb file. The protonation states and pKas with and without are similar, but without waters the calculation is much faster. grep -v HOH 4LZT.peb > 4LZT_noHOH.pdb Run 4 steps of MCCE \u00b6 MCCE expects to be run in a single directory with only one calculation in that directory. There are 4 steps. Each step expects the output from the previous steps. You can rerun later steps without running from the beginning. E.g. if you have run steps 1-4 you can rerun step 4. This will overwrite the original step4. Step 1. Convert PDB file into MCCE PDB \u00b6 Step 1. Check for inconsistencies between PDB file and MCCE topology files. Missing sidechain atoms will be added back. Residues that are not in the MCCE lexicon will be flagged. Explicit waters with greater than 5% surface exposure will be stripped off. Chain termini are separated to be NTR and CTR and are treated as protonatable. Other changes in residue naming are made using name.txt. $ step1.py 4LZT.pdb This command generates step1_out.pdb which is required for step 2. Step 2. Make side chain conformers \u00b6 This step makes alternative side chain locations and ionization states. $ step2.py This command generates step2_out.pdb which is required of step 3. If you want to know the help information and other options of this command: $ step2.py -h Step 3. Make energy table \u00b6 This step calculates conformer self energy and pairwise interaction table. $ step3.py This command generates opp files under energies/ folder and file head3.lst which are required of step 4. If you want to know the help information and other options of this command: $ step3.py -h Step 4. Simulate a titration with Monte Carlo sampling \u00b6 This step simulates a titration and writes out the conformation and ionization states of each side chain at various conditions. $ step4.py --xts fort.38. is the primary output file. It gives the average occupancy of each conformer. sum_crg.out give the net charge on all residues. Residues where all conformers have a zero charge are not reported in this file. pK.out calculates the best single pKa for each residue given the change in charge with pH in sum_crg.out. Results \u00b6 The pKa report is in file pK.out. $ cat pK.out From the result, GLU 35 (pKa = 5.13) has a higher pKa than ASP 52 (pKa = 3.33). To analyze the ionization energy of an ionizable residue at the mid point pH=5.13 with pairwise cutoff 0.1: $ mfe.py ASP-A0052_ -c 0.1 To analyze the ionization energy of this residue pH 7 with pairwise cutoff 0.1: $ mfe.py ASP-A0052_ -p 7 -c 0.1 A more detailed explanation of mfe.py program can be found here Benchmark pKas for Lysozyme \u00b6 There are 20 experimentally measured pKas in hen white lysozyme. Bartik, K., C. Redfield, and C.M. Dobson, Biophys J, 1994. 66(4): p. 1180-4. Kuramitsu, S. and K. Hamaguchi, J Biochem (Tokyo), 1980. 87(4): p. 1215-9. Takahashi, T., H. Nakamura, and A. Wada, Biopolymers, 1992. 32: p. 897-909. These pKa values have been used to benchmark MCCE and other programs that calculate pKas. For example: Sham, Y. Y., I. Muegge, and A. Warshel. 1999. Simulating proton trans- locations in proteins: probing proton transfer pathways in the Rhodobacter sphaeroides reaction center. Proteins. 36:484\u2013500. You, T. J., and D. Bashford. 1995. Conformation and hydrogen ion titration of proteins: a continuum electrostatic model with conformational flexi- bility. Biophys. J. 69:1721\u20131733. Antosiewicz, J., J. A. McCammon, and M. K. Gilson. 1996. The determi- nants of pKa\u2019s in proteins. Biochemistry. 35:7819\u20137833. pKas of residues in Lysozyme \u00b6 Residue pKa LYS 1 10.8 GLU 7 2.85 LYS 13 10.5 HIS 15 5.36 ASP 18 2.66 TYR 20 10.3 TYR 23 9.8 LYS 33 10.4 GLU 35 6.2 ASP 48 1.6 ASP 52 3.68 ASP 66 0.9 ASP 87 2.07 LYS 96 10.8 LYS 97 10.3 ASP 101 4.08 LYS 116 10.2 ASP 119 3.2 CTR 2.75","title":"pKa calculation"},{"location":"pkaexample/#calculate-pkas-of-lysozyme","text":"Page last updated on: 2020-08-06","title":"Calculate pKas of Lysozyme"},{"location":"pkaexample/#background","text":"Lysozyme is a small enzyme that dissolves bacterial cell walls thus kills bacteria. It was discovered as the first antibiotic to inhibit bacteria growth in food, before penicillin. Crystal structure of hen egg white lysozyme - PDB ID 4LZT The experimental pKas of all Lysozyme residues is provided at the bottom of this tutorial. Here we will focus on two residues in the active site that have perturbed pKas. Residue GLU 35 and ASP 52 are in the active sites. The pKas of these two residues play an important role in the enzyme's activity. In order for lysozyme to attack the glucose molecule of the substrate, GLU needs a high pKa and ASP 52 a low pKa. GLU 35 acts as a proton donor, cutting the glucose with protonation of the glycosidic oxygen and a deprotonated ASP 52 stabilizes the highly charged intermediate, making the reaction easier. Jens Erik Nielsen and J. Andrew McCammon, Protein Sci. 2003 Sep; 12(9): 1894\u20131901","title":"Background"},{"location":"pkaexample/#prepare-the-calculation","text":"After the program is installed and the environment variable PATH is configured (see link for details), make a working directory and go to the directory. MCCE will generate intermediate files and result files in the current directory, so it's best to prepare one directory for each calculation on one structure. $ mkdir 4lzt $ cd 4lzt Then download pdb file 4LZT from rscb.org to the working directory: jmao@jmao-desktop ~/4lzt $ getpdb 4lzt Saving as 4LZT.pdb ... Download completed. Explicit water in pdb file. We suggest removing explicit waters from the input pdb file. The protonation states and pKas with and without are similar, but without waters the calculation is much faster. grep -v HOH 4LZT.peb > 4LZT_noHOH.pdb","title":"Prepare the calculation"},{"location":"pkaexample/#run-4-steps-of-mcce","text":"MCCE expects to be run in a single directory with only one calculation in that directory. There are 4 steps. Each step expects the output from the previous steps. You can rerun later steps without running from the beginning. E.g. if you have run steps 1-4 you can rerun step 4. This will overwrite the original step4.","title":"Run 4 steps of MCCE"},{"location":"pkaexample/#step-1-convert-pdb-file-into-mcce-pdb","text":"Step 1. Check for inconsistencies between PDB file and MCCE topology files. Missing sidechain atoms will be added back. Residues that are not in the MCCE lexicon will be flagged. Explicit waters with greater than 5% surface exposure will be stripped off. Chain termini are separated to be NTR and CTR and are treated as protonatable. Other changes in residue naming are made using name.txt. $ step1.py 4LZT.pdb This command generates step1_out.pdb which is required for step 2.","title":"Step 1. Convert PDB file into MCCE PDB"},{"location":"pkaexample/#step-2-make-side-chain-conformers","text":"This step makes alternative side chain locations and ionization states. $ step2.py This command generates step2_out.pdb which is required of step 3. If you want to know the help information and other options of this command: $ step2.py -h","title":"Step 2. Make side chain conformers"},{"location":"pkaexample/#step-3-make-energy-table","text":"This step calculates conformer self energy and pairwise interaction table. $ step3.py This command generates opp files under energies/ folder and file head3.lst which are required of step 4. If you want to know the help information and other options of this command: $ step3.py -h","title":"Step 3. Make energy table"},{"location":"pkaexample/#step-4-simulate-a-titration-with-monte-carlo-sampling","text":"This step simulates a titration and writes out the conformation and ionization states of each side chain at various conditions. $ step4.py --xts fort.38. is the primary output file. It gives the average occupancy of each conformer. sum_crg.out give the net charge on all residues. Residues where all conformers have a zero charge are not reported in this file. pK.out calculates the best single pKa for each residue given the change in charge with pH in sum_crg.out.","title":"Step 4. Simulate a titration with Monte Carlo sampling"},{"location":"pkaexample/#results","text":"The pKa report is in file pK.out. $ cat pK.out From the result, GLU 35 (pKa = 5.13) has a higher pKa than ASP 52 (pKa = 3.33). To analyze the ionization energy of an ionizable residue at the mid point pH=5.13 with pairwise cutoff 0.1: $ mfe.py ASP-A0052_ -c 0.1 To analyze the ionization energy of this residue pH 7 with pairwise cutoff 0.1: $ mfe.py ASP-A0052_ -p 7 -c 0.1 A more detailed explanation of mfe.py program can be found here","title":"Results"},{"location":"pkaexample/#benchmark-pkas-for-lysozyme","text":"There are 20 experimentally measured pKas in hen white lysozyme. Bartik, K., C. Redfield, and C.M. Dobson, Biophys J, 1994. 66(4): p. 1180-4. Kuramitsu, S. and K. Hamaguchi, J Biochem (Tokyo), 1980. 87(4): p. 1215-9. Takahashi, T., H. Nakamura, and A. Wada, Biopolymers, 1992. 32: p. 897-909. These pKa values have been used to benchmark MCCE and other programs that calculate pKas. For example: Sham, Y. Y., I. Muegge, and A. Warshel. 1999. Simulating proton trans- locations in proteins: probing proton transfer pathways in the Rhodobacter sphaeroides reaction center. Proteins. 36:484\u2013500. You, T. J., and D. Bashford. 1995. Conformation and hydrogen ion titration of proteins: a continuum electrostatic model with conformational flexi- bility. Biophys. J. 69:1721\u20131733. Antosiewicz, J., J. A. McCammon, and M. K. Gilson. 1996. The determi- nants of pKa\u2019s in proteins. Biochemistry. 35:7819\u20137833.","title":"Benchmark pKas for Lysozyme"},{"location":"pkaexample/#pkas-of-residues-in-lysozyme","text":"Residue pKa LYS 1 10.8 GLU 7 2.85 LYS 13 10.5 HIS 15 5.36 ASP 18 2.66 TYR 20 10.3 TYR 23 9.8 LYS 33 10.4 GLU 35 6.2 ASP 48 1.6 ASP 52 3.68 ASP 66 0.9 ASP 87 2.07 LYS 96 10.8 LYS 97 10.3 ASP 101 4.08 LYS 116 10.2 ASP 119 3.2 CTR 2.75","title":"pKas of residues in Lysozyme"},{"location":"quick/","text":"MCCE quick start \u00b6 Page last updated on: 2020-12-04 Get the code \u00b6 MCCE runs on Linux and Mac OSX natively, on Windows in its Linux subsystem. Follow How to install WSL to install Linux Subsystem if you don't have one. Install with conda \u00b6 The mcce program comes with many small programs and tool scripts, so it is recommended to run mcce in a separate conda environment. Suppose we will run mcce under environment \"mcce\": One-time setup of the environment: conda create -n mcce conda activate mcce Install mcce: conda install -c newbooks mcce To exit conda mcce environment: conda deactivate Install from source \u00b6 Of for some reason, installation of mcce from conda didn't work, you can install from the source. Prerequisites \u00b6 Compilers: C, gfortran The C and gfortran compilers usually come with your operating system. If not, use the package manager to install. On Ubuntu Linux: $ sudo apt-get update $ sudo apt-get upgrade $ sudo apt-get install build-essential $ sudo apt-get install gfortran On Mac OS X: For Mac users, the gcc compiler comes with Xcode from the App store. Once Xcode is installed, install command line tools. This provides gcc. Gfortran is avalaible from https://github.com/fxcoudert/gfortran-for-macOS/releases , find your Mac OS X version and install appropriate gfortran package. Python and modules We need Python3 and optionally these modules: numpy, scipy, matplotlib, pygraphviz, pandas, xlrd, and openpyxl Install Miniconda Python3: https://docs.conda.io/en/latest/miniconda.html After installing Miniconda, install these optional modules for data analysis: conda install numpy scipy matplotlib pygraphviz pandas xlrd openpyxl Download from github \u00b6 Under a terminal window, run: git clone https://github.com/GunnerLab/Stable-MCCE.git Compile the code \u00b6 The above command creates a directory named Stable-MCCE, enter the directory and compile: $ cd Stable-MCCE $ make clean $ make Configure environment: Find the path of Stable-MCCE installation directory: (base) jmao@pc:~/projects/Stable-MCCE$ pwd /home/jmao/projects/Stable-MCCE In my case the installation directory is /home/jmao/projects/Stable-MCCE/ Add the executable to your path: export PATH=/home/jmao/projects/Stable-MCCE/bin:$PATH Remember to replace the installation directory /home/jmao/projects/Stable-MCCE/ with your own installation path. Also put this line at the end of .bashrc file under your home directory so that the environment is properly set every time you open a terminal window. Run MCCE \u00b6 Prepare a working directory: \u00b6 $ mkdir test_lysozyme $ cd test_lysozyme Get a pdb file \u00b6 $ getpdb 1dpx You now have a pdb file 1DPX.pdb in the working directory. The simplest way to run mcce is do these four steps: Step 1 convert PDB file into MCCE PDB \u00b6 This step proof reads the structure file and cuts terminal residues and complex cofactors into smaller ones if necessary. $ step1.py 1DPX.pdb If this step quits and complain about unrecognized residues, please refere to the section of making new paramter files . Step 2 make side chain conformers \u00b6 This step makes alternative side chain locations and ionization states. $ step2.py Step 3 make energy table \u00b6 This step calculates conformer self energy and pairwise interaction table. $ step3.py Step 4 Simulate a titration with Monte Carlo sampling \u00b6 This step simulates a titration and writes out the conformation and ionization states of each side chain at various conditions. $ step4.py Notes \u00b6 Command help \"-h\" \u00b6 For more detailed command usages, use \"-h\" switch in each command above. Run in background \u00b6 Some steps take hours to finish, so it is recommended to run at the background. For example: step3.py > run.log & Jupyter notebook \u00b6 Here is a Jupiter note book template: mcce.ipynb","title":"Quick Start"},{"location":"quick/#mcce-quick-start","text":"Page last updated on: 2020-12-04","title":"MCCE quick start"},{"location":"quick/#get-the-code","text":"MCCE runs on Linux and Mac OSX natively, on Windows in its Linux subsystem. Follow How to install WSL to install Linux Subsystem if you don't have one.","title":"Get the code"},{"location":"quick/#install-with-conda","text":"The mcce program comes with many small programs and tool scripts, so it is recommended to run mcce in a separate conda environment. Suppose we will run mcce under environment \"mcce\": One-time setup of the environment: conda create -n mcce conda activate mcce Install mcce: conda install -c newbooks mcce To exit conda mcce environment: conda deactivate","title":"Install with conda"},{"location":"quick/#install-from-source","text":"Of for some reason, installation of mcce from conda didn't work, you can install from the source.","title":"Install from source"},{"location":"quick/#prerequisites","text":"Compilers: C, gfortran The C and gfortran compilers usually come with your operating system. If not, use the package manager to install. On Ubuntu Linux: $ sudo apt-get update $ sudo apt-get upgrade $ sudo apt-get install build-essential $ sudo apt-get install gfortran On Mac OS X: For Mac users, the gcc compiler comes with Xcode from the App store. Once Xcode is installed, install command line tools. This provides gcc. Gfortran is avalaible from https://github.com/fxcoudert/gfortran-for-macOS/releases , find your Mac OS X version and install appropriate gfortran package. Python and modules We need Python3 and optionally these modules: numpy, scipy, matplotlib, pygraphviz, pandas, xlrd, and openpyxl Install Miniconda Python3: https://docs.conda.io/en/latest/miniconda.html After installing Miniconda, install these optional modules for data analysis: conda install numpy scipy matplotlib pygraphviz pandas xlrd openpyxl","title":"Prerequisites"},{"location":"quick/#download-from-github","text":"Under a terminal window, run: git clone https://github.com/GunnerLab/Stable-MCCE.git","title":"Download from github"},{"location":"quick/#compile-the-code","text":"The above command creates a directory named Stable-MCCE, enter the directory and compile: $ cd Stable-MCCE $ make clean $ make Configure environment: Find the path of Stable-MCCE installation directory: (base) jmao@pc:~/projects/Stable-MCCE$ pwd /home/jmao/projects/Stable-MCCE In my case the installation directory is /home/jmao/projects/Stable-MCCE/ Add the executable to your path: export PATH=/home/jmao/projects/Stable-MCCE/bin:$PATH Remember to replace the installation directory /home/jmao/projects/Stable-MCCE/ with your own installation path. Also put this line at the end of .bashrc file under your home directory so that the environment is properly set every time you open a terminal window.","title":"Compile the code"},{"location":"quick/#run-mcce","text":"","title":"Run MCCE"},{"location":"quick/#prepare-a-working-directory","text":"$ mkdir test_lysozyme $ cd test_lysozyme","title":"Prepare a working directory:"},{"location":"quick/#get-a-pdb-file","text":"$ getpdb 1dpx You now have a pdb file 1DPX.pdb in the working directory. The simplest way to run mcce is do these four steps:","title":"Get a pdb file"},{"location":"quick/#step-1-convert-pdb-file-into-mcce-pdb","text":"This step proof reads the structure file and cuts terminal residues and complex cofactors into smaller ones if necessary. $ step1.py 1DPX.pdb If this step quits and complain about unrecognized residues, please refere to the section of making new paramter files .","title":"Step 1 convert PDB file into MCCE PDB"},{"location":"quick/#step-2-make-side-chain-conformers","text":"This step makes alternative side chain locations and ionization states. $ step2.py","title":"Step 2 make side chain conformers"},{"location":"quick/#step-3-make-energy-table","text":"This step calculates conformer self energy and pairwise interaction table. $ step3.py","title":"Step 3 make energy table"},{"location":"quick/#step-4-simulate-a-titration-with-monte-carlo-sampling","text":"This step simulates a titration and writes out the conformation and ionization states of each side chain at various conditions. $ step4.py","title":"Step 4 Simulate a titration with Monte Carlo sampling"},{"location":"quick/#notes","text":"","title":"Notes"},{"location":"quick/#command-help-h","text":"For more detailed command usages, use \"-h\" switch in each command above.","title":"Command help \"-h\""},{"location":"quick/#run-in-background","text":"Some steps take hours to finish, so it is recommended to run at the background. For example: step3.py > run.log &","title":"Run in background"},{"location":"quick/#jupyter-notebook","text":"Here is a Jupiter note book template: mcce.ipynb","title":"Jupyter notebook"},{"location":"runprm/","text":"How to customize run.prm, the run configuration file? \u00b6 Page last updated on: 2020-05-19 The mcce program reads file run.prm from the working directory and runs according to its instructions. The two ways that run mcce are: customize run.prm and call mcce directly run step1.py, step2.py, step3.py, are step4.py as wrappers of mcce. run.prm format \u00b6 The valid parameters are defined as a key-value pair, defined by a line. At the end of the line, the key string word is enclosed in a pair of parenthesis. The key string must be one word. If a key is detected from a line, the first word of the line is its value. For example: f step 1: pre-run, pdb-> mcce pdb (DO_PREMCCE) The key is \"DO_MCCE\" and the value is \"f\". Lines other than parameter lines are considered as comment lines, therefore ignored. Most commonly edited entries \u00b6 Input and output \u00b6 prot.pdb (INPDB) Th parameter \"INPDB\" specifies a pdb file as the initial input structure. Major mcce steps \u00b6 MCCE can be divided into four steps. The steps have keys: DO_PREMCCE DO_ROTAMERS DO_ENERGY DO_MONTE The value 't' is for true (do), and 'f' is for false (not do). Steps: f step 1: pre-run, pdb-> mcce pdb (DO_PREMCCE) f step 2: make rotatmers (DO_ROTAMERS) f step 3: do energy calculations (DO_ENERGY) f step 4: monte carlo sampling (DO_MONTE) The later step depends on the out put of previous step. Less edited entries \u00b6 Step 2 and step 4 have more flexibility and are customized more often than others. General \u00b6 4.0 Protein dielectric constant for DelPhi (EPSILON_PROT) Dielectric constant of protein. Usually epsilon 8 is used for small soluble protein (~100 residues), and 4 is used for big trans-membrane protein (> 200 residues). This value is used by step 2 to optimize rotamers and step 3 to compute energy table. /home/mcce/Stable-MCCE/extra.tpl (EXTRA) This file contains entries that overwrite those defined in ftpl and tpl files in param/ directory, and extral controls over the program. The extra controls are in two categories: offset energy of ionizable residues. These energy corrects the residue solution pKa values based on previous benchmarks. The scaling factor of van der Walls energy term. The recommended values are the inverse of dielectric constant defined by EPSILON_PROT. /home/mcce/Stable-MCCE/name.txt MCCE renaming rule. (RENAME_RULES) The renaming rule can divide a big group into separate ionizable groups. put ligands and cofactor as one group. This is done by renaming the atom and residue. Step 2, Rotamer making \u00b6 f Use control file \"head1.lst\" for rotamer making (ROT_SPECIF) This file enables site specific rotamer making rules. When set as \"t\", it overwrites the rules defined by run.prm. t Do swap (stereo isotope) (ROT_SWAP) Make stereo isotope conformers for residues like GLN and ASN. t Do rotate? (PACK) Rotate around rotatable bonds? 6 number of rotamers in a bond rotation (ROTATIONS) Number of rotamers in a bond rotation. Step 4, Monte Carlo sampling \u00b6 ph \"ph\" for pH titration, \"eh\" for eh titration (TITR_TYPE) The type of simulation, pH or Eh. 0.0 Initial pH (TITR_PH0) The starting pH, or the pH of Eh titration. 1.0 pH interval (TITR_PHD) The interval of pH titration 0.0 Initial Eh (TITR_EH0) The starting Eh, or the Eh of pH titration. 30.0 Eh interval (in mV) (TITR_EHD) The interval of Eh titration. 15 Number of titration points (TITR_STEPS) Number of titration points. f Output Microstate from standard monte carlo (MS_OUT) f Output readable micristate file from standard monte carlo (RE_MS_OUT) Write out microstates or not. System specific entries \u00b6 These entries are tailored to the system and installation. System and installation location \u00b6 /home/mcce/Stable-MCCE (MCCE_HOME) The MCCE installation root. It is required by the program to find relevant parameters. /home/mcce/Stable-MCCE/bin/delphi DelPhi executable (DELPHI_EXE) PB solver delphi location. /tmp delphi temporary file folder, \"/tmp\" uses node (PBE_FOLDER) Location of PB solver output. This should be a folder with write permission and large enough Sometimes to store GBs of files. new.tpl local parameter file for unrecognized res (NEWTPL) Program mcce creates a temporary tpl file whenever it couldn't solve a new cofactor. The presumed parameters are in this file. debug.log (DEBUG_LOG) Debug log file name. Detail levels of program output \u00b6 t Minimize output files (MINIMIZE_SIZE) If this is \"f\", mcce will write more debug information. t Print trace file (DO_TRACE) Creates a record with MCCE revision number, time and date of run, and all user options set in run.prm and appends it to (or creates) the run.trace file. t clean up delphi focusing directory? (DELPHI_CLEAN) Flag of cleaning delphi temporary folder. Set to 't' only for debugging purpose. Other entries \u00b6 Step 1 \u00b6 t Label terminal residues? (TERMINALS) If this flag is on 't', mcce program will identify the C terminus and N terminus of the polypeteides based on the geometry. Terminal residues have extra ionizable sites than residues having peptide bonds. One needs to be careful if there are missing piece of peptide in the given structure. 0.1 cut off water if % SAS exceeds this number (H2O_SASCUTOFF) The water molecules are stripped of if the surface exposure is over this cutoff. This a recursive procedure which means after some waters are removed, the new surface exposure is recaculated and the process id repeated. 2.0 distance limit of reporting clashes (CLASH_DISTANCE) The threshold to report abnormal distance found between non-bonded atoms. t ignore hydrogens in input structure (IGNORE_INPUT_H) Delete and rebuild input H atoms in step 1 and step 2. Step 2: \u00b6 t Rebuild sidechain based on torsion minima (REBUILD_SC) Rebuild side chain. f Do swing? (SWING) Swing conformers deviate from their parent conformer by a small degree. 10.0 phi in degrees of swing (PHI_SWING) Swing angle. 1.00 SAS cuttoff of making fewer rotamers (SAS_CUTOFF) Surface residues get fewer rotamers. There is another mechanism to search the most exposed rotamer to compensate this. 10.0 Cutoff of self vdw in kcal/mol (VDW_CUTOFF) If a rotamer has self energy, comparing with the most favorable one, over this cutoff, it will not ne kept. 5000 number of repacks (REPACKS) The rotamer optimization starts from random initial state, then minimizes the energy on each side chain. The number of restarts of this process is rapacks. 0.03 occupancy cutoff of repacks (REPACK_CUTOFF) The occupancy of side chain conformer lower than this value will not be kept. t h-bond directed rotamer making (HDIRECTED) Do search on hydrogen bond. 1.0 threshold for two conformers being different (HDIRDIFF) Only one of the similar conformers is kept. Similarity os measured by Root Mean Square Deviation. 36 Limit number of the H bond conformers (HDIRLIMT) The number limit on H bond directed conformers. f Do relaxation on water (RELAX_WAT) Move water molecules to relax the distance crash. 3.2 if distance between water and heavy atom is smaller than this, move water away (WATER_RELAX_THR) The threshold of moving water. 10 number of cycles to relax rotamer clash (HV_RELAX_NCYCLE) Heavy atom rotamer relaxation by MD. Number of global restarts (cycles). 10 time (in fs) for each relaxation iteration (HV_RELAX_DT) Heavy atom rotamer relaxation time. 10 number of iterations (HV_RELAX_NITER) Number of local restarts. 2. relax rotamer if vdw interaction is bigger than this (HV_RELAX_VDW_THR) Lower end threshold of relaxing rotamers, Van der Waals energy value in kcal/mol. 5. not relax rotamer if heavy atom vdw is bigger than this (HV_RELAX_HV_VDW_THR) High end threshold of relaxing rotamers, Van der Waals energy value in kcal/mol. -1.0 relax if electrostatic interaction is more favorable than this, and the charged groups are close (HV_RELAX_ELEC_THR) Relax heavy atoms when they show dominantly favorable electrostatic interaction. 0.1 threshold used to define a charged atom, see hv_relax_elec_dist_thr (HV_RELAX_ELEC_CRG_THR) Atoms with charge over this value are considered charged atoms. 3.0 only relax electrostatically favorable pairs that has charged atom distance shorter than this (HV_RELAX_ELEC_DIST_THR) Relax heavy atoms when they show close proximity. 20. scaling factor for torsion during relaxation (HV_TORS_SCALE) Scaling factor for torsion energy when searching torsion minima. 10000 maximun n steps of shake (HV_RELAX_N_SHAKE) MD shake parameter. 0.001 maximun allowance for bond length to deviate (HV_RELAX_SHAKE_TOL) MD bond length detaion parameter. 1.0 constraint distance (HV_RELAX_CONSTRAINT) MD atom constrain distance. 20. constraint force for atom stay in original position (HV_RELAX_CONSTRAINT_FRC) MD atom constraint force. f include neighbors when doing relaxation (expensive) (HV_RELAX_INCLUDE_NGH) Include neighbor in MD relaxation. 4.0 threshold for include as a neighbor during relaxation (HV_RELAX_NGH_THR) Define a neighboring side chain. t Do relaxation on hydrogens (RELAX_H) Optimize hydrogen position. -5.0 Energy threshold for keeping the conformer (RELAX_E_THR) 200 Loop over N local microstates (RELAX_NSTATES) 6 default number of hydroxyl positions (RELAX_N_HYD) 5. do not relax hydrogen if vdw bwt two sidechain conformer bigger than this (RELAX_CLASH_THR) 1.0 phi for each step of relaxation (RELAX_PHI) 300 Maximum number of steps of relaxation (RELAX_NITER) 0.5 Torque threshold for keep relaxing (RELAX_TORQ_THR) These parameters are for MD relaxation. 0.02 Last pruning threshold for conformers (PRUNE_THR) 0.5 Pruning cutoff of RMSD (PRUNE_RMSD) 1.0 Pruning cutoff of eletrostatic pairwise (PRUNE_ELE) 8.0 Pruning cutoff of vdw pairwise (PRUNE_VDW) To reduce the number of final conformers, similar conformers are grouped into one. The similarity is defined by these parameters. 0 maximum number of conformer per residue ( 0=unlimited ) (NCONF_LIMIT) Set a limit to final conformers of a residue. step 3: \u00b6 f Use SAS + Coulomb's law for ele interaction (QUICK_ENERGIES) Use coulomb's law instead of solving PB equation. 80.0 Solvent dielectric constant for DelPhi (EPSILON_SOLV) 65 Grids in each DelPhi (GRIDS_DELPHI) 2.0 The target grids per angstrom for DelPhi (GRIDS_PER_ANG) 1.4 Radius of the probe (RADIUS_PROBE) 2.0 Ion radius (IONRAD) 0.15 Salt (SALT) PB solver parameters. f skip delphi in step3 (DEBUG option) (SKIP_ELE) This is a debug option. f Reassign charge and radii before delphi(if not true then use value in PDB file) (REASSIGN) Step 3 uses atom charges from step2_out.pdb. Use this to overwrite. f Recalculate torsions energy when write out head3.lst (RECALC_TORS) Recalculate torsion energy. 1.7 defalut van der Waals radius, for SAS (DEFAULT_RADIUS) 0.5 factor to 1-4 LJ potontial (1.0 is full) (FACTOR_14LJ) 6.0 dielectric constant for Coulomb's law (EPSILON_COULOMB) More parameters used by the prigram in step 1, 2 and 3. 1 delphi start conformer number, 0 based (PBE_START) 99999 delphi end conformer number, self included (PBE_END) Start and end of PB solution on conformers. step 4: \u00b6 f Average the pairwise, \"f\" uses the smaller (AVERAGE_PAIRWISE) When loading energy from step 3, average the pairwise interaction. 20. Warning Threshold of difference in pairwise (WARN_PAIRWISE) Issue a warning message if asymmetric pairwise interaction is detected. 5.0 Big pairwise threshold to make big list (BIG_PAIRWISE) Residues with big interactions may get synchronized flips. This is the cut off value. -1 Random seed, -1 uses time as random seed (MONTE_SEED) Random seed. 298.15 Temperature (MONTE_T) 3 Number of flips (MONTE_FLIPS) 100 Annealing = n_start * confs (MONTE_NSTART) 500 Equalibration = n_eq * confs (MONTE_NEQ) 0.001 Cut-off occupancy of the reduction (MONTE_REDUCE) Monte Carlo simulation parameters. ### Only for Junjun's monte carlo 2 Number of independent monte carlo sampling (MONTE_RUNS) 2000 Sampling = n_iter * confs (MONTE_NITER) 20000 Trace energy each MONTE_TRACE steps, 0 no trace (MONTE_TRACE) 1000000 Maximum microstates for analytical solution (NSTATE_MAX) f Specify mfe point, f=pKa/Em (MFE_POINT) -1.0 MFE cutoff(Kcal), default 0.5 (MFE_CUTOFF) More Monte Carlo simulation parameters. ### Only for Yifan's monte carlo t Using Yifan's monte carlo (MONTE_ADV_OPT) f Using format from old version (MONTE_OLD_INPUT) 5000 Min Sampling = n_iter * confs (MONTE_NITER_MIN) -1 Max Sampling = n_iter * confs(-1 stop @ converge) (MONTE_NITER_MAX) 10000 Number of iterations each cycle (MONTE_NITER_CYCLE) 1000 niter * n_conf check convergence (MONTE_NITER_CHK) -1 Number of the reduce steps(-1 stop @ converge) (MONTE_N_REDUCE) 0.01 Threshhold for convergence (MONTE_CONVERGE) f Calculate free energy (MONTE_DO_ENERGY) 298.15 Starting temperature for annealling (ANNEAL_TEMP_START) 0 Number of steps of annealling (ANNEAL_NSTEP) 1000 Number of iterations for each annealling step (ANNEAL_NITER_STEP) More Monte Carlo simulation parameters. IPECE parameters \u00b6 f add neutral atoms to simulate a membrane slab (IPECE_ADD_ME) 33. the thichness of the membrane to be add (IPECE_MEM_THICKNESS) M the chain ID of the add atoms (IPECE_MEM_CHAINID) This is for creating a simulated membrane.","title":"Customize run.prm"},{"location":"runprm/#how-to-customize-runprm-the-run-configuration-file","text":"Page last updated on: 2020-05-19 The mcce program reads file run.prm from the working directory and runs according to its instructions. The two ways that run mcce are: customize run.prm and call mcce directly run step1.py, step2.py, step3.py, are step4.py as wrappers of mcce.","title":"How to customize run.prm, the run configuration file?"},{"location":"runprm/#runprm-format","text":"The valid parameters are defined as a key-value pair, defined by a line. At the end of the line, the key string word is enclosed in a pair of parenthesis. The key string must be one word. If a key is detected from a line, the first word of the line is its value. For example: f step 1: pre-run, pdb-> mcce pdb (DO_PREMCCE) The key is \"DO_MCCE\" and the value is \"f\". Lines other than parameter lines are considered as comment lines, therefore ignored.","title":"run.prm format"},{"location":"runprm/#most-commonly-edited-entries","text":"","title":"Most commonly edited entries"},{"location":"runprm/#input-and-output","text":"prot.pdb (INPDB) Th parameter \"INPDB\" specifies a pdb file as the initial input structure.","title":"Input and output"},{"location":"runprm/#major-mcce-steps","text":"MCCE can be divided into four steps. The steps have keys: DO_PREMCCE DO_ROTAMERS DO_ENERGY DO_MONTE The value 't' is for true (do), and 'f' is for false (not do). Steps: f step 1: pre-run, pdb-> mcce pdb (DO_PREMCCE) f step 2: make rotatmers (DO_ROTAMERS) f step 3: do energy calculations (DO_ENERGY) f step 4: monte carlo sampling (DO_MONTE) The later step depends on the out put of previous step.","title":"Major mcce steps"},{"location":"runprm/#less-edited-entries","text":"Step 2 and step 4 have more flexibility and are customized more often than others.","title":"Less edited entries"},{"location":"runprm/#general","text":"4.0 Protein dielectric constant for DelPhi (EPSILON_PROT) Dielectric constant of protein. Usually epsilon 8 is used for small soluble protein (~100 residues), and 4 is used for big trans-membrane protein (> 200 residues). This value is used by step 2 to optimize rotamers and step 3 to compute energy table. /home/mcce/Stable-MCCE/extra.tpl (EXTRA) This file contains entries that overwrite those defined in ftpl and tpl files in param/ directory, and extral controls over the program. The extra controls are in two categories: offset energy of ionizable residues. These energy corrects the residue solution pKa values based on previous benchmarks. The scaling factor of van der Walls energy term. The recommended values are the inverse of dielectric constant defined by EPSILON_PROT. /home/mcce/Stable-MCCE/name.txt MCCE renaming rule. (RENAME_RULES) The renaming rule can divide a big group into separate ionizable groups. put ligands and cofactor as one group. This is done by renaming the atom and residue.","title":"General"},{"location":"runprm/#step-2-rotamer-making","text":"f Use control file \"head1.lst\" for rotamer making (ROT_SPECIF) This file enables site specific rotamer making rules. When set as \"t\", it overwrites the rules defined by run.prm. t Do swap (stereo isotope) (ROT_SWAP) Make stereo isotope conformers for residues like GLN and ASN. t Do rotate? (PACK) Rotate around rotatable bonds? 6 number of rotamers in a bond rotation (ROTATIONS) Number of rotamers in a bond rotation.","title":"Step 2, Rotamer making"},{"location":"runprm/#step-4-monte-carlo-sampling","text":"ph \"ph\" for pH titration, \"eh\" for eh titration (TITR_TYPE) The type of simulation, pH or Eh. 0.0 Initial pH (TITR_PH0) The starting pH, or the pH of Eh titration. 1.0 pH interval (TITR_PHD) The interval of pH titration 0.0 Initial Eh (TITR_EH0) The starting Eh, or the Eh of pH titration. 30.0 Eh interval (in mV) (TITR_EHD) The interval of Eh titration. 15 Number of titration points (TITR_STEPS) Number of titration points. f Output Microstate from standard monte carlo (MS_OUT) f Output readable micristate file from standard monte carlo (RE_MS_OUT) Write out microstates or not.","title":"Step 4, Monte Carlo sampling"},{"location":"runprm/#system-specific-entries","text":"These entries are tailored to the system and installation.","title":"System specific entries"},{"location":"runprm/#system-and-installation-location","text":"/home/mcce/Stable-MCCE (MCCE_HOME) The MCCE installation root. It is required by the program to find relevant parameters. /home/mcce/Stable-MCCE/bin/delphi DelPhi executable (DELPHI_EXE) PB solver delphi location. /tmp delphi temporary file folder, \"/tmp\" uses node (PBE_FOLDER) Location of PB solver output. This should be a folder with write permission and large enough Sometimes to store GBs of files. new.tpl local parameter file for unrecognized res (NEWTPL) Program mcce creates a temporary tpl file whenever it couldn't solve a new cofactor. The presumed parameters are in this file. debug.log (DEBUG_LOG) Debug log file name.","title":"System and installation location"},{"location":"runprm/#detail-levels-of-program-output","text":"t Minimize output files (MINIMIZE_SIZE) If this is \"f\", mcce will write more debug information. t Print trace file (DO_TRACE) Creates a record with MCCE revision number, time and date of run, and all user options set in run.prm and appends it to (or creates) the run.trace file. t clean up delphi focusing directory? (DELPHI_CLEAN) Flag of cleaning delphi temporary folder. Set to 't' only for debugging purpose.","title":"Detail levels of program output"},{"location":"runprm/#other-entries","text":"","title":"Other entries"},{"location":"runprm/#step-1","text":"t Label terminal residues? (TERMINALS) If this flag is on 't', mcce program will identify the C terminus and N terminus of the polypeteides based on the geometry. Terminal residues have extra ionizable sites than residues having peptide bonds. One needs to be careful if there are missing piece of peptide in the given structure. 0.1 cut off water if % SAS exceeds this number (H2O_SASCUTOFF) The water molecules are stripped of if the surface exposure is over this cutoff. This a recursive procedure which means after some waters are removed, the new surface exposure is recaculated and the process id repeated. 2.0 distance limit of reporting clashes (CLASH_DISTANCE) The threshold to report abnormal distance found between non-bonded atoms. t ignore hydrogens in input structure (IGNORE_INPUT_H) Delete and rebuild input H atoms in step 1 and step 2.","title":"Step 1"},{"location":"runprm/#step-2","text":"t Rebuild sidechain based on torsion minima (REBUILD_SC) Rebuild side chain. f Do swing? (SWING) Swing conformers deviate from their parent conformer by a small degree. 10.0 phi in degrees of swing (PHI_SWING) Swing angle. 1.00 SAS cuttoff of making fewer rotamers (SAS_CUTOFF) Surface residues get fewer rotamers. There is another mechanism to search the most exposed rotamer to compensate this. 10.0 Cutoff of self vdw in kcal/mol (VDW_CUTOFF) If a rotamer has self energy, comparing with the most favorable one, over this cutoff, it will not ne kept. 5000 number of repacks (REPACKS) The rotamer optimization starts from random initial state, then minimizes the energy on each side chain. The number of restarts of this process is rapacks. 0.03 occupancy cutoff of repacks (REPACK_CUTOFF) The occupancy of side chain conformer lower than this value will not be kept. t h-bond directed rotamer making (HDIRECTED) Do search on hydrogen bond. 1.0 threshold for two conformers being different (HDIRDIFF) Only one of the similar conformers is kept. Similarity os measured by Root Mean Square Deviation. 36 Limit number of the H bond conformers (HDIRLIMT) The number limit on H bond directed conformers. f Do relaxation on water (RELAX_WAT) Move water molecules to relax the distance crash. 3.2 if distance between water and heavy atom is smaller than this, move water away (WATER_RELAX_THR) The threshold of moving water. 10 number of cycles to relax rotamer clash (HV_RELAX_NCYCLE) Heavy atom rotamer relaxation by MD. Number of global restarts (cycles). 10 time (in fs) for each relaxation iteration (HV_RELAX_DT) Heavy atom rotamer relaxation time. 10 number of iterations (HV_RELAX_NITER) Number of local restarts. 2. relax rotamer if vdw interaction is bigger than this (HV_RELAX_VDW_THR) Lower end threshold of relaxing rotamers, Van der Waals energy value in kcal/mol. 5. not relax rotamer if heavy atom vdw is bigger than this (HV_RELAX_HV_VDW_THR) High end threshold of relaxing rotamers, Van der Waals energy value in kcal/mol. -1.0 relax if electrostatic interaction is more favorable than this, and the charged groups are close (HV_RELAX_ELEC_THR) Relax heavy atoms when they show dominantly favorable electrostatic interaction. 0.1 threshold used to define a charged atom, see hv_relax_elec_dist_thr (HV_RELAX_ELEC_CRG_THR) Atoms with charge over this value are considered charged atoms. 3.0 only relax electrostatically favorable pairs that has charged atom distance shorter than this (HV_RELAX_ELEC_DIST_THR) Relax heavy atoms when they show close proximity. 20. scaling factor for torsion during relaxation (HV_TORS_SCALE) Scaling factor for torsion energy when searching torsion minima. 10000 maximun n steps of shake (HV_RELAX_N_SHAKE) MD shake parameter. 0.001 maximun allowance for bond length to deviate (HV_RELAX_SHAKE_TOL) MD bond length detaion parameter. 1.0 constraint distance (HV_RELAX_CONSTRAINT) MD atom constrain distance. 20. constraint force for atom stay in original position (HV_RELAX_CONSTRAINT_FRC) MD atom constraint force. f include neighbors when doing relaxation (expensive) (HV_RELAX_INCLUDE_NGH) Include neighbor in MD relaxation. 4.0 threshold for include as a neighbor during relaxation (HV_RELAX_NGH_THR) Define a neighboring side chain. t Do relaxation on hydrogens (RELAX_H) Optimize hydrogen position. -5.0 Energy threshold for keeping the conformer (RELAX_E_THR) 200 Loop over N local microstates (RELAX_NSTATES) 6 default number of hydroxyl positions (RELAX_N_HYD) 5. do not relax hydrogen if vdw bwt two sidechain conformer bigger than this (RELAX_CLASH_THR) 1.0 phi for each step of relaxation (RELAX_PHI) 300 Maximum number of steps of relaxation (RELAX_NITER) 0.5 Torque threshold for keep relaxing (RELAX_TORQ_THR) These parameters are for MD relaxation. 0.02 Last pruning threshold for conformers (PRUNE_THR) 0.5 Pruning cutoff of RMSD (PRUNE_RMSD) 1.0 Pruning cutoff of eletrostatic pairwise (PRUNE_ELE) 8.0 Pruning cutoff of vdw pairwise (PRUNE_VDW) To reduce the number of final conformers, similar conformers are grouped into one. The similarity is defined by these parameters. 0 maximum number of conformer per residue ( 0=unlimited ) (NCONF_LIMIT) Set a limit to final conformers of a residue.","title":"Step 2:"},{"location":"runprm/#step-3","text":"f Use SAS + Coulomb's law for ele interaction (QUICK_ENERGIES) Use coulomb's law instead of solving PB equation. 80.0 Solvent dielectric constant for DelPhi (EPSILON_SOLV) 65 Grids in each DelPhi (GRIDS_DELPHI) 2.0 The target grids per angstrom for DelPhi (GRIDS_PER_ANG) 1.4 Radius of the probe (RADIUS_PROBE) 2.0 Ion radius (IONRAD) 0.15 Salt (SALT) PB solver parameters. f skip delphi in step3 (DEBUG option) (SKIP_ELE) This is a debug option. f Reassign charge and radii before delphi(if not true then use value in PDB file) (REASSIGN) Step 3 uses atom charges from step2_out.pdb. Use this to overwrite. f Recalculate torsions energy when write out head3.lst (RECALC_TORS) Recalculate torsion energy. 1.7 defalut van der Waals radius, for SAS (DEFAULT_RADIUS) 0.5 factor to 1-4 LJ potontial (1.0 is full) (FACTOR_14LJ) 6.0 dielectric constant for Coulomb's law (EPSILON_COULOMB) More parameters used by the prigram in step 1, 2 and 3. 1 delphi start conformer number, 0 based (PBE_START) 99999 delphi end conformer number, self included (PBE_END) Start and end of PB solution on conformers.","title":"step 3:"},{"location":"runprm/#step-4","text":"f Average the pairwise, \"f\" uses the smaller (AVERAGE_PAIRWISE) When loading energy from step 3, average the pairwise interaction. 20. Warning Threshold of difference in pairwise (WARN_PAIRWISE) Issue a warning message if asymmetric pairwise interaction is detected. 5.0 Big pairwise threshold to make big list (BIG_PAIRWISE) Residues with big interactions may get synchronized flips. This is the cut off value. -1 Random seed, -1 uses time as random seed (MONTE_SEED) Random seed. 298.15 Temperature (MONTE_T) 3 Number of flips (MONTE_FLIPS) 100 Annealing = n_start * confs (MONTE_NSTART) 500 Equalibration = n_eq * confs (MONTE_NEQ) 0.001 Cut-off occupancy of the reduction (MONTE_REDUCE) Monte Carlo simulation parameters. ### Only for Junjun's monte carlo 2 Number of independent monte carlo sampling (MONTE_RUNS) 2000 Sampling = n_iter * confs (MONTE_NITER) 20000 Trace energy each MONTE_TRACE steps, 0 no trace (MONTE_TRACE) 1000000 Maximum microstates for analytical solution (NSTATE_MAX) f Specify mfe point, f=pKa/Em (MFE_POINT) -1.0 MFE cutoff(Kcal), default 0.5 (MFE_CUTOFF) More Monte Carlo simulation parameters. ### Only for Yifan's monte carlo t Using Yifan's monte carlo (MONTE_ADV_OPT) f Using format from old version (MONTE_OLD_INPUT) 5000 Min Sampling = n_iter * confs (MONTE_NITER_MIN) -1 Max Sampling = n_iter * confs(-1 stop @ converge) (MONTE_NITER_MAX) 10000 Number of iterations each cycle (MONTE_NITER_CYCLE) 1000 niter * n_conf check convergence (MONTE_NITER_CHK) -1 Number of the reduce steps(-1 stop @ converge) (MONTE_N_REDUCE) 0.01 Threshhold for convergence (MONTE_CONVERGE) f Calculate free energy (MONTE_DO_ENERGY) 298.15 Starting temperature for annealling (ANNEAL_TEMP_START) 0 Number of steps of annealling (ANNEAL_NSTEP) 1000 Number of iterations for each annealling step (ANNEAL_NITER_STEP) More Monte Carlo simulation parameters.","title":"step 4:"},{"location":"runprm/#ipece-parameters","text":"f add neutral atoms to simulate a membrane slab (IPECE_ADD_ME) 33. the thichness of the membrane to be add (IPECE_MEM_THICKNESS) M the chain ID of the add atoms (IPECE_MEM_CHAINID) This is for creating a simulated membrane.","title":"IPECE parameters"},{"location":"tools/","text":"MCCE tools reference \u00b6 Page last updated on: 2020-12-30 Improving and helping runs \u00b6 step by step mcce run scripts \u00b6 MCCE involves 4 main steps: Step 1: Convert raw PDB file to MCCE PDB file, reformat terminal residues, and strip off surface water and ions. Step 2: Make side chain conformers, including rotamers and ionization conformers. Step 3: Compute self-energy of conformers and pairwise energy lookup table. Step 4: Monte Carlo sampling to evaluate favorable side chain position and ionization at various conditions. While the control of these 4 steps is fully configured in run.prm and executed by mcce command, the 4 steps can be carried out by python wrapper scripts without configuring run.prm. Step 1: prepare structure \u00b6 usage: step1.py [-h] [--norun] [--noter] [-e /path/to/mcce] [-u Key=Value] [-d epsilon] [--dry] pdb Run mcce step 1, premcce to format PDB file to MCCE PDB format. positional arguments: pdb optional arguments: -h, --help show this help message and exit --norun Create run.prm but do not run step 1 --noter Do not label terminal residues (for making ftpl). -e /path/to/mcce mcce executable location, default to \"mcce\" -u Key=Value User customized variables -d epsilon protein dielectric constant for delphi, default to 4.0 --dry Delete all water molecules. Step 2: make conformers \u00b6 usage: step2.py [-h] [--norun] [-d epsilon] [-e /path/to/mcce] [-u Key=Value] [-l level] Run mcce step 2, make side chain conformers from step1_out.pdb. optional arguments: -h, --help show this help message and exit --norun Create run.prm but do not run step 2 -d epsilon dielectric constant for optimizing conformers -e /path/to/mcce mcce executable location, default to \"mcce\" -u Key=Value User customized variables -l level conformer level 1: quick, 2: medium, 3: comprehensive Step 3: energy calculation \u00b6 usage: step3.py [-h] [-c start end] [-d epsilon] [-e /path/to/mcce] [-f tmp folder] [-p processes] [-r] [-u Key=Value] [-x /path/to/delphi] [--norun] Run mcce step 3, energy calculations, with multiple threads. optional arguments: -h, --help show this help message and exit -c start end starting and ending conformer, default to 1 and 9999 -d epsilon protein dielectric constant for delphi, default to 4.0 -e /path/to/mcce mcce executable location, default to \"mcce\" -f tmp folder delphi temporary folder, default to /tmp -p processes run mcce with number of processes, default to 1 -r refresh opp files and head3.lst without running delphi -u Key=Value User customized variables -x /path/to/delphi delphi executable location, default to \"delphi\" --norun Create run.prm but do not run step 3 step3.py is able to run in multiple threads. Step 4: Monte Carlo sampling \u00b6 usage: step4.py [-h] [--norun] [-i initial ph/eh] [-d interval] [-n steps] [--xts] [--ms] [-e /path/to/mcce] [-t ph or eh] [-u Key=Value] Run mcce step 4, Monte Carlo sampling to simulate a titration. optional arguments: -h, --help show this help message and exit --norun Create run.prm but do not run step 4 -i initial ph/eh Initial pH/Eh of titration -d interval titration interval in pJ or mV -n steps number of steps of titration --xts Enable entropy correction, default is false --ms Enable microstate output -e /path/to/mcce mcce executable location, default to \"mcce\" -t ph or eh titration type, pH or Eh -u Key=Value User customized variables Step 5: titration fitting \u00b6 Step 5 is optional. It writes net charge of each residue in sum_crg2.out and fits the titration curve in pK2.out. usage: step5.py [-h] Run mcce step 5, generate net charge, fit titration curve. optional arguments: -h, --help show this help message and exit Step 6: hydrogen bond \u00b6 Step 6 is for hydrogen bond network analysis. It requires step 4 to output microstates. usage: step6.py [-h] [--norun] [-e /path/to/mcce] [-u Key=Value] Run step 6, hydrogen bond analysis, requires microstate output from step 4. optional arguments: -h, --help show this help message and exit --norun Create run.prm but do not run step 6 -e /path/to/mcce mcce executable location, default to \"mcce\" -u Key=Value User customized variables Example: step4.py --ms step6.py Combine first 4 steps \u00b6 The first 4 steps are essential steps. #!/bin/bash step1.py input.pdb step2.py step3.py step4.py energies.py \u00b6 Run step3 with multiple threads. Syntax: energies.py [-h] [-p processes] [-r] [-c start end] [-e /path/to/mcce] Optional arguments: Argument Description -h, --help show this help message and exit -p processes run mcce with number of processes, default to 1 -r refresh opp files and head3.lst without running delphi -c start end starting and ending conformer, default to 1 and 9999 -e /path/to/mcce mcce executable location, default to \"mcce\" Examples: energies.py -p 6 This command runs step 3 in 6 threads. energies.py -r This command runs step 3 just to refresh head3.lst and vdw energy. energies.py -c 1 100 -p 4 This command calculates conformer from 1 to 100 in 5 threads. Note After this command, the lines: 1 delphi start conformer number, 0 based (PBE_START) 99999 delphi end conformer number, self included (PBE_END) in run.prm file might be altered. getpdb \u00b6 Download a pdb file by its PDB ID. Syntax: getpbd pdbid [saved name] Example: getpdb 1akk Inquiring the remote file 1AKK.pdb ... Saving as 1AKK.pdb ... Download completed. Or getpdb 1akk prot.pdb Inquiring the remote file 1AKK.pdb ... Saving as prot.pdb ... Download completed. to save as specified name. translate_step2.py \u00b6 Translate old atom names in step2_out to new PDB v3 names. Syntax: translate_step2.py step2_out.pdb Hydrogen names in PDB v3 are significantly different from PDB v2. Due to the randomness in step 2, it is sometimes desired to preserve step2_out.pdb. This tool translates the names so that step2_out.pdb so that it can be used by new mcce. This program prints the translated content on screen. So the user is responsible to make backup of the step2_out.pdb file and redirect the outcome to a new step2_out.pdb. Example: cp step2_out.pdb step2_out.pdb.bak translate_step2.py step2_out.pdb.bak > step2_out.pdb Result Analysis \u00b6 fitpka.py \u00b6 Fit the titration curve of an ionizable residue. Syntax: $ fitpka.py -h usage: fitpka.py [-h] RES [RES ...] Fit a titration of charged residues positional arguments: RES Charged residue names to plot, as in sum_crg.out optional arguments: -h, --help show this help message and exit Required input file sum_crg.out Example: $ cat sum_crg.out pH 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 NTR+A0001_ 1.00 1.00 1.00 0.99 0.92 0.55 0.12 0.01 0.00 0.00 0.00 0.00 0.00 0.00 0.00 LYS+A0001_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.97 0.79 0.28 0.05 0.00 0.00 0.00 ARG+A0005_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.96 0.79 0.36 0.07 GLU-A0007_ -0.00 -0.01 -0.08 -0.40 -0.85 -0.98 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 LYS+A0013_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.99 0.95 0.67 0.19 0.03 0.00 ARG+A0014_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.99 0.94 0.67 0.20 HIS+A0015_ 1.00 1.00 1.00 1.00 1.00 0.98 0.86 0.40 0.06 0.01 0.00 0.00 0.00 0.00 0.00 ASP-A0018_ -0.01 -0.10 -0.50 -0.88 -0.98 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 TYR-A0020_ -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.01 -0.04 -0.09 -0.31 -0.69 ARG+A0021_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.99 0.91 0.60 0.21 TYR-A0023_ -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.01 -0.07 -0.35 -0.79 -0.97 -0.99 -1.00 LYS+A0033_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.97 0.78 0.28 0.04 0.01 0.00 GLU-A0035_ -0.00 -0.00 -0.00 -0.03 -0.12 -0.42 -0.86 -0.98 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 ARG+A0045_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.98 0.86 0.44 0.15 ASP-A0048_ -0.03 -0.24 -0.74 -0.95 -0.99 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 ASP-A0052_ -0.00 -0.00 -0.07 -0.34 -0.79 -0.96 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 TYR-A0053_ -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 ARG+A0061_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.98 0.89 0.56 ASP-A0066_ -0.00 -0.00 -0.38 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 ARG+A0068_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.99 0.94 0.74 0.34 ARG+A0073_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.98 0.83 0.37 0.08 ASP-A0087_ -0.01 -0.09 -0.46 -0.88 -0.99 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 LYS+A0096_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.97 0.76 0.33 0.08 0.02 0.01 LYS+A0097_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.98 0.84 0.41 0.07 0.01 0.00 ASP-A0101_ -0.00 -0.00 -0.01 -0.09 -0.51 -0.91 -0.99 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 ARG+A0112_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.99 0.88 0.47 0.11 ARG+A0114_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.99 0.93 0.64 0.16 LYS+A0116_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.97 0.76 0.28 0.05 0.01 0.00 0.00 ASP-A0119_ -0.00 -0.00 -0.03 -0.20 -0.72 -0.96 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 ARG+A0125_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.99 0.90 0.54 0.13 ARG+A0128_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.96 0.78 0.29 CTR-A0129_ -0.00 -0.04 -0.28 -0.75 -0.96 -0.99 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 ---------- Net_Charge 18.95 18.51 16.44 13.45 11.02 9.32 8.13 7.43 6.98 6.40 4.52 1.80 -0.72 -4.73 -9.38 Protons 18.95 18.51 16.44 13.45 11.02 9.32 8.13 7.43 6.98 6.40 4.52 1.80 -0.72 -4.73 -9.38 Electrons 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 Find the residue ID in sum_carg.out, then fit the titration curve: fitpka.py ASP-A0066_ state.py \u00b6 Analyze how a microstate energy is composed. Syntax: state.py Required files: run.prm head3.lst extra.tpl for scaling factors that are not equal to 1. energies/*.opp for pairwise interactions microstate file named \"states\" The microstate file is in a fixed format. The first line is like: T=298.15, ph=7.0, eh=0.0 It specifies the the environment variables which affects the energy calculation. Variables are separated by \", \". The variable names are not case sensitive. T: Temperature. Room temperature is 298.15 K ph: pH value. eh: Eh value, the electric potential for potential titration. The rest of the lines are microstates. One line per state. Each line consists the index number of conformers (0 based). Numbers can be separated by either comma or space. Example: Make a states file: Run state.py mfe.py \u00b6 Analyze ionization free energy of a residue. It tells you why a residue has that pKa and what factors played a role. Syntax mfe.py [-h] [-p pH/Eh] [-x TS_correction] [-c cutoff] residue residue: residue ID as in pK.out pH/Eh: pH value at which ionization energy is calculated. Default is the pKa (midpoint) where dG = 0. cut_off: Report only pairwise interaction bigger than this value. TS_correction: \"t\" to include entropy in G, \"f\" not to include, \"r\" (default) will look for run.prm. If entropy correction was turned on in step 4, mfe should not include this term as entropy has been \"removed\". Required files: run.prm head3.lst extra.tpl for scaling factors that are not equal to 1. energies/*.opp for pairwise interactions Example: Check titration result in pKa.out: cat pK.out ... ASP-A0044_ 3.947 ... ASP-A0052 is the residue_ID. Its calculated pKa is 2.275. At this point, the free energy of reaction from ASP neutral to ASP ionized should be close to 0. Run $ mfe.py -c 0.01 ASP-A0044_ Residue ASP-A0044_ pKa/Em=3.947 ================================= Terms pH meV Kcal --------------------------------- vdw0 -0.00 -0.27 -0.01 vdw1 -0.01 -0.59 -0.01 tors -0.15 -8.63 -0.20 ebkb -0.67 -38.66 -0.91 dsol 0.26 15.35 0.36 offset -0.62 -36.17 -0.85 pH&pK0 0.80 46.61 1.10 Eh&Em0 0.00 0.00 0.00 -TS 0.58 33.46 0.79 residues -0.19 -11.14 -0.26 ********************************* TOTAL -0.00 -0.05 -0.00 sum_crg ********************************* NTRA0003_ -0.03 -1.66 -0.04 1.00 ASPA0022_ 0.02 0.95 0.02 -0.86 ASNA0023_ -0.01 -0.68 -0.02 0.00 LYSA0027_ -0.01 -0.77 -0.02 1.00 LYSA0039_ -0.14 -8.23 -0.19 1.00 ASNA0041_ -0.01 -0.62 -0.01 0.00 LYSA0049_ -0.04 -2.10 -0.05 1.00 ASPA0054_ 0.01 0.69 0.02 -0.95 GLUA0073_ 0.01 0.79 0.02 -0.99 ASPA0075_ 0.05 2.85 0.07 -1.00 TYRA0078_ 0.02 1.05 0.02 -0.00 SERA0080_ 0.02 1.19 0.03 0.00 ARGA0083_ -0.04 -2.51 -0.06 1.00 ARGA0087_ -0.03 -1.49 -0.04 1.00 HISA0102_ -0.02 -1.02 -0.02 1.00 ================================= You can do mfe calculation at pH other than mid-point. mfe_all.py \u00b6 Perform mfe analysis on all ionizable residues. Syntax mfe_all.py [-h] [-p pH/Eh] [-x TS_correction] [-f format] [-o filename] pH/Eh: pH value at which ionization energy is calculated. Default is the pKa (midpoint) where dG = 0. TS_correction: \"t\" to include entropy in G, \"f\" not to include, \"r\" (default) will look for run.prm. If entropy correction was turned on in step 4, mfe should not include this term as entropy has been \"removed\". format: output file format, xlsx, csv, or html. The default is excel format xlsx. filename: output file name. The default is mfe_all.[ext] Required files: run.prm head3.lst extra.tpl for scaling factors that are not equal to 1. energies/*.opp for pairwise interactions Example: mfe_all.py -f html MFE output saved in file mfe_all.html mostocc.py \u00b6 Extract most occupied conformer from fort.38 and make a pdb file. Syntax mostocc.py pH pH is the exact pH in the first line of fort.38 file. It indicates which pH to use for occupancy, as occupancy is pH dependent. Required files: fort.38 step2_out.pdb Example: mostocc.py 7.0 sanity.py \u00b6 Quick check on the charge state of ionizable residues abd report unusual charge. Syntax sanity.py Required files: run.prm sum_crg.out Example: $ sanity.py TYR-A0013_: charge 0.00 expected near -1.0 at pH=12.0 HIS+A0018_: charge 0.00 expected near 1.0 at pH= 0.0 TYR-A0024_: charge 0.00 expected near -1.0 at pH=12.0 LYS+A0062_: charge 0.55 expected near 0.0 at pH=13.0 GLU-A0073_: charge -0.74 expected near 0.0 at pH= 2.0 ASP-A0075_: charge -1.00 expected near 0.0 at pH= 0.0 TYR-A0078_: charge 0.00 expected near -1.0 at pH=12.0 TYR-A0090_: charge -0.09 expected near -1.0 at pH=12.0 ASP-A0093_: charge -0.83 expected near 0.0 at pH= 1.0 TYR-A0097_: charge -0.17 expected near -1.0 at pH=12.0 TYR-A0103_: charge 0.00 expected near -1.0 at pH=12.0 Parameter file preparation \u00b6 pdb2ftpl.py \u00b6 This tool converts a pdb file to a ftpl template. Syntax usage: pdb2ftpl.py [-h] [-d] [-c conformer type] pdbfile Create a ftpl template file from a cofactor PDB file. The atoms in the input files are considered as one molecule. positional arguments: pdbfile optional arguments: -h, --help show this help message and exit -d Ignore CONNECT, use distance to determine bond -c conformer type Specify a 2-character conformer type ID, default 01 mol2_charge.py \u00b6 Apply mol2 charge to a conformer in ftpl template. The mol2 file doesn't need to have the matching atom names, as long as the element names are correct. Syntax $ mol2_charge.py -h usage: mol2_charge.py [-h] -m mol2 -c conf [--show] ftpl Apply mol2 charge to a conformer in ftpl template. The mol2 file doesn't need to have the matching atom names, as long as the element names are correct. positional arguments: ftpl optional arguments: -h, --help show this help message and exit -m mol2 mol2 file with charge -c conf Conformer ID in conformer list to be matched. --show Show atom name matching, default false. Example: If I have a ftpl file T4Y.tpl and a mol2 file 27c-p.mol2 with atom charge. $ mol2_charge.py -m 27c-p.mol2 T4Y.ftpl -c T4Y01 --show ================= ftpl --- mol2 ================= \" N1 \" --- \"N4\" \" C4 \" --- \"C14\" \" C5 \" --- \"C13\" \" C6 \" --- \"C12\" \" C7 \" --- \"C11\" \" C8 \" --- \"C7\" \" C10\" --- \"C5\" \" C13\" --- \"C2\" \" N \" --- \"N8\" \" C \" --- \"C18\" \" O \" --- \"O3\" \" C1 \" --- \"C17\" \" C11\" --- \"C10\" \" C12\" --- \"C9\" \" C14\" --- \"C1\" \" C2 \" --- \"C16\" \" C3 \" --- \"C15\" \" C9 \" --- \"C6\" \" H5 \" --- \"H35\" \" H6 \" --- \"H34\" \" H8 \" --- \"H32\" \" H7 \" --- \"H33\" \" H9 \" --- \"H26\" \" H10\" --- \"H27\" \" H13\" --- \"H22\" \" H14\" --- \"H23\" \" H1 \" --- \"H38\" \" H \" --- \"H39\" \" H2 \" --- \"H40\" \" H15\" --- \"H30\" \" H16\" --- \"H31\" \" H18\" --- \"H28\" \" H17\" --- \"H29\" \" H22\" --- \"H19\" \" H19\" --- \"H20\" \" H20\" --- \"H21\" \" H3 \" --- \"H37\" \" H4 \" --- \"H36\" \" H11\" --- \"H24\" \" H12\" --- \"H25\" ================= CHARGE, T4Y01, \" N1 \": -0.45 CHARGE, T4Y01, \" C4 \": -0.14 CHARGE, T4Y01, \" C5 \": -0.11 CHARGE, T4Y01, \" C6 \": -0.09 CHARGE, T4Y01, \" C7 \": 0.22 CHARGE, T4Y01, \" C8 \": 0.17 CHARGE, T4Y01, \" C10\": 0.09 CHARGE, T4Y01, \" C13\": 0.66 CHARGE, T4Y01, \" N \": -0.75 CHARGE, T4Y01, \" C \": -0.05 CHARGE, T4Y01, \" O \": -0.61 CHARGE, T4Y01, \" C1 \": -0.08 CHARGE, T4Y01, \" C11\": 0.09 CHARGE, T4Y01, \" C12\": 0.15 CHARGE, T4Y01, \" C14\": -0.17 CHARGE, T4Y01, \" C2 \": -0.13 CHARGE, T4Y01, \" C3 \": -0.13 CHARGE, T4Y01, \" C9 \": -0.10 CHARGE, T4Y01, \" H5 \": 0.13 CHARGE, T4Y01, \" H6 \": 0.15 CHARGE, T4Y01, \" H8 \": 0.04 CHARGE, T4Y01, \" H7 \": 0.04 CHARGE, T4Y01, \" H9 \": 0.04 CHARGE, T4Y01, \" H10\": 0.04 CHARGE, T4Y01, \" H13\": 0.06 CHARGE, T4Y01, \" H14\": 0.06 CHARGE, T4Y01, \" H1 \": 0.04 CHARGE, T4Y01, \" H \": 0.04 CHARGE, T4Y01, \" H2 \": 0.04 CHARGE, T4Y01, \" H15\": 0.05 CHARGE, T4Y01, \" H16\": 0.05 CHARGE, T4Y01, \" H18\": 0.03 CHARGE, T4Y01, \" H17\": 0.03 CHARGE, T4Y01, \" H22\": 0.06 CHARGE, T4Y01, \" H19\": 0.06 CHARGE, T4Y01, \" H20\": 0.06 CHARGE, T4Y01, \" H3 \": 0.13 CHARGE, T4Y01, \" H4 \": 0.13 CHARGE, T4Y01, \" H11\": 0.06 CHARGE, T4Y01, \" H12\": 0.06 tpl-free2mcce.py \u00b6 This command converts ftpl files to ./param, a directory hosts old mcce tple files. It is a compatibility tool, which makes new ftpl files readable by old mcce executable. Syntax tpl-free2mcce.py Input file: run.prm param/ under mcce distribution directory Output file param under current directory tpl-mcce2free.py \u00b6 Future versions of MCCE will use ftpl format, and this command converts mcce tpl file to new ftpl file. Syntax tpl-mcce2ftpl.py tplfile Input file: tpl file Output file ftpl file content on screen. verify_ftpl.py \u00b6 This program verifies a ftpl by reading a pdb file of that cofactor. Syntax verify_ftpl.py tplfile pdbfile Input file: ftpl file pdb file that corresponds to that ftpl file Connecting to other programs \u00b6 striph2o.py \u00b6 This tool strips away specified surface molecules layer by layer until all left are buried Syntax usage: striph2o.py [-h] [-c RES [RES ...]] [-s exposure] -f inputfile [-o outputfile] Strip off exposed cofactors like water and ions based on solvent accessible surface area. optional arguments: -h, --help show this help message and exit -c RES [RES ...] Specify cofactor names to strip off, default is HOH. -s exposure Fraction exposure threshold to be cut. Default is 0.05. -f inputfile Input file name. -o outputfile Output file name, default is inputfile name with extension .stripped. This program does not only strip off water, it also strip off any molecule as named in the command line. So one can use it to delete ions and lipid bilayers in the input structure. Required files: input pdb file Output files input_file-stripped.pdb for stripped pdb file unless otherwise named input_file.acc for residue solvent accessibility Example: striph2o.py -f frame32_50.pdb -c HOH CLA SOD BGA POP DLP","title":"Tools Program Reference"},{"location":"tools/#mcce-tools-reference","text":"Page last updated on: 2020-12-30","title":"MCCE tools reference"},{"location":"tools/#improving-and-helping-runs","text":"","title":"Improving and helping runs"},{"location":"tools/#step-by-step-mcce-run-scripts","text":"MCCE involves 4 main steps: Step 1: Convert raw PDB file to MCCE PDB file, reformat terminal residues, and strip off surface water and ions. Step 2: Make side chain conformers, including rotamers and ionization conformers. Step 3: Compute self-energy of conformers and pairwise energy lookup table. Step 4: Monte Carlo sampling to evaluate favorable side chain position and ionization at various conditions. While the control of these 4 steps is fully configured in run.prm and executed by mcce command, the 4 steps can be carried out by python wrapper scripts without configuring run.prm.","title":"step by step mcce run scripts"},{"location":"tools/#step-1-prepare-structure","text":"usage: step1.py [-h] [--norun] [--noter] [-e /path/to/mcce] [-u Key=Value] [-d epsilon] [--dry] pdb Run mcce step 1, premcce to format PDB file to MCCE PDB format. positional arguments: pdb optional arguments: -h, --help show this help message and exit --norun Create run.prm but do not run step 1 --noter Do not label terminal residues (for making ftpl). -e /path/to/mcce mcce executable location, default to \"mcce\" -u Key=Value User customized variables -d epsilon protein dielectric constant for delphi, default to 4.0 --dry Delete all water molecules.","title":"Step 1: prepare structure"},{"location":"tools/#step-2-make-conformers","text":"usage: step2.py [-h] [--norun] [-d epsilon] [-e /path/to/mcce] [-u Key=Value] [-l level] Run mcce step 2, make side chain conformers from step1_out.pdb. optional arguments: -h, --help show this help message and exit --norun Create run.prm but do not run step 2 -d epsilon dielectric constant for optimizing conformers -e /path/to/mcce mcce executable location, default to \"mcce\" -u Key=Value User customized variables -l level conformer level 1: quick, 2: medium, 3: comprehensive","title":"Step 2: make conformers"},{"location":"tools/#step-3-energy-calculation","text":"usage: step3.py [-h] [-c start end] [-d epsilon] [-e /path/to/mcce] [-f tmp folder] [-p processes] [-r] [-u Key=Value] [-x /path/to/delphi] [--norun] Run mcce step 3, energy calculations, with multiple threads. optional arguments: -h, --help show this help message and exit -c start end starting and ending conformer, default to 1 and 9999 -d epsilon protein dielectric constant for delphi, default to 4.0 -e /path/to/mcce mcce executable location, default to \"mcce\" -f tmp folder delphi temporary folder, default to /tmp -p processes run mcce with number of processes, default to 1 -r refresh opp files and head3.lst without running delphi -u Key=Value User customized variables -x /path/to/delphi delphi executable location, default to \"delphi\" --norun Create run.prm but do not run step 3 step3.py is able to run in multiple threads.","title":"Step 3: energy calculation"},{"location":"tools/#step-4-monte-carlo-sampling","text":"usage: step4.py [-h] [--norun] [-i initial ph/eh] [-d interval] [-n steps] [--xts] [--ms] [-e /path/to/mcce] [-t ph or eh] [-u Key=Value] Run mcce step 4, Monte Carlo sampling to simulate a titration. optional arguments: -h, --help show this help message and exit --norun Create run.prm but do not run step 4 -i initial ph/eh Initial pH/Eh of titration -d interval titration interval in pJ or mV -n steps number of steps of titration --xts Enable entropy correction, default is false --ms Enable microstate output -e /path/to/mcce mcce executable location, default to \"mcce\" -t ph or eh titration type, pH or Eh -u Key=Value User customized variables","title":"Step 4: Monte Carlo sampling"},{"location":"tools/#step-5-titration-fitting","text":"Step 5 is optional. It writes net charge of each residue in sum_crg2.out and fits the titration curve in pK2.out. usage: step5.py [-h] Run mcce step 5, generate net charge, fit titration curve. optional arguments: -h, --help show this help message and exit","title":"Step 5: titration fitting"},{"location":"tools/#step-6-hydrogen-bond","text":"Step 6 is for hydrogen bond network analysis. It requires step 4 to output microstates. usage: step6.py [-h] [--norun] [-e /path/to/mcce] [-u Key=Value] Run step 6, hydrogen bond analysis, requires microstate output from step 4. optional arguments: -h, --help show this help message and exit --norun Create run.prm but do not run step 6 -e /path/to/mcce mcce executable location, default to \"mcce\" -u Key=Value User customized variables Example: step4.py --ms step6.py","title":"Step 6: hydrogen bond"},{"location":"tools/#combine-first-4-steps","text":"The first 4 steps are essential steps. #!/bin/bash step1.py input.pdb step2.py step3.py step4.py","title":"Combine first 4 steps"},{"location":"tools/#energiespy","text":"Run step3 with multiple threads. Syntax: energies.py [-h] [-p processes] [-r] [-c start end] [-e /path/to/mcce] Optional arguments: Argument Description -h, --help show this help message and exit -p processes run mcce with number of processes, default to 1 -r refresh opp files and head3.lst without running delphi -c start end starting and ending conformer, default to 1 and 9999 -e /path/to/mcce mcce executable location, default to \"mcce\" Examples: energies.py -p 6 This command runs step 3 in 6 threads. energies.py -r This command runs step 3 just to refresh head3.lst and vdw energy. energies.py -c 1 100 -p 4 This command calculates conformer from 1 to 100 in 5 threads. Note After this command, the lines: 1 delphi start conformer number, 0 based (PBE_START) 99999 delphi end conformer number, self included (PBE_END) in run.prm file might be altered.","title":"energies.py"},{"location":"tools/#getpdb","text":"Download a pdb file by its PDB ID. Syntax: getpbd pdbid [saved name] Example: getpdb 1akk Inquiring the remote file 1AKK.pdb ... Saving as 1AKK.pdb ... Download completed. Or getpdb 1akk prot.pdb Inquiring the remote file 1AKK.pdb ... Saving as prot.pdb ... Download completed. to save as specified name.","title":"getpdb"},{"location":"tools/#translate_step2py","text":"Translate old atom names in step2_out to new PDB v3 names. Syntax: translate_step2.py step2_out.pdb Hydrogen names in PDB v3 are significantly different from PDB v2. Due to the randomness in step 2, it is sometimes desired to preserve step2_out.pdb. This tool translates the names so that step2_out.pdb so that it can be used by new mcce. This program prints the translated content on screen. So the user is responsible to make backup of the step2_out.pdb file and redirect the outcome to a new step2_out.pdb. Example: cp step2_out.pdb step2_out.pdb.bak translate_step2.py step2_out.pdb.bak > step2_out.pdb","title":"translate_step2.py"},{"location":"tools/#result-analysis","text":"","title":"Result Analysis"},{"location":"tools/#fitpkapy","text":"Fit the titration curve of an ionizable residue. Syntax: $ fitpka.py -h usage: fitpka.py [-h] RES [RES ...] Fit a titration of charged residues positional arguments: RES Charged residue names to plot, as in sum_crg.out optional arguments: -h, --help show this help message and exit Required input file sum_crg.out Example: $ cat sum_crg.out pH 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 NTR+A0001_ 1.00 1.00 1.00 0.99 0.92 0.55 0.12 0.01 0.00 0.00 0.00 0.00 0.00 0.00 0.00 LYS+A0001_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.97 0.79 0.28 0.05 0.00 0.00 0.00 ARG+A0005_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.96 0.79 0.36 0.07 GLU-A0007_ -0.00 -0.01 -0.08 -0.40 -0.85 -0.98 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 LYS+A0013_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.99 0.95 0.67 0.19 0.03 0.00 ARG+A0014_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.99 0.94 0.67 0.20 HIS+A0015_ 1.00 1.00 1.00 1.00 1.00 0.98 0.86 0.40 0.06 0.01 0.00 0.00 0.00 0.00 0.00 ASP-A0018_ -0.01 -0.10 -0.50 -0.88 -0.98 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 TYR-A0020_ -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.01 -0.04 -0.09 -0.31 -0.69 ARG+A0021_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.99 0.91 0.60 0.21 TYR-A0023_ -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.01 -0.07 -0.35 -0.79 -0.97 -0.99 -1.00 LYS+A0033_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.97 0.78 0.28 0.04 0.01 0.00 GLU-A0035_ -0.00 -0.00 -0.00 -0.03 -0.12 -0.42 -0.86 -0.98 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 ARG+A0045_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.98 0.86 0.44 0.15 ASP-A0048_ -0.03 -0.24 -0.74 -0.95 -0.99 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 ASP-A0052_ -0.00 -0.00 -0.07 -0.34 -0.79 -0.96 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 TYR-A0053_ -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 -0.00 ARG+A0061_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.98 0.89 0.56 ASP-A0066_ -0.00 -0.00 -0.38 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 ARG+A0068_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.99 0.94 0.74 0.34 ARG+A0073_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.98 0.83 0.37 0.08 ASP-A0087_ -0.01 -0.09 -0.46 -0.88 -0.99 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 LYS+A0096_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.97 0.76 0.33 0.08 0.02 0.01 LYS+A0097_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.98 0.84 0.41 0.07 0.01 0.00 ASP-A0101_ -0.00 -0.00 -0.01 -0.09 -0.51 -0.91 -0.99 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 ARG+A0112_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.99 0.88 0.47 0.11 ARG+A0114_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.99 0.93 0.64 0.16 LYS+A0116_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.97 0.76 0.28 0.05 0.01 0.00 0.00 ASP-A0119_ -0.00 -0.00 -0.03 -0.20 -0.72 -0.96 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 ARG+A0125_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.99 0.90 0.54 0.13 ARG+A0128_ 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.96 0.78 0.29 CTR-A0129_ -0.00 -0.04 -0.28 -0.75 -0.96 -0.99 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 -1.00 ---------- Net_Charge 18.95 18.51 16.44 13.45 11.02 9.32 8.13 7.43 6.98 6.40 4.52 1.80 -0.72 -4.73 -9.38 Protons 18.95 18.51 16.44 13.45 11.02 9.32 8.13 7.43 6.98 6.40 4.52 1.80 -0.72 -4.73 -9.38 Electrons 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 Find the residue ID in sum_carg.out, then fit the titration curve: fitpka.py ASP-A0066_","title":"fitpka.py"},{"location":"tools/#statepy","text":"Analyze how a microstate energy is composed. Syntax: state.py Required files: run.prm head3.lst extra.tpl for scaling factors that are not equal to 1. energies/*.opp for pairwise interactions microstate file named \"states\" The microstate file is in a fixed format. The first line is like: T=298.15, ph=7.0, eh=0.0 It specifies the the environment variables which affects the energy calculation. Variables are separated by \", \". The variable names are not case sensitive. T: Temperature. Room temperature is 298.15 K ph: pH value. eh: Eh value, the electric potential for potential titration. The rest of the lines are microstates. One line per state. Each line consists the index number of conformers (0 based). Numbers can be separated by either comma or space. Example: Make a states file: Run state.py","title":"state.py"},{"location":"tools/#mfepy","text":"Analyze ionization free energy of a residue. It tells you why a residue has that pKa and what factors played a role. Syntax mfe.py [-h] [-p pH/Eh] [-x TS_correction] [-c cutoff] residue residue: residue ID as in pK.out pH/Eh: pH value at which ionization energy is calculated. Default is the pKa (midpoint) where dG = 0. cut_off: Report only pairwise interaction bigger than this value. TS_correction: \"t\" to include entropy in G, \"f\" not to include, \"r\" (default) will look for run.prm. If entropy correction was turned on in step 4, mfe should not include this term as entropy has been \"removed\". Required files: run.prm head3.lst extra.tpl for scaling factors that are not equal to 1. energies/*.opp for pairwise interactions Example: Check titration result in pKa.out: cat pK.out ... ASP-A0044_ 3.947 ... ASP-A0052 is the residue_ID. Its calculated pKa is 2.275. At this point, the free energy of reaction from ASP neutral to ASP ionized should be close to 0. Run $ mfe.py -c 0.01 ASP-A0044_ Residue ASP-A0044_ pKa/Em=3.947 ================================= Terms pH meV Kcal --------------------------------- vdw0 -0.00 -0.27 -0.01 vdw1 -0.01 -0.59 -0.01 tors -0.15 -8.63 -0.20 ebkb -0.67 -38.66 -0.91 dsol 0.26 15.35 0.36 offset -0.62 -36.17 -0.85 pH&pK0 0.80 46.61 1.10 Eh&Em0 0.00 0.00 0.00 -TS 0.58 33.46 0.79 residues -0.19 -11.14 -0.26 ********************************* TOTAL -0.00 -0.05 -0.00 sum_crg ********************************* NTRA0003_ -0.03 -1.66 -0.04 1.00 ASPA0022_ 0.02 0.95 0.02 -0.86 ASNA0023_ -0.01 -0.68 -0.02 0.00 LYSA0027_ -0.01 -0.77 -0.02 1.00 LYSA0039_ -0.14 -8.23 -0.19 1.00 ASNA0041_ -0.01 -0.62 -0.01 0.00 LYSA0049_ -0.04 -2.10 -0.05 1.00 ASPA0054_ 0.01 0.69 0.02 -0.95 GLUA0073_ 0.01 0.79 0.02 -0.99 ASPA0075_ 0.05 2.85 0.07 -1.00 TYRA0078_ 0.02 1.05 0.02 -0.00 SERA0080_ 0.02 1.19 0.03 0.00 ARGA0083_ -0.04 -2.51 -0.06 1.00 ARGA0087_ -0.03 -1.49 -0.04 1.00 HISA0102_ -0.02 -1.02 -0.02 1.00 ================================= You can do mfe calculation at pH other than mid-point.","title":"mfe.py"},{"location":"tools/#mfe_allpy","text":"Perform mfe analysis on all ionizable residues. Syntax mfe_all.py [-h] [-p pH/Eh] [-x TS_correction] [-f format] [-o filename] pH/Eh: pH value at which ionization energy is calculated. Default is the pKa (midpoint) where dG = 0. TS_correction: \"t\" to include entropy in G, \"f\" not to include, \"r\" (default) will look for run.prm. If entropy correction was turned on in step 4, mfe should not include this term as entropy has been \"removed\". format: output file format, xlsx, csv, or html. The default is excel format xlsx. filename: output file name. The default is mfe_all.[ext] Required files: run.prm head3.lst extra.tpl for scaling factors that are not equal to 1. energies/*.opp for pairwise interactions Example: mfe_all.py -f html MFE output saved in file mfe_all.html","title":"mfe_all.py"},{"location":"tools/#mostoccpy","text":"Extract most occupied conformer from fort.38 and make a pdb file. Syntax mostocc.py pH pH is the exact pH in the first line of fort.38 file. It indicates which pH to use for occupancy, as occupancy is pH dependent. Required files: fort.38 step2_out.pdb Example: mostocc.py 7.0","title":"mostocc.py"},{"location":"tools/#sanitypy","text":"Quick check on the charge state of ionizable residues abd report unusual charge. Syntax sanity.py Required files: run.prm sum_crg.out Example: $ sanity.py TYR-A0013_: charge 0.00 expected near -1.0 at pH=12.0 HIS+A0018_: charge 0.00 expected near 1.0 at pH= 0.0 TYR-A0024_: charge 0.00 expected near -1.0 at pH=12.0 LYS+A0062_: charge 0.55 expected near 0.0 at pH=13.0 GLU-A0073_: charge -0.74 expected near 0.0 at pH= 2.0 ASP-A0075_: charge -1.00 expected near 0.0 at pH= 0.0 TYR-A0078_: charge 0.00 expected near -1.0 at pH=12.0 TYR-A0090_: charge -0.09 expected near -1.0 at pH=12.0 ASP-A0093_: charge -0.83 expected near 0.0 at pH= 1.0 TYR-A0097_: charge -0.17 expected near -1.0 at pH=12.0 TYR-A0103_: charge 0.00 expected near -1.0 at pH=12.0","title":"sanity.py"},{"location":"tools/#parameter-file-preparation","text":"","title":"Parameter file preparation"},{"location":"tools/#pdb2ftplpy","text":"This tool converts a pdb file to a ftpl template. Syntax usage: pdb2ftpl.py [-h] [-d] [-c conformer type] pdbfile Create a ftpl template file from a cofactor PDB file. The atoms in the input files are considered as one molecule. positional arguments: pdbfile optional arguments: -h, --help show this help message and exit -d Ignore CONNECT, use distance to determine bond -c conformer type Specify a 2-character conformer type ID, default 01","title":"pdb2ftpl.py"},{"location":"tools/#mol2_chargepy","text":"Apply mol2 charge to a conformer in ftpl template. The mol2 file doesn't need to have the matching atom names, as long as the element names are correct. Syntax $ mol2_charge.py -h usage: mol2_charge.py [-h] -m mol2 -c conf [--show] ftpl Apply mol2 charge to a conformer in ftpl template. The mol2 file doesn't need to have the matching atom names, as long as the element names are correct. positional arguments: ftpl optional arguments: -h, --help show this help message and exit -m mol2 mol2 file with charge -c conf Conformer ID in conformer list to be matched. --show Show atom name matching, default false. Example: If I have a ftpl file T4Y.tpl and a mol2 file 27c-p.mol2 with atom charge. $ mol2_charge.py -m 27c-p.mol2 T4Y.ftpl -c T4Y01 --show ================= ftpl --- mol2 ================= \" N1 \" --- \"N4\" \" C4 \" --- \"C14\" \" C5 \" --- \"C13\" \" C6 \" --- \"C12\" \" C7 \" --- \"C11\" \" C8 \" --- \"C7\" \" C10\" --- \"C5\" \" C13\" --- \"C2\" \" N \" --- \"N8\" \" C \" --- \"C18\" \" O \" --- \"O3\" \" C1 \" --- \"C17\" \" C11\" --- \"C10\" \" C12\" --- \"C9\" \" C14\" --- \"C1\" \" C2 \" --- \"C16\" \" C3 \" --- \"C15\" \" C9 \" --- \"C6\" \" H5 \" --- \"H35\" \" H6 \" --- \"H34\" \" H8 \" --- \"H32\" \" H7 \" --- \"H33\" \" H9 \" --- \"H26\" \" H10\" --- \"H27\" \" H13\" --- \"H22\" \" H14\" --- \"H23\" \" H1 \" --- \"H38\" \" H \" --- \"H39\" \" H2 \" --- \"H40\" \" H15\" --- \"H30\" \" H16\" --- \"H31\" \" H18\" --- \"H28\" \" H17\" --- \"H29\" \" H22\" --- \"H19\" \" H19\" --- \"H20\" \" H20\" --- \"H21\" \" H3 \" --- \"H37\" \" H4 \" --- \"H36\" \" H11\" --- \"H24\" \" H12\" --- \"H25\" ================= CHARGE, T4Y01, \" N1 \": -0.45 CHARGE, T4Y01, \" C4 \": -0.14 CHARGE, T4Y01, \" C5 \": -0.11 CHARGE, T4Y01, \" C6 \": -0.09 CHARGE, T4Y01, \" C7 \": 0.22 CHARGE, T4Y01, \" C8 \": 0.17 CHARGE, T4Y01, \" C10\": 0.09 CHARGE, T4Y01, \" C13\": 0.66 CHARGE, T4Y01, \" N \": -0.75 CHARGE, T4Y01, \" C \": -0.05 CHARGE, T4Y01, \" O \": -0.61 CHARGE, T4Y01, \" C1 \": -0.08 CHARGE, T4Y01, \" C11\": 0.09 CHARGE, T4Y01, \" C12\": 0.15 CHARGE, T4Y01, \" C14\": -0.17 CHARGE, T4Y01, \" C2 \": -0.13 CHARGE, T4Y01, \" C3 \": -0.13 CHARGE, T4Y01, \" C9 \": -0.10 CHARGE, T4Y01, \" H5 \": 0.13 CHARGE, T4Y01, \" H6 \": 0.15 CHARGE, T4Y01, \" H8 \": 0.04 CHARGE, T4Y01, \" H7 \": 0.04 CHARGE, T4Y01, \" H9 \": 0.04 CHARGE, T4Y01, \" H10\": 0.04 CHARGE, T4Y01, \" H13\": 0.06 CHARGE, T4Y01, \" H14\": 0.06 CHARGE, T4Y01, \" H1 \": 0.04 CHARGE, T4Y01, \" H \": 0.04 CHARGE, T4Y01, \" H2 \": 0.04 CHARGE, T4Y01, \" H15\": 0.05 CHARGE, T4Y01, \" H16\": 0.05 CHARGE, T4Y01, \" H18\": 0.03 CHARGE, T4Y01, \" H17\": 0.03 CHARGE, T4Y01, \" H22\": 0.06 CHARGE, T4Y01, \" H19\": 0.06 CHARGE, T4Y01, \" H20\": 0.06 CHARGE, T4Y01, \" H3 \": 0.13 CHARGE, T4Y01, \" H4 \": 0.13 CHARGE, T4Y01, \" H11\": 0.06 CHARGE, T4Y01, \" H12\": 0.06","title":"mol2_charge.py"},{"location":"tools/#tpl-free2mccepy","text":"This command converts ftpl files to ./param, a directory hosts old mcce tple files. It is a compatibility tool, which makes new ftpl files readable by old mcce executable. Syntax tpl-free2mcce.py Input file: run.prm param/ under mcce distribution directory Output file param under current directory","title":"tpl-free2mcce.py"},{"location":"tools/#tpl-mcce2freepy","text":"Future versions of MCCE will use ftpl format, and this command converts mcce tpl file to new ftpl file. Syntax tpl-mcce2ftpl.py tplfile Input file: tpl file Output file ftpl file content on screen.","title":"tpl-mcce2free.py"},{"location":"tools/#verify_ftplpy","text":"This program verifies a ftpl by reading a pdb file of that cofactor. Syntax verify_ftpl.py tplfile pdbfile Input file: ftpl file pdb file that corresponds to that ftpl file","title":"verify_ftpl.py"},{"location":"tools/#connecting-to-other-programs","text":"","title":"Connecting to other programs"},{"location":"tools/#striph2opy","text":"This tool strips away specified surface molecules layer by layer until all left are buried Syntax usage: striph2o.py [-h] [-c RES [RES ...]] [-s exposure] -f inputfile [-o outputfile] Strip off exposed cofactors like water and ions based on solvent accessible surface area. optional arguments: -h, --help show this help message and exit -c RES [RES ...] Specify cofactor names to strip off, default is HOH. -s exposure Fraction exposure threshold to be cut. Default is 0.05. -f inputfile Input file name. -o outputfile Output file name, default is inputfile name with extension .stripped. This program does not only strip off water, it also strip off any molecule as named in the command line. So one can use it to delete ions and lipid bilayers in the input structure. Required files: input pdb file Output files input_file-stripped.pdb for stripped pdb file unless otherwise named input_file.acc for residue solvent accessibility Example: striph2o.py -f frame32_50.pdb -c HOH CLA SOD BGA POP DLP","title":"striph2o.py"},{"location":"wikihowto/","text":"How to edit MCCE wiki \u00b6 Page last updated on: 2020-07-07 This documentation is written in mkdocs, which uses markdown language and publishes on github pages at url https://github.com/GunnerLab/Stable-MCCE . Install of Mkdocs \u00b6 You need pip, a python package manager, for installation. Generally, you are able to install pip through conda $ conda install pip or system package manager $ sudo aptitude install python-pip If you don't know pip, please go to https://pip.pypa.io/en/stable/ for more information. In a terminal window, run these commands to install mkdocs, theme, and necessary plugins for documentation of this project. $ pip install --upgrade pip $ pip install bs4 $ pip install unicode $ pip install mkdocs $ pip install mkdocs-material $ pip install pymdown-extensions $ pip install markdown-blockdiag $ pip install markdown-include $ pip install mkdocs-git-revision-date-plugin Writing and editing \u00b6 All documentation files reside under folder wiki/ mkdocs.yml : configuration file, also defines the menu docs/ : location of documentation files img/ : location for image files site/ : site web pages published by command mkdocs gh-deploy, do not edit this directory. Under wiki/ directory, run $ mkdocs serve will bring up a web service, and point browser to http://localhost:8000 to enable viewing and debugging the documentation. Deploying \u00b6 Commit changes: \u00b6 $ git commit -a -m \"updated by jmao\" This commit will update the time stamp on the page as well. Push to your forked repository \u00b6 First check if you set up the GunnerLab as upstream For example: (base) jmao@pc:~/projects/Stable-MCCE/wiki$ git remote -v origin https://github.com/newbooks/Stable-MCCE.git (fetch) origin https://github.com/newbooks/Stable-MCCE.git (push) upstream https://github.com/GunnerLab/Stable-MCCE.git (fetch) upstream https://github.com/GunnerLab/Stable-MCCE.git (push) If you do not have upstream repo, push to the origin, then make a pull request: $ git push Then go to https://github.com/ under your forked repository. Make a pull request. Someone will publish the edit for you. Publish directly \u00b6 If you are a group member with publish permission, you can publish directly. Make sure the upstream is setup properly: $ git remote -v If upstream is not pointing to https://github.com/GunnerLab/Stable-MCCE.git , run git remote add upstream https://github.com/GunnerLab/Stable-MCCE.git Under wiki folder, run gh-deploy (base) jmao@pc:~/projects/Stable-MCCE/wiki$ mkdocs gh-deploy INFO - Cleaning site directory INFO - Building documentation to directory: /home/jmao/projects/Stable-MCCE/wiki/site INFO - Copying '/home/jmao/projects/Stable-MCCE/wiki/site' to 'gh-pages' branch and pushing to GitHub. INFO - Your documentation should shortly be available at: https://GunnerLab.github.io/Stable-MCCE/ If gh-deploy reports conflict in special branch gh-pages, use \"--force\" switch to overwrite: $ mkdocs gh-deploy --force The published site is on: https://gunnerlab.github.io/Stable-MCCE/ . Markdown resources \u00b6 Basic syntax: https://www.markdownguide.org/cheat-sheet/ More on syntax: https://alinex.gitlab.io/env/mkdocs/ Diagram: http://blockdiag.com/en/blockdiag/ PyDown: https://facelessuser.github.io/pymdown-extensions/extensions/arithmatex/","title":"Write documentation"},{"location":"wikihowto/#how-to-edit-mcce-wiki","text":"Page last updated on: 2020-07-07 This documentation is written in mkdocs, which uses markdown language and publishes on github pages at url https://github.com/GunnerLab/Stable-MCCE .","title":"How to edit MCCE wiki"},{"location":"wikihowto/#install-of-mkdocs","text":"You need pip, a python package manager, for installation. Generally, you are able to install pip through conda $ conda install pip or system package manager $ sudo aptitude install python-pip If you don't know pip, please go to https://pip.pypa.io/en/stable/ for more information. In a terminal window, run these commands to install mkdocs, theme, and necessary plugins for documentation of this project. $ pip install --upgrade pip $ pip install bs4 $ pip install unicode $ pip install mkdocs $ pip install mkdocs-material $ pip install pymdown-extensions $ pip install markdown-blockdiag $ pip install markdown-include $ pip install mkdocs-git-revision-date-plugin","title":"Install of Mkdocs"},{"location":"wikihowto/#writing-and-editing","text":"All documentation files reside under folder wiki/ mkdocs.yml : configuration file, also defines the menu docs/ : location of documentation files img/ : location for image files site/ : site web pages published by command mkdocs gh-deploy, do not edit this directory. Under wiki/ directory, run $ mkdocs serve will bring up a web service, and point browser to http://localhost:8000 to enable viewing and debugging the documentation.","title":"Writing and editing"},{"location":"wikihowto/#deploying","text":"","title":"Deploying"},{"location":"wikihowto/#commit-changes","text":"$ git commit -a -m \"updated by jmao\" This commit will update the time stamp on the page as well.","title":"Commit changes:"},{"location":"wikihowto/#push-to-your-forked-repository","text":"First check if you set up the GunnerLab as upstream For example: (base) jmao@pc:~/projects/Stable-MCCE/wiki$ git remote -v origin https://github.com/newbooks/Stable-MCCE.git (fetch) origin https://github.com/newbooks/Stable-MCCE.git (push) upstream https://github.com/GunnerLab/Stable-MCCE.git (fetch) upstream https://github.com/GunnerLab/Stable-MCCE.git (push) If you do not have upstream repo, push to the origin, then make a pull request: $ git push Then go to https://github.com/ under your forked repository. Make a pull request. Someone will publish the edit for you.","title":"Push to your forked repository"},{"location":"wikihowto/#publish-directly","text":"If you are a group member with publish permission, you can publish directly. Make sure the upstream is setup properly: $ git remote -v If upstream is not pointing to https://github.com/GunnerLab/Stable-MCCE.git , run git remote add upstream https://github.com/GunnerLab/Stable-MCCE.git Under wiki folder, run gh-deploy (base) jmao@pc:~/projects/Stable-MCCE/wiki$ mkdocs gh-deploy INFO - Cleaning site directory INFO - Building documentation to directory: /home/jmao/projects/Stable-MCCE/wiki/site INFO - Copying '/home/jmao/projects/Stable-MCCE/wiki/site' to 'gh-pages' branch and pushing to GitHub. INFO - Your documentation should shortly be available at: https://GunnerLab.github.io/Stable-MCCE/ If gh-deploy reports conflict in special branch gh-pages, use \"--force\" switch to overwrite: $ mkdocs gh-deploy --force The published site is on: https://gunnerlab.github.io/Stable-MCCE/ .","title":"Publish directly"},{"location":"wikihowto/#markdown-resources","text":"Basic syntax: https://www.markdownguide.org/cheat-sheet/ More on syntax: https://alinex.gitlab.io/env/mkdocs/ Diagram: http://blockdiag.com/en/blockdiag/ PyDown: https://facelessuser.github.io/pymdown-extensions/extensions/arithmatex/","title":"Markdown resources"},{"location":"wsl/","text":"Install WSL - Windows Subsystem for Linux \u00b6 Page last updated on: 2020-12-04 MCCE runs on a Unix system, which is supported by Linux and Mac OSX. If you use Windows 10, the Linux subsystem is a lightweight Linux alternative to run mcce. Step 1. Enable the Windows Subsystem \u00b6 Open the PowerShell as an Administrator and Run: dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart Step 2. Enable Virtual Machine \u00b6 In the PowerShell run: dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart Step 3. Download the Linux kernel update package \u00b6 Download the latest package from one of the following links depending on your CPU architecture: WSL2 Linux kernel update package for x64 machines WSL2 Linux kernel update package for AMD64 Run the update package downloaded in the previous step. (Double-click to run - you will be prompted for elevated permissions, select \u2018yes\u2019 to approve this installation.) Step 4. Set WSL 2 as your default version \u00b6 In the PowerShell run: wsl --set-default-version 2 Step 5. Install Linux \u00b6 Open the Microsoft Store and select your favorite Linux distribution. From the distribution's page, select \"Get\". Launch the Ubuntu app, and it will prompt to set up the first user account. After installation, you can start Linux shell window by any of these methods: launching Ubuntu App using cmd terminal and run \"wsl\" or \"bash\" using Powershell and run \"wsl\" or \"bash\" using the Windows Terminal (see next section) Step 6. Install miniconda3 \u00b6 In Linux (wsl) window, run wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh to download miniconda 3 installer. Run: bash Miniconda3-latest-Linux-x86_64.sh and follow the instruction to install miniconda3. Step 7. Access Linux subsystem files \u00b6 From Linux subsystem, Windows drives are mounted under /mnt: C:\\ 511747028 455342680 56404348 89% /mnt/c D:\\ 1953512444 774229312 1179283132 40% /mnt/d F:\\ 5860487164 2442458764 3418028400 42% /mnt/f From Windows, one can point file explore to \\\\wsl$\\Ubuntu to see Linux file system. Step 8. Install Windows Terminal (Optional) \u00b6 Install Windows terminal from Microsoft Store Open different terminal types: CTRL+Shift+1: Open a powershell CTRL+Shift+2: Open a cmd window CTRL+Shift+3: Open a Linux terminal Open a pane: alt+shift+plus: Open a vertical pane alt+shift+minus: Open a horizontal pane alt+shift+D: Open a new pane alternatively between vertical and horizontal modes. To close a pane: type exit Step 9. Install Xserver for Graphic User Interface (Optional) \u00b6 WSL requires a separate X server to run graphical applications. So one needs to install a X server for Windows and configure WSL to use the X server/ Install VcXsrv \u00b6 Download and install VcXsrv from here: https://sourceforge.net/projects/vcxsrv/ Launch VcXsrv \u00b6 Run xlaunch.exe under c:/Program Files/VcXsrv and make sure \"Disable access control\" is checked in the dialogue window. Configure WSL bash environment to use X server \u00b6 Bash terminal in WSL should be configured to know where the Xserver is in order to run graphics. Since we installed the Xserver in windows, we need to find the Windows virtual host IP address to set the DISPLAY variable: export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2}'):0 You can write this command to ~/.bashrc so that DISPLAY is automatically set every time a wsl bash window is open. Run xeyes to test xserver connection. If you don't have xeyes, install it with command: apt-get install x11-apps","title":"Install WSL"},{"location":"wsl/#install-wsl-windows-subsystem-for-linux","text":"Page last updated on: 2020-12-04 MCCE runs on a Unix system, which is supported by Linux and Mac OSX. If you use Windows 10, the Linux subsystem is a lightweight Linux alternative to run mcce.","title":"Install WSL - Windows Subsystem for Linux"},{"location":"wsl/#step-1-enable-the-windows-subsystem","text":"Open the PowerShell as an Administrator and Run: dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart","title":"Step 1. Enable the Windows Subsystem"},{"location":"wsl/#step-2-enable-virtual-machine","text":"In the PowerShell run: dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart","title":"Step 2. Enable Virtual Machine"},{"location":"wsl/#step-3-download-the-linux-kernel-update-package","text":"Download the latest package from one of the following links depending on your CPU architecture: WSL2 Linux kernel update package for x64 machines WSL2 Linux kernel update package for AMD64 Run the update package downloaded in the previous step. (Double-click to run - you will be prompted for elevated permissions, select \u2018yes\u2019 to approve this installation.)","title":"Step 3. Download the Linux kernel update package"},{"location":"wsl/#step-4-set-wsl-2-as-your-default-version","text":"In the PowerShell run: wsl --set-default-version 2","title":"Step 4. Set WSL 2 as your default version"},{"location":"wsl/#step-5-install-linux","text":"Open the Microsoft Store and select your favorite Linux distribution. From the distribution's page, select \"Get\". Launch the Ubuntu app, and it will prompt to set up the first user account. After installation, you can start Linux shell window by any of these methods: launching Ubuntu App using cmd terminal and run \"wsl\" or \"bash\" using Powershell and run \"wsl\" or \"bash\" using the Windows Terminal (see next section)","title":"Step 5. Install Linux"},{"location":"wsl/#step-6-install-miniconda3","text":"In Linux (wsl) window, run wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh to download miniconda 3 installer. Run: bash Miniconda3-latest-Linux-x86_64.sh and follow the instruction to install miniconda3.","title":"Step 6. Install miniconda3"},{"location":"wsl/#step-7-access-linux-subsystem-files","text":"From Linux subsystem, Windows drives are mounted under /mnt: C:\\ 511747028 455342680 56404348 89% /mnt/c D:\\ 1953512444 774229312 1179283132 40% /mnt/d F:\\ 5860487164 2442458764 3418028400 42% /mnt/f From Windows, one can point file explore to \\\\wsl$\\Ubuntu to see Linux file system.","title":"Step 7. Access Linux subsystem files"},{"location":"wsl/#step-8-install-windows-terminal-optional","text":"Install Windows terminal from Microsoft Store Open different terminal types: CTRL+Shift+1: Open a powershell CTRL+Shift+2: Open a cmd window CTRL+Shift+3: Open a Linux terminal Open a pane: alt+shift+plus: Open a vertical pane alt+shift+minus: Open a horizontal pane alt+shift+D: Open a new pane alternatively between vertical and horizontal modes. To close a pane: type exit","title":"Step 8. Install Windows Terminal (Optional)"},{"location":"wsl/#step-9-install-xserver-for-graphic-user-interface-optional","text":"WSL requires a separate X server to run graphical applications. So one needs to install a X server for Windows and configure WSL to use the X server/","title":"Step 9. Install Xserver for Graphic User Interface (Optional)"},{"location":"wsl/#install-vcxsrv","text":"Download and install VcXsrv from here: https://sourceforge.net/projects/vcxsrv/","title":"Install VcXsrv"},{"location":"wsl/#launch-vcxsrv","text":"Run xlaunch.exe under c:/Program Files/VcXsrv and make sure \"Disable access control\" is checked in the dialogue window.","title":"Launch VcXsrv"},{"location":"wsl/#configure-wsl-bash-environment-to-use-x-server","text":"Bash terminal in WSL should be configured to know where the Xserver is in order to run graphics. Since we installed the Xserver in windows, we need to find the Windows virtual host IP address to set the DISPLAY variable: export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2}'):0 You can write this command to ~/.bashrc so that DISPLAY is automatically set every time a wsl bash window is open. Run xeyes to test xserver connection. If you don't have xeyes, install it with command: apt-get install x11-apps","title":"Configure WSL bash environment to use X server"}]}